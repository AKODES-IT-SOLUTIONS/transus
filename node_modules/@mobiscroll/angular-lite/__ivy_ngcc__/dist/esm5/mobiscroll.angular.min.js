/* eslint-disable */
import { Injectable, Directive, ElementRef, NgZone, Input as Input$1, Output, ViewContainerRef, EventEmitter, NgModule, ViewChild, Optional, Component, ChangeDetectionStrategy, ChangeDetectorRef, ViewChildren } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgControl, FormsModule } from '@angular/forms';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from '@angular/common';

var _c0 = ["initElement"];
function MbscInput_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 5);
} }
function MbscInput_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 6);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.errorMessage);
} }
var _c1 = ["*"];
var _c2 = ["rootElement"];
function MbscTextarea_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.errorMessage);
} }
function MbscDropdown_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.errorMessage);
} }
function MbscCheckbox_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.errorMessage);
} }
function MbscSwitch_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.errorMessage);
} }
function MbscRadio_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 4);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.errorMessage);
} }
function MbscSegmented_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span");
} if (rf & 2) {
    var ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap("mbsc-ic mbsc-ic-" + ctx_r1.icon);
} }
var _c3 = ["inputElements"];
function MbscSlider_input_2_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 2, 3);
    ɵngcc0.ɵɵlistener("blur", function MbscSlider_input_2_Template_input_blur_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); var ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.onTouch($event); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var v_r1 = ctx.$implicit;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.disabled);
    ɵngcc0.ɵɵattribute("value", ctx_r0.dummyArray.length > 1 && ctx_r0.initialValue ? ctx_r0.initialValue[v_r1] : ctx_r0.initialValue)("data-step-labels", ctx_r0.dataStepLabels)("data-template", ctx_r0.valueTemplate)("data-tooltip", ctx_r0.tooltip ? "true" : null)("data-highlight", ctx_r0.highlight)("data-live", ctx_r0.live)("data-icon", ctx_r0.icon ? ctx_r0.icon : null)("data-val", ctx_r0.val ? ctx_r0.val : null)("data-label-style", ctx_r0.labelStyle)("data-input-style", ctx_r0.inputStyle)("name", ctx_r0.name)("max", ctx_r0.max !== undefined ? ctx_r0.max : null)("min", ctx_r0.min !== undefined ? ctx_r0.min : null)("step", ctx_r0.step !== undefined ? ctx_r0.step : null);
} }
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var mobiscroll = mobiscroll || {},
    util = {};

var os,
    vers,
    majorVersion,
    minorVersion,
    version = [],
    isBrowser = typeof window !== 'undefined',
    isDark = isBrowser && window.matchMedia && window.matchMedia('(prefers-color-scheme:dark)').matches,
    userAgent = isBrowser ? navigator.userAgent : '',
    platform = isBrowser ? navigator.platform : '',
    maxTouchPoints = isBrowser ? navigator.maxTouchPoints : 0,
    isSafari = /Safari/.test(userAgent),
    device = userAgent.match(/Android|iPhone|iPad|iPod|Windows Phone|Windows|MSIE/i),
    raf = isBrowser && window.requestAnimationFrame || function (func) {
  return setTimeout(func, 20);
};

if (/Android/i.test(device)) {
  os = 'android';
  vers = userAgent.match(/Android\s+([\d.]+)/i);

  if (vers) {
    version = vers[0].replace('Android ', '').split('.');
  }
} else if (/iPhone|iPad|iPod/i.test(device) || /iPhone|iPad|iPod/i.test(platform) || platform === 'MacIntel' && maxTouchPoints > 1) {
  // On iPad with iOS 13 desktop site request is automatically enabled in Safari,
  // so 'iPad' is no longer present in the user agent string.
  // In this case we check `navigator.platform` and `navigator.maxTouchPoints`.
  // maxTouchPoints is needed to exclude desktop Mac OS X.
  os = 'ios';
  vers = userAgent.match(/OS\s+([\d_]+)/i);

  if (vers) {
    version = vers[0].replace(/_/g, '.').replace('OS ', '').split('.');
  }
} else if (/Windows Phone/i.test(device)) {
  os = 'wp';
} else if (/Windows|MSIE/i.test(device)) {
  os = 'windows';
}

majorVersion = version[0];
minorVersion = version[1];

function testProps(props) {
  var i;

  for (i in props) {
    if (mod[props[i]] !== undefined) {
      return true;
    }
  }

  return false;
}

function testPrefix() {
  var prefixes = ['Webkit', 'Moz', 'O', 'ms'],
      p;

  for (p in prefixes) {
    if (testProps([prefixes[p] + 'Transform'])) {
      return '-' + prefixes[p].toLowerCase() + '-';
    }
  }

  return '';
}

function testTouch(e, elm) {
  if (e.type == 'touchstart') {
    elm.__mbscTouched = 1;
  } else if (elm.__mbscTouched) {
    delete elm.__mbscTouched;
    return false;
  }

  return true;
}

function listen(el, event, handler, opt) {
  if (el) {
    el.addEventListener(event, handler, opt);
  }
}

function unlisten(el, event, handler, opt) {
  if (el) {
    el.removeEventListener(event, handler, opt);
  }
}

function matches(element, selector) {
  if (!selector || !element || element.nodeType !== 1) {
    return false;
  }

  var matchesSelector = element.matches || element.matchesSelector || element.webkitMatchesSelector || element.mozMatchesSelector || element.msMatchesSelector;
  return matchesSelector.call(element, selector);
}

function closest(el, target, selector) {
  while (target) {
    if (matches(target, selector)) {
      return target;
    }

    target = target !== el ? target.parentNode : null;
  }

  return null;
}

function trigger(elm, name, data) {
  var evt;

  try {
    evt = new CustomEvent(name, {
      detail: data,
      bubbles: true,
      cancelable: true
    });
  } catch (e) {
    evt = document.createEvent('Event');
    evt.initEvent(name, true, true);
    evt.detail = data;
  }

  elm.dispatchEvent(evt);
}

var animEnd,
    canvas,
    mod,
    cssPrefix,
    hasGhostClick,
    hasTransition,
    isWebView,
    isWkWebView,
    jsPrefix,
    win;

if (isBrowser) {
  win = window;
  canvas = document.createElement('canvas');
  mod = document.createElement('modernizr').style;
  cssPrefix = testPrefix();
  jsPrefix = cssPrefix.replace(/^-/, '').replace(/-$/, '').replace('moz', 'Moz');
  animEnd = mod.animation !== undefined ? 'animationend' : 'webkitAnimationEnd';
  hasTransition = mod.transition !== undefined; // UIWebView on iOS still has the ghost click, 
  // WkWebView does not have a ghost click, but it's hard to tell if it's UIWebView or WkWebView
  // In addition in iOS 12.2 if we enable tap handling, it brakes the form inputs
  // (keyboard appears, but the cursor is not in the input).

  isWebView = os === 'ios' && !isSafari;
  isWkWebView = isWebView && win.webkit && win.webkit.messageHandlers;
  hasGhostClick = mod.touchAction === undefined || isWebView && !isWkWebView;
}

var cssNumber = {
  'column-count': 1,
  'columns': 1,
  'font-weight': 1,
  'line-height': 1,
  'opacity': 1,
  'z-index': 1,
  'zoom': 1
},
    propMap = {
  'readonly': 'readOnly'
},
    emptyArray = [],
    _slice = Array.prototype.slice;

function isFunction(value) {
  return typeof value === "function";
}

function isObject(obj) {
  return typeof obj === "object";
}

function likeArray(obj) {
  return typeof obj.length == 'number';
}

function camelize(str) {
  return str.replace(/-+(.)?/g, function (match, chr) {
    return chr ? chr.toUpperCase() : '';
  });
}

function extend(target, source, deep) {
  for (var key in source) {
    if (deep && ($.isPlainObject(source[key]) || $.isArray(source[key]))) {
      if ($.isPlainObject(source[key]) && !$.isPlainObject(target[key]) || $.isArray(source[key]) && !$.isArray(target[key])) {
        target[key] = {};
      }

      extend(target[key], source[key], deep);
    } else if (source[key] !== undefined) {
      target[key] = source[key];
    }
  }
}

function dasherize(str) {
  return str.replace(/::/g, '/').replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2').replace(/([a-z\d])([A-Z])/g, '$1_$2').replace(/_/g, '-').toLowerCase();
}

function maybeAddPx(name, value) {
  return typeof value == "number" && !cssNumber[dasherize(name)] ? value + "px" : value;
}

var Dom = function () {
  var Dom = function Dom(arr) {
    var _this = this,
        i = 0; // Create array-like object


    for (i = 0; i < arr.length; i++) {
      _this[i] = arr[i];
    }

    _this.length = arr.length; // Return collection with methods

    return $(this);
  };

  var $ = function $(selector, context) {
    var arr = [],
        i = 0;

    if (selector && !context) {
      if (selector instanceof Dom) {
        return selector;
      }
    }

    if (isFunction(selector)) {
      return $(document).ready(selector);
    }

    if (selector) {
      // String
      if (typeof selector === 'string') {
        var els, tempParent, html;
        selector = html = selector.trim();

        if (html.indexOf('<') >= 0 && html.indexOf('>') >= 0) {
          var toCreate = 'div';

          if (html.indexOf('<li') === 0) {
            toCreate = 'ul';
          }

          if (html.indexOf('<tr') === 0) {
            toCreate = 'tbody';
          }

          if (html.indexOf('<td') === 0 || html.indexOf('<th') === 0) {
            toCreate = 'tr';
          }

          if (html.indexOf('<tbody') === 0) {
            toCreate = 'table';
          }

          if (html.indexOf('<option') === 0) {
            toCreate = 'select';
          }

          tempParent = document.createElement(toCreate);
          tempParent.innerHTML = html;

          for (i = 0; i < tempParent.childNodes.length; i++) {
            arr.push(tempParent.childNodes[i]);
          }
        } else {
          if (!context && selector[0] === '#' && !selector.match(/[ .<>:~]/)) {
            // Pure ID selector
            els = [document.getElementById(selector.split('#')[1])];
          } else {
            if (context instanceof Dom) {
              context = context[0];
            } // Other selectors


            els = (context || document).querySelectorAll(selector);
          }

          for (i = 0; i < els.length; i++) {
            if (els[i]) {
              arr.push(els[i]);
            }
          }
        }
      } // Node/element
      else if (selector.nodeType || selector === window || selector === document) {
          arr.push(selector);
        } //Array of elements or instance of Dom
        else if (selector.length > 0 && selector[0].nodeType) {
            for (i = 0; i < selector.length; i++) {
              arr.push(selector[i]);
            }
          } else if ($.isArray(selector)) {
            arr = selector;
          }
    }

    return new Dom(arr);
  };

  Dom.prototype = {
    ready: function ready(callback) {
      if (document.attachEvent ? document.readyState == 'complete' : document.readyState != 'loading') {
        callback($);
      } else {
        document.addEventListener('DOMContentLoaded', function () {
          callback($);
        }, false);
      }

      return this;
    },
    concat: emptyArray.concat,
    empty: function empty() {
      return this.each(function () {
        this.innerHTML = '';
      });
    },
    map: function map(fn) {
      return $($.map(this, function (el, i) {
        return fn.call(el, i, el);
      }));
    },
    slice: function slice() {
      return $(_slice.apply(this, arguments));
    },
    // Classes and attriutes
    // NOTE: element.classList attribure is not supported on android 2.3!!!
    addClass: function addClass(className) {
      if (typeof className === 'undefined') {
        return this;
      }

      var classes = className.split(' ');

      for (var i = 0; i < classes.length; i++) {
        for (var j = 0; j < this.length; j++) {
          if (typeof this[j].classList !== 'undefined' && classes[i] !== '') {
            this[j].classList.add(classes[i]);
          }
        }
      }

      return this;
    },
    removeClass: function removeClass(className) {
      if (typeof className === 'undefined') {
        return this;
      }

      var classes = className.split(' ');

      for (var i = 0; i < classes.length; i++) {
        for (var j = 0; j < this.length; j++) {
          if (typeof this[j].classList !== 'undefined' && classes[i] !== '') {
            this[j].classList.remove(classes[i]);
          }
        }
      }

      return this;
    },
    hasClass: function hasClass(className) {
      return this[0] ? this[0].classList.contains(className) : false;
    },
    toggleClass: function toggleClass(className) {
      var classes = className.split(' ');

      for (var i = 0; i < classes.length; i++) {
        for (var j = 0; j < this.length; j++) {
          if (typeof this[j].classList !== 'undefined') {
            this[j].classList.toggle(classes[i]);
          }
        }
      }

      return this;
    },
    closest: function closest(selector, context) {
      var node = this[0],
          collection = false;

      if (isObject(selector)) {
        collection = $(selector);
      }

      while (node && !(collection ? collection.indexOf(node) >= 0 : matches(node, selector))) {
        node = node !== context && node.nodeType !== node.DOCUMENT_NODE && node.parentNode;
      }

      return $(node);
    },
    attr: function attr(attrs, value) {
      var attr;

      if (arguments.length === 1 && typeof attrs === 'string') {
        // Get attr
        if (this.length) {
          attr = this[0].getAttribute(attrs);
          return attr || attr === '' ? attr : undefined;
        }
      } else {
        // Set attrs
        for (var i = 0; i < this.length; i++) {
          if (arguments.length === 2) {
            // String
            this[i].setAttribute(attrs, value);
          } else {
            // Object
            for (var attrName in attrs) {
              this[i][attrName] = attrs[attrName];
              this[i].setAttribute(attrName, attrs[attrName]);
            }
          }
        }

        return this;
      }
    },
    removeAttr: function removeAttr(attr) {
      for (var i = 0; i < this.length; i++) {
        this[i].removeAttribute(attr);
      }

      return this;
    },
    prop: function prop(props, value) {
      props = propMap[props] || props;

      if (arguments.length === 1 && typeof props === 'string') {
        // Get prop
        return this[0] ? this[0][props] : undefined;
      } else {
        // Set props
        for (var i = 0; i < this.length; i++) {
          this[i][props] = value;
        }

        return this;
      }
    },
    val: function val(value) {
      if (typeof value === 'undefined') {
        if (this.length && this[0].multiple) {
          return $.map(this.find('option:checked'), function (v) {
            return v.value;
          });
        }

        return this[0] ? this[0].value : undefined;
      }

      if (this.length && this[0].multiple) {
        $.each(this[0].options, function () {
          this.selected = value.indexOf(this.value) != -1;
        });
      } else {
        for (var i = 0; i < this.length; i++) {
          this[i].value = value;
        }
      }

      return this;
    },
    //Events
    on: function on(eventName, targetSelector, listener, capture) {
      var boundListener,
          elm,
          event,
          events = eventName.split(' '),
          i,
          j;

      function handleLiveEvent(e) {
        var target = e.target;

        while (target) {
          if ($(target).is(targetSelector)) {
            listener.call(target, e);
          }

          target = target !== this ? target.parentNode : null;
        }
      }

      function handleNamespaces(el, name, listener, capture) {
        var namespace = name.split('.');

        if (!el.DomNameSpaces) {
          el.DomNameSpaces = [];
        }

        el.DomNameSpaces.push({
          namespace: namespace[1],
          event: namespace[0],
          listener: listener,
          capture: capture
        });
        el.addEventListener(namespace[0], listener, capture);
      }

      for (i = 0; i < this.length; i++) {
        elm = this[i];

        if (isFunction(targetSelector) || targetSelector === false) {
          // Usual events
          if (isFunction(targetSelector)) {
            capture = listener || false;
            listener = targetSelector;
          }

          for (j = 0; j < events.length; j++) {
            event = events[j]; // check for namespaces

            if (event.indexOf('.') != -1) {
              handleNamespaces(elm, event, listener, capture);
            } else {
              elm.addEventListener(event, listener, capture);
            }
          }
        } else {
          // Live events
          boundListener = handleLiveEvent.bind(elm);

          for (j = 0; j < events.length; j++) {
            event = events[j];

            if (!elm.DomLiveListeners) {
              elm.DomLiveListeners = [];
            }

            elm.DomLiveListeners.push({
              listener: listener,
              liveListener: boundListener
            });

            if (event.indexOf('.') != -1) {
              handleNamespaces(elm, event, boundListener, capture);
            } else {
              elm.addEventListener(event, boundListener, capture);
            }
          }
        }
      }

      return this;
    },
    off: function off(eventName, targetSelector, listener, capture) {
      var elm,
          event,
          events,
          i,
          j,
          k,
          liveListeners,
          that = this;

      function removeEvents(event) {
        var el,
            i,
            j,
            item,
            nameSpaces,
            parts = event.split('.'),
            name = parts[0],
            ns = parts[1];

        for (i = 0; i < that.length; ++i) {
          el = that[i];
          nameSpaces = el.DomNameSpaces;

          if (nameSpaces) {
            for (j = 0; j < nameSpaces.length; ++j) {
              item = nameSpaces[j];

              if (item.namespace == ns && (item.event == name || !name)) {
                el.removeEventListener(item.event, item.listener, item.capture);
                item.removed = true;
              }
            } // remove the events from the DomNameSpaces array


            for (j = nameSpaces.length - 1; j >= 0; --j) {
              if (nameSpaces[j].removed) {
                nameSpaces.splice(j, 1);
              }
            }
          }
        }
      }

      events = eventName.split(' ');

      for (i = 0; i < events.length; i++) {
        event = events[i];

        for (j = 0; j < this.length; j++) {
          elm = this[j];
          liveListeners = elm.DomLiveListeners;

          if (isFunction(targetSelector) || targetSelector === false) {
            // Usual events
            if (isFunction(targetSelector)) {
              capture = listener || false;
              listener = targetSelector;
            }

            if (event.indexOf('.') === 0) {
              // remove namespace events
              removeEvents(event.substr(1));
            } else {
              elm.removeEventListener(event, listener, capture);
            }
          } else {
            // Live event
            if (liveListeners) {
              for (k = 0; k < liveListeners.length; k++) {
                if (liveListeners[k].listener === listener) {
                  elm.removeEventListener(event, liveListeners[k].liveListener, capture);
                }
              }
            }

            if (elm.DomNameSpaces && elm.DomNameSpaces.length && event) {
              removeEvents(event);
            }
          }
        }
      }

      return this;
    },
    trigger: function trigger$1(eventName, eventData) {
      var events = eventName.split(' ');

      for (var i = 0; i < events.length; i++) {
        for (var j = 0; j < this.length; j++) {
          trigger(this[j], events[i], eventData);
        }
      }

      return this;
    },
    // Sizing/Styles
    width: function width(dim) {
      if (dim !== undefined) {
        return this.css('width', dim);
      }

      if (this[0] === window) {
        return window.innerWidth;
      } else if (this[0] === document) {
        return document.documentElement.scrollWidth;
      } else {
        return this.length > 0 ? parseFloat(this.css('width')) : null;
      }
    },
    height: function height(dim) {
      if (dim !== undefined) {
        return this.css('height', dim);
      }

      if (this[0] === window) {
        return window.innerHeight;
      } else if (this[0] === document) {
        var body = document.body,
            html = document.documentElement;
        return Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);
      } else {
        return this.length > 0 ? parseFloat(this.css('height')) : null;
      }
    },
    innerWidth: function innerWidth() {
      var elm = this;

      if (this.length > 0) {
        if (this[0].innerWidth) {
          return this[0].innerWidth;
        } else {
          var size = this[0].offsetWidth,
              sides = ['left', 'right'];
          sides.forEach(function (side) {
            size -= parseInt(elm.css(camelize('border-' + side + '-width')) || 0, 10);
          });
          return size;
        }
      }
    },
    innerHeight: function innerHeight() {
      var elm = this;

      if (this.length > 0) {
        if (this[0].innerHeight) {
          return this[0].innerHeight;
        } else {
          var size = this[0].offsetHeight,
              sides = ['top', 'bottom'];
          sides.forEach(function (side) {
            size -= parseInt(elm.css(camelize('border-' + side + '-width')) || 0, 10);
          });
          return size;
        }
      }
    },
    offset: function offset() {
      if (this.length > 0) {
        var el = this[0],
            box = el.getBoundingClientRect(),
            doc = document.documentElement;
        return {
          top: box.top + window.pageYOffset - doc.clientTop,
          left: box.left + window.pageXOffset - doc.clientLeft
        };
      }
    },
    hide: function hide() {
      for (var i = 0; i < this.length; i++) {
        this[i].style.display = 'none';
      }

      return this;
    },
    show: function show() {
      for (var i = 0; i < this.length; i++) {
        if (this[i].style.display == "none") {
          this[i].style.display = '';
        }

        if (getComputedStyle(this[i], '').getPropertyValue("display") == "none") {
          this[i].style.display = 'block';
        }
      }

      return this;
    },
    clone: function clone() {
      return this.map(function () {
        return this.cloneNode(true);
      });
    },
    styles: function styles() {
      return this[0] ? window.getComputedStyle(this[0], null) : undefined;
    },
    css: function css(property, value) {
      var i,
          key,
          element = this[0],
          css = '';

      if (arguments.length < 2) {
        if (!element) {
          return;
        }

        if (typeof property === 'string') {
          return element.style[property] || getComputedStyle(element, '').getPropertyValue(property);
        }
      }

      if (typeof property === 'string') {
        if (!value && value !== 0) {
          this.each(function () {
            this.style.removeProperty(dasherize(property));
          });
        } else {
          css = dasherize(property) + ":" + maybeAddPx(property, value);
        }
      } else {
        for (key in property) {
          if (!property[key] && property[key] !== 0) {
            for (i = 0; i < this.length; i++) {
              this[i].style.removeProperty(dasherize(key));
            }
          } else {
            css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';';
          }
        }
      }

      return this.each(function () {
        this.style.cssText += ';' + css;
      });
    },
    each: function each(callback) {
      for (var i = 0; i < this.length; i++) {
        if (callback.apply(this[i], [i, this[i]]) === false) {
          break;
        }
      }

      return this;
    },
    filter: function filter(callback) {
      var matchedItems = [];

      for (var i = 0; i < this.length; i++) {
        if (isFunction(callback)) {
          if (callback.call(this[i], i, this[i])) {
            matchedItems.push(this[i]);
          }
        } else if (matches(this[i], callback)) {
          matchedItems.push(this[i]);
        }
      }

      return new Dom(matchedItems);
    },
    html: function html(_html) {
      if (typeof _html === 'undefined') {
        return this[0] ? this[0].innerHTML : undefined;
      } else {
        this.empty();

        for (var i = 0; i < this.length; i++) {
          this[i].innerHTML = _html;
        }

        return this;
      }
    },
    text: function text(_text) {
      if (typeof _text === 'undefined') {
        return this[0] ? this[0].textContent.trim() : null;
      } else {
        for (var i = 0; i < this.length; i++) {
          this[i].textContent = _text;
        }

        return this;
      }
    },
    is: function is(selector) {
      return this.length > 0 && matches(this[0], selector);
    },
    not: function not(selector) {
      var nodes = [];

      if (isFunction(selector) && selector.call !== undefined) {
        this.each(function (idx) {
          if (!selector.call(this, idx)) {
            nodes.push(this);
          }
        });
      } else {
        var excludes = typeof selector == 'string' ? this.filter(selector) : likeArray(selector) && isFunction(selector.item) ? _slice.call(selector) : $(selector);

        if (isObject(excludes)) {
          excludes = $.map(excludes, function (el) {
            return el;
          });
        }

        this.each(function (i, el) {
          if (excludes.indexOf(el) < 0) {
            nodes.push(el);
          }
        });
      }

      return $(nodes);
    },
    indexOf: function indexOf(el) {
      for (var i = 0; i < this.length; i++) {
        if (this[i] === el) {
          return i;
        }
      }
    },
    index: function index(element) {
      return element ? this.indexOf($(element)[0]) : this.parent().children().indexOf(this[0]);
    },
    get: function get(idx) {
      return idx === undefined ? _slice.call(this) : this[idx >= 0 ? idx : idx + this.length];
    },
    eq: function eq(index) {
      if (typeof index === 'undefined') {
        return this;
      }

      var length = this.length,
          returnIndex;

      if (index > length - 1) {
        return new Dom([]);
      }

      if (index < 0) {
        returnIndex = length + index;
        return returnIndex < 0 ? new Dom([]) : new Dom([this[returnIndex]]);
      }

      return new Dom([this[index]]);
    },
    append: function append(newChild) {
      var i, j;

      for (i = 0; i < this.length; i++) {
        if (typeof newChild === 'string') {
          var tempDiv = document.createElement('div');
          tempDiv.innerHTML = newChild;

          while (tempDiv.firstChild) {
            this[i].appendChild(tempDiv.firstChild);
          }
        } else if (newChild instanceof Dom) {
          for (j = 0; j < newChild.length; j++) {
            this[i].appendChild(newChild[j]);
          }
        } else {
          this[i].appendChild(newChild);
        }
      }

      return this;
    },
    appendTo: function appendTo(parent) {
      $(parent).append(this);
      return this;
    },
    prepend: function prepend(newChild) {
      var i, j;

      for (i = 0; i < this.length; i++) {
        if (typeof newChild === 'string') {
          var tempDiv = document.createElement('div');
          tempDiv.innerHTML = newChild;

          for (j = tempDiv.childNodes.length - 1; j >= 0; j--) {
            this[i].insertBefore(tempDiv.childNodes[j], this[i].childNodes[0]);
          } // this[i].insertAdjacentHTML('afterbegin', newChild);

        } else if (newChild instanceof Dom) {
          for (j = 0; j < newChild.length; j++) {
            this[i].insertBefore(newChild[j], this[i].childNodes[0]);
          }
        } else {
          this[i].insertBefore(newChild, this[i].childNodes[0]);
        }
      }

      return this;
    },
    prependTo: function prependTo(parent) {
      $(parent).prepend(this);
      return this;
    },
    insertBefore: function insertBefore(selector) {
      var before = $(selector);

      for (var i = 0; i < this.length; i++) {
        if (before.length === 1) {
          before[0].parentNode.insertBefore(this[i], before[0]);
        } else if (before.length > 1) {
          for (var j = 0; j < before.length; j++) {
            before[j].parentNode.insertBefore(this[i].cloneNode(true), before[j]);
          }
        }
      }

      return this;
    },
    insertAfter: function insertAfter(selector) {
      var after = $(selector);

      for (var i = 0; i < this.length; i++) {
        if (after.length === 1) {
          after[0].parentNode.insertBefore(this[i], after[0].nextSibling);
        } else if (after.length > 1) {
          for (var j = 0; j < after.length; j++) {
            after[j].parentNode.insertBefore(this[i].cloneNode(true), after[j].nextSibling);
          }
        }
      }

      return this;
    },
    next: function next(selector) {
      if (this.length > 0) {
        if (selector) {
          if (this[0].nextElementSibling && $(this[0].nextElementSibling).is(selector)) {
            return new Dom([this[0].nextElementSibling]);
          } else {
            return new Dom([]);
          }
        } else {
          if (this[0].nextElementSibling) {
            return new Dom([this[0].nextElementSibling]);
          } else {
            return new Dom([]);
          }
        }
      } else {
        return new Dom([]);
      }
    },
    nextAll: function nextAll(selector) {
      var nextEls = [],
          el = this[0];

      if (!el) {
        return new Dom([]);
      }

      while (el.nextElementSibling) {
        var next = el.nextElementSibling;

        if (selector) {
          if ($(next).is(selector)) {
            nextEls.push(next);
          }
        } else {
          nextEls.push(next);
        }

        el = next;
      }

      return new Dom(nextEls);
    },
    prev: function prev(selector) {
      if (this.length > 0) {
        if (selector) {
          if (this[0].previousElementSibling && $(this[0].previousElementSibling).is(selector)) {
            return new Dom([this[0].previousElementSibling]);
          } else {
            return new Dom([]);
          }
        } else {
          if (this[0].previousElementSibling) {
            return new Dom([this[0].previousElementSibling]);
          } else {
            return new Dom([]);
          }
        }
      } else {
        return new Dom([]);
      }
    },
    prevAll: function prevAll(selector) {
      var prevEls = [];
      var el = this[0];

      if (!el) {
        return new Dom([]);
      }

      while (el.previousElementSibling) {
        var prev = el.previousElementSibling;

        if (selector) {
          if ($(prev).is(selector)) {
            prevEls.push(prev);
          }
        } else {
          prevEls.push(prev);
        }

        el = prev;
      }

      return new Dom(prevEls);
    },
    parent: function parent(selector) {
      var parents = [];

      for (var i = 0; i < this.length; i++) {
        if (this[i].parentNode !== null) {
          if (selector) {
            if ($(this[i].parentNode).is(selector)) {
              parents.push(this[i].parentNode);
            }
          } else {
            parents.push(this[i].parentNode);
          }
        }
      }

      return $($.unique(parents));
    },
    parents: function parents(selector) {
      var parents = [];

      for (var i = 0; i < this.length; i++) {
        var parent = this[i].parentNode;

        while (parent) {
          if (selector) {
            if ($(parent).is(selector)) {
              parents.push(parent);
            }
          } else {
            parents.push(parent);
          }

          parent = parent.parentNode;
        }
      }

      return $($.unique(parents));
    },
    find: function find(selector) {
      var foundElements = [];

      for (var i = 0; i < this.length; i++) {
        var found = this[i].querySelectorAll(selector);

        for (var j = 0; j < found.length; j++) {
          foundElements.push(found[j]);
        }
      }

      return new Dom(foundElements);
    },
    children: function children(selector) {
      var children = [];

      for (var i = 0; i < this.length; i++) {
        var childNodes = this[i].childNodes;

        for (var j = 0; j < childNodes.length; j++) {
          if (!selector) {
            if (childNodes[j].nodeType === 1) {
              children.push(childNodes[j]);
            }
          } else {
            if (childNodes[j].nodeType === 1 && $(childNodes[j]).is(selector)) {
              children.push(childNodes[j]);
            }
          }
        }
      }

      return new Dom($.unique(children));
    },
    remove: function remove() {
      for (var i = 0; i < this.length; i++) {
        if (this[i].parentNode) {
          this[i].parentNode.removeChild(this[i]);
        }
      }

      return this;
    },
    add: function add() {
      var dom = this;
      var i, j;

      for (i = 0; i < arguments.length; i++) {
        var toAdd = $(arguments[i]);

        for (j = 0; j < toAdd.length; j++) {
          dom[dom.length] = toAdd[j];
          dom.length++;
        }
      }

      return dom;
    },
    before: function before(elm) {
      $(elm).insertBefore(this);
      return this;
    },
    after: function after(elm) {
      $(elm).insertAfter(this);
      return this;
    },
    scrollTop: function scrollTop(value) {
      if (!this.length) {
        return;
      }

      var hasScrollTop = 'scrollTop' in this[0];

      if (value === undefined) {
        return hasScrollTop ? this[0].scrollTop : this[0].pageYOffset;
      }

      return this.each(hasScrollTop ? function () {
        this.scrollTop = value;
      } : function () {
        this.scrollTo(this.scrollX, value);
      });
    },
    scrollLeft: function scrollLeft(value) {
      if (!this.length) {
        return;
      }

      var hasScrollLeft = 'scrollLeft' in this[0];

      if (value === undefined) {
        return hasScrollLeft ? this[0].scrollLeft : this[0].pageXOffset;
      }

      return this.each(hasScrollLeft ? function () {
        this.scrollLeft = value;
      } : function () {
        this.scrollTo(value, this.scrollY);
      });
    },
    contents: function contents() {
      return this.map(function (i, v) {
        return _slice.call(v.childNodes);
      });
    },
    nextUntil: function nextUntil(selector) {
      var n = this,
          array = [];

      while (n.length && !n.filter(selector).length) {
        array.push(n[0]);
        n = n.next();
      }

      return $(array);
    },
    prevUntil: function prevUntil(selector) {
      var n = this,
          array = [];

      while (n.length && !$(n).filter(selector).length) {
        array.push(n[0]);
        n = n.prev();
      }

      return $(array);
    },
    detach: function detach() {
      return this.remove();
    }
  }; // Link to prototype

  $.fn = Dom.prototype;
  return $;
}(); // Export to local scope


var $ = Dom; // Export to mobiscroll

mobiscroll.$ = Dom; // DOM Library Utilites

$.inArray = function (elem, array, i) {
  return emptyArray.indexOf.call(array, elem, i);
};

$.extend = function (target) {
  var deep,
      args = _slice.call(arguments, 1);

  if (typeof target == 'boolean') {
    deep = target;
    target = args.shift();
  }

  target = target || {};
  args.forEach(function (arg) {
    extend(target, arg, deep);
  });
  return target;
};

$.isFunction = isFunction;

$.isArray = function (arr) {
  return Object.prototype.toString.apply(arr) === '[object Array]';
};

$.isPlainObject = function (obj) {
  return isObject(obj) && obj !== null && obj !== obj.window && Object.getPrototypeOf(obj) == Object.prototype;
};

$.each = function (obj, callback) {
  var i, prop;

  if (!isObject(obj) || !callback) {
    return;
  }

  if ($.isArray(obj) || obj instanceof Dom) {
    // Array
    for (i = 0; i < obj.length; i++) {
      if (callback.call(obj[i], i, obj[i]) === false) {
        break;
      }
    }
  } else {
    // Object
    for (prop in obj) {
      // eslint-disable-next-line no-prototype-builtins
      if (obj.hasOwnProperty(prop) && prop !== 'length') {
        if (callback.call(obj[prop], prop, obj[prop]) === false) {
          break;
        }
      }
    }
  }

  return this;
};

$.unique = function (arr) {
  var unique = [];

  for (var i = 0; i < arr.length; i++) {
    if (unique.indexOf(arr[i]) === -1) {
      unique.push(arr[i]);
    }
  }

  return unique;
};

$.map = function (elements, callback) {
  var value,
      values = [],
      i,
      key;

  if (likeArray(elements)) {
    for (i = 0; i < elements.length; i++) {
      value = callback(elements[i], i);

      if (value !== null) {
        values.push(value);
      }
    }
  } else {
    for (key in elements) {
      value = callback(elements[key], key);

      if (value !== null) {
        values.push(value);
      }
    }
  }

  return values.length > 0 ? $.fn.concat.apply([], values) : values;
};

function noop() {}

function isString(s) {
  return typeof s === 'string';
}

function constrain(val, min, max) {
  return Math.max(min, Math.min(val, max));
}

function vibrate(time) {
  if ('vibrate' in navigator) {
    navigator.vibrate(time || 50);
  }
}

function getPercent(v, min, max) {
  return (v - min) * 100 / (max - min);
}

function getBoolAttr(attr, def, $elm) {
  var v = $elm.attr(attr);
  return v === undefined || v === '' ? def : v === 'true';
}

var tapped = 0;
var allowQuick;

function preventClick() {
  // Prevent ghost click
  tapped++;
  setTimeout(function () {
    tapped--;
  }, 500);
}

function triggerClick(ev, control) {
  // Prevent duplicate triggers on the same element
  // e.g. a form checkbox inside a listview item
  if (control.mbscClick) {
    return;
  }

  var touch = (ev.originalEvent || ev).changedTouches[0],
      evt = document.createEvent('MouseEvents');
  evt.initMouseEvent('click', true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
  evt.isMbscTap = true; // Prevent ionic to bust our click
  // This works for Ionic 1 - 3, not sure about 4

  evt.isIonicTap = true; // This will allow a click fired together with this click
  // We need this, because clicking on a label will trigger a click
  // on the associated input as well, which should not be busted

  allowQuick = true;
  control.mbscChange = true;
  control.mbscClick = true;
  control.dispatchEvent(evt);
  allowQuick = false; // Prevent ghost click

  preventClick();
  setTimeout(function () {
    delete control.mbscClick;
  });
}

function getCoord(e, c, page) {
  var ev = e.originalEvent || e,
      prop = (page ? 'page' : 'client') + c; // Multi touch support

  if (ev.targetTouches && ev.targetTouches[0]) {
    return ev.targetTouches[0][prop];
  }

  if (ev.changedTouches && ev.changedTouches[0]) {
    return ev.changedTouches[0][prop];
  }

  return e[prop];
}

function getControlType($elm) {
  var attrs = ['switch', 'range', 'rating', 'segmented', 'stepper'];
  var elm = $elm[0];
  var role = $elm.attr('data-role');
  var type = $elm.attr('type') || elm.nodeName.toLowerCase();

  if (/(switch|range|rating|segmented|stepper|select)/.test(role)) {
    type = role;
  } else {
    for (var i = 0; i < attrs.length; i++) {
      if ($elm.is('[mbsc-' + attrs[i] + ']')) {
        type = attrs[i];
      }
    }
  }

  return type;
}

function activateControl(control, type, ev) {
  control.focus();

  if (/(button|submit|checkbox|switch|radio)/.test(type)) {
    ev.preventDefault();
  }

  if (!/select/.test(type)) {
    triggerClick(ev, control);
  }
}

function tap(that, el, handler, prevent, tolerance, time) {
  var startX,
      startY,
      target,
      moved,
      startTime,
      $ = mobiscroll.$,
      $elm = $(el);
  tolerance = tolerance || 9;

  function onStart(ev) {
    if (!target) {
      // Can't always call preventDefault here, it kills page scroll
      // if (prevent) {
      //     ev.preventDefault();
      // }
      target = this;
      startX = getCoord(ev, 'X');
      startY = getCoord(ev, 'Y');
      moved = false;
      startTime = new Date();
    }
  }

  function onMove(ev) {
    // If movement is more than 20px, don't fire the click event handler
    if (target && !moved && (Math.abs(getCoord(ev, 'X') - startX) > tolerance || Math.abs(getCoord(ev, 'Y') - startY) > tolerance)) {
      moved = true;
    }
  }

  function onEnd(ev) {
    if (target) {
      if (time && new Date() - startTime < 100 || !moved) {
        // ev.preventDefault();
        // handler.call(target, ev, that);
        triggerClick(ev, ev.target);
      } else {
        preventClick();
      }

      target = false;
    }
  }

  function onClick(ev) {
    if (prevent) {
      ev.preventDefault();
    } // If handler was not called on touchend, call it on click;


    handler.call(this, ev, that);
  }

  function onCancel() {
    target = false;
  }

  $elm.each(function (i, elm) {
    if (that.settings.tap) {
      listen(elm, 'touchstart', onStart, {
        passive: true
      });
      listen(elm, 'touchcancel', onCancel);
      listen(elm, 'touchmove', onMove, {
        passive: true
      });
      listen(elm, 'touchend', onEnd);
    }

    listen(elm, 'click', onClick);

    elm.__mbscOff = function () {
      unlisten(elm, 'touchstart', onStart, {
        passive: true
      });
      unlisten(elm, 'touchcancel', onCancel);
      unlisten(elm, 'touchmove', onMove, {
        passive: true
      });
      unlisten(elm, 'touchend', onEnd);
      unlisten(elm, 'click', onClick);
      delete elm.__mbscOff;
    };
  });
}

function tapOff($elm) {
  if ($elm && $elm[0] && $elm[0].__mbscOff) {
    $elm[0].__mbscOff();
  }
} // Prevent standard behaviour on body click


function bustClick(ev) {
  // Textarea needs the mousedown event
  if (tapped && !allowQuick && !ev.isMbscTap && !(ev.target.nodeName == 'TEXTAREA' && ev.type == 'mousedown')) {
    ev.stopPropagation();
    ev.preventDefault();
    return false;
  }
}

if (isBrowser) {
  ['mouseover', 'mousedown', 'mouseup', 'click'].forEach(function (ev) {
    document.addEventListener(ev, bustClick, true);
  });

  if (os == 'android' && majorVersion < 5) {
    document.addEventListener('change', function (ev) {
      if (tapped && ev.target.type == 'checkbox' && !ev.target.mbscChange) {
        ev.stopPropagation();
        ev.preventDefault();
      }

      delete ev.target.mbscChange;
    }, true);
  }
}

/*!
 * Mobiscroll v4.10.9
 * http://mobiscroll.com
 *
 *
 * Copyright 2010-2018, Acid Media
 *
 */

function getWidth(el) {
  return el[0].innerWidth || el.innerWidth();
}

function getThemeName(s) {
  var themeName = s.theme,
      themeVariant = s.themeVariant;

  if (themeName == 'auto' || !themeName) {
    themeName = ms.autoTheme;
  }

  if (themeName == 'default') {
    themeName = 'mobiscroll';
  }

  if ((themeVariant === 'dark' || isDark && themeVariant === 'auto') && ms.themes.form[themeName + '-dark']) {
    themeName = themeName + '-dark';
  } else if (themeVariant === 'light' && /.+-dark$/.test(themeName)) {
    themeName = themeName.replace(/-dark$/, '');
  }

  return themeName;
}

function autoInit(selector, Component, hasRefresh) {
  if (isBrowser) {
    $$1(function () {
      $$1(selector).each(function () {
        new Component(this, {});
      });
      $$1(document).on('mbsc-enhance', function (ev, settings) {
        if ($$1(ev.target).is(selector)) {
          new Component(ev.target, settings || {});
        } else {
          $$1(selector, ev.target).each(function () {
            new Component(this, settings || {});
          });
        }
      });

      if (hasRefresh) {
        $$1(document).on('mbsc-refresh', function (ev) {
          var inst;

          if ($$1(ev.target).is(selector)) {
            inst = instances[ev.target.id];

            if (inst) {
              inst.refresh();
            }
          } else {
            $$1(selector, ev.target).each(function () {
              inst = instances[this.id];

              if (inst) {
                inst.refresh();
              }
            });
          }
        });
      }
    });
  }
}

var ms,
    $$1 = mobiscroll.$,
    id = +new Date(),
    instances = {},
    classes = {},
    empty = {},
    breakpoints = {
  xsmall: 0,
  small: 576,
  medium: 768,
  large: 992,
  xlarge: 1200
},
    extend$1 = $$1.extend;
extend$1(util, {
  getCoord: getCoord,
  preventClick: preventClick,
  vibrate: vibrate
});
ms = extend$1(mobiscroll, {
  $: $$1,
  version: '4.10.9',
  autoTheme: 'mobiscroll',
  themes: {
    form: {},
    page: {},
    frame: {},
    scroller: {},
    listview: {},
    navigation: {},
    progress: {},
    card: {}
  },
  platform: {
    name: os,
    majorVersion: majorVersion,
    minorVersion: minorVersion
  },
  i18n: {},
  instances: instances,
  classes: classes,
  util: util,
  settings: {},
  setDefaults: function setDefaults(o) {
    extend$1(this.settings, o);
  },
  customTheme: function customTheme(name, baseTheme) {
    var i,
        themes = mobiscroll.themes,
        comps = ['frame', 'scroller', 'listview', 'navigation', 'form', 'page', 'progress', 'card'];

    for (i = 0; i < comps.length; i++) {
      themes[comps[i]][name] = extend$1({}, themes[comps[i]][baseTheme], {
        baseTheme: baseTheme
      });
    }
  }
});

var Base = function Base(el, settings) {
  var ctx,
      lang,
      preset,
      resp,
      s,
      theme,
      themeName,
      trigger,
      defaults,
      that = this;
  that.settings = {};
  that.element = el;
  that._init = noop;
  that._destroy = noop;
  that._processSettings = noop;

  that._checkResp = function (width) {
    if (that && that._responsive) {
      var newResp = getResponsiveSettings(width);

      if (resp !== newResp) {
        resp = newResp;
        that.init({});
        return true;
      }
    }
  };

  that._getRespCont = function () {
    return $$1(s.context == 'body' ? window : s.context);
  };

  that.init = function (newSettings, newValue) {
    var key, value; // In case of settings update save the old value

    if (newSettings && that.getVal) {
      value = that.getVal();
    } // Reset settings object


    for (key in that.settings) {
      delete that.settings[key];
    }

    s = that.settings; // Update original user settings

    extend$1(settings, newSettings); // Load user defaults

    if (that._hasDef) {
      defaults = ms.settings;
    } // Create settings object


    extend$1(s, that._defaults, defaults, settings);
    ctx = that._getRespCont();

    if (that._responsive) {
      if (!resp) {
        resp = getResponsiveSettings();
      }

      extend$1(s, resp);
    } // Get theme defaults


    if (that._hasTheme) {
      themeName = getThemeName(s);
      settings.theme = themeName;
      theme = ms.themes[that._class] ? ms.themes[that._class][themeName] : {};
    } // Get language defaults


    if (that._hasLang) {
      lang = ms.i18n[s.lang];
    } // Update settings object


    extend$1(s, theme, lang, defaults, settings, resp);

    that._processSettings(resp || {}); // Load preset settings


    if (that._presets) {
      preset = that._presets[s.preset];

      if (preset) {
        preset = preset.call(el, that, settings, resp);
        extend$1(s, preset, settings, resp);
      }
    }

    that._init(newSettings); // In case of settings update reset the value.
    // This is needed to adapt the value for the updated settings
    // E.g. min/max, date format, etc.


    if (newSettings && that.setVal) {
      that.setVal(newValue === undefined ? value : newValue, true);
    }

    trigger('onInit');
  };

  that.destroy = function () {
    if (that) {
      that._destroy();

      trigger('onDestroy'); // Delete scroller instance

      delete instances[el.id];
      that = null;
    }
  };
  /**
   * Attach tap event to the given element.
   */


  that.tap = function (el, handler, prevent, tolerance, time) {
    tap(that, el, handler, prevent, tolerance, time);
  };
  /**
   * Triggers an event
   */


  that.trigger = function (name, ev) {
    var ret,
        i,
        v,
        s = [defaults, theme, preset, settings];

    for (i = 0; i < 4; i++) {
      v = s[i];

      if (v && v[name]) {
        ret = v[name].call(el, ev || {}, that);
      }
    }

    return ret;
  };
  /**
   * Sets one ore more options.
   */


  that.option = function (opt, value, newValue) {
    var obj = {},
        // preserve settings that are possible to change runtime
    dynamic = ['data', 'invalid', 'valid', 'readonly'];

    if (/calendar|eventcalendar|range/.test(s.preset)) {
      dynamic.push('marked', 'labels', 'colors');
    }

    if (typeof opt === 'object') {
      obj = opt;
    } else {
      obj[opt] = value;
    }

    dynamic.forEach(function (v) {
      settings[v] = s[v];
    });
    that.init(obj, newValue);
  };
  /**
   * Returns the mobiscroll instance.
   */


  that.getInst = function () {
    return that;
  };

  settings = settings || {};
  trigger = that.trigger;

  function getResponsiveSettings(w) {
    var result = empty,
        width;

    if (s.responsive) {
      width = w || getWidth(ctx);
      $$1.each(s.responsive, function (key, value) {
        if (width >= (value.breakpoint || breakpoints[key])) {
          result = value;
        }
      });
    }

    return result;
  }

  function construct() {
    $$1(el).addClass('mbsc-comp'); // Autogenerate id

    if (!el.id) {
      el.id = 'mobiscroll' + ++id;
    } else if (instances[el.id]) {
      instances[el.id].destroy();
    } // Save instance


    instances[el.id] = that;
    that.__ready = true;
  }

  if (!that.__ready) {
    construct();
  }
};

var Observable = function () {
  function Observable() {
    this.keyCount = 0;
    this.subscribers = new Map();
  }

  Observable.prototype.subscribe = function (handler) {
    var key = this.keyCount++;
    this.subscribers.set(key, handler);
    return key;
  };

  Observable.prototype.unsubscribe = function (handler) {
    if (typeof handler === 'number') {
      this.subscribers.delete(handler);
    } else {
      var foundKey_1 = null;
      this.subscribers.forEach(function (fn, key) {
        if (fn === handler) {
          foundKey_1 = key;
        }
      });
      this.subscribers.delete(foundKey_1);
    }
  };

  Observable.prototype.next = function (value) {
    this.subscribers.forEach(function (handler) {
      handler(value);
    });
  };

  return Observable;
}();

var MbscOptionsService = (function () {
    function MbscOptionsService() {
    }
    Object.defineProperty(MbscOptionsService.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (o) {
            this._options = o;
        },
        enumerable: true,
        configurable: true
    });
    MbscOptionsService.ctorParameters = function () { return []; };
MbscOptionsService.ɵfac = function MbscOptionsService_Factory(t) { return new (t || MbscOptionsService)(); };
MbscOptionsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MbscOptionsService, factory: function (t) { return MbscOptionsService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscOptionsService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return MbscOptionsService;
}());
var MbscInputService = (function () {
    function MbscInputService() {
        this._controlSet = false;
        this._componentRef = undefined;
    }
    Object.defineProperty(MbscInputService.prototype, "isControlSet", {
        get: function () {
            return this._controlSet;
        },
        set: function (v) {
            this._controlSet = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscInputService.prototype, "input", {
        get: function () {
            return this._componentRef;
        },
        set: function (v) {
            this._componentRef = v;
        },
        enumerable: true,
        configurable: true
    });
    MbscInputService.ctorParameters = function () { return []; };
MbscInputService.ɵfac = function MbscInputService_Factory(t) { return new (t || MbscInputService)(); };
MbscInputService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MbscInputService, factory: function (t) { return MbscInputService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscInputService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return MbscInputService;
}());
var MbscBase = (function () {
    function MbscBase(initialElem, zone) {
        this.initialElem = initialElem;
        this.zone = zone;
        this.options = {};
        this.onInit = new EventEmitter();
        this.onDestroy = new EventEmitter();
        this.inlineOptionsObj = {};
        this.pendingValue = undefined;
        this.themeClassesSet = false;
        this.instance = null;
        this.element = null;
        this.inlineOptionsObj.zone = zone;
    }
    MbscBase.prototype.getInlineEvents = function () {
        var _this = this;
        var _loop_1 = function (prop) {
            if (this_1[prop] instanceof (EventEmitter) && (!this_1.options || !(this_1.options[prop]))) {
                this_1.inlineOptionsObj[prop] = function (event, inst) {
                    event.inst = inst;
                    _this[prop].emit(event);
                };
            }
        };
        var this_1 = this;
        for (var prop in this) {
            _loop_1(prop);
        }
    };
    MbscBase.prototype.setThemeClasses = function () {
        $$1(this.initialElem.nativeElement).addClass(this.getThemeClasses());
        this.themeClassesSet = true;
    };
    MbscBase.prototype.clearThemeClasses = function () {
        $$1(this.initialElem.nativeElement).removeClass(this.getThemeClasses());
    };
    MbscBase.prototype.getThemeClasses = function () {
        var s = this.instance.settings;
        return 'mbsc-control-ng mbsc-' + s.theme + (s.baseTheme ? ' mbsc-' + s.baseTheme : '');
    };
    MbscBase.prototype.setElement = function () {
        this.element = this.initialElem.nativeElement;
        var contentInput = $$1('input', this.initialElem.nativeElement);
        if (contentInput.length) {
            this.element = contentInput[0];
        }
    };
    MbscBase.prototype.ngAfterViewInit = function () {
        this.setElement();
        this.startInit();
    };
    MbscBase.prototype.startInit = function () {
        var _this = this;
        this.getInlineEvents();
        var ionInput = this.getIonInput();
        if (ionInput && (ionInput.getInputElement || ionInput.then) && this.element.nodeName !== "INPUT") {
            if (ionInput.getInputElement) {
                ionInput.getInputElement().then(function (inp) {
                    _this.setElement();
                    _this.initControl();
                });
            }
            else {
                ionInput.then(function (ionInpComponent) {
                    ionInpComponent
                        .getInputElement()
                        .then(function (inp) {
                        _this.setElement();
                        _this.initControl();
                    });
                });
            }
        }
        else if (!this.instance) {
            this.initControl();
        }
    };
    MbscBase.prototype.getIonInput = function () {
        var v = this._view;
        var native = this.initialElem.nativeElement;
        var ionInputNode = native.nodeName === "ION-INPUT";
        var inp1 = ionInputNode && v && v._data && v._data.componentView && v._data.componentView.component;
        var inp2 = ionInputNode && native.componentOnReady && native.componentOnReady();
        return inp1 || inp2;
    };
    MbscBase.prototype.initControl = function () { };
    MbscBase.prototype.ngOnDestroy = function () {
        if (this.instance) {
            this.instance.destroy();
        }
    };
    MbscBase.prototype.updateOptions = function (newOptions, optionChanged, invalidChanged, dataChanged) {
        var _this = this;
        if (optionChanged || invalidChanged) {
            setTimeout(function () {
                if (newOptions.theme && _this.themeClassesSet) {
                    _this.clearThemeClasses();
                }
                _this.instance.option(newOptions, undefined, _this.pendingValue);
                if (newOptions.theme && _this.themeClassesSet) {
                    _this.setThemeClasses();
                }
            });
        }
        else if (dataChanged) {
            this.refreshData(this.data);
        }
        else if (this.instance.redraw) {
            this.instance.redraw();
        }
    };
    MbscBase.prototype.ngOnChanges = function (changes) {
        var optionChange = false, cloneChange = false, invalidChange = false, dataChange = false, newOptions = {};
        for (var prop in changes) {
            if (!changes[prop].firstChange && prop !== 'options' && prop !== 'value') {
                if (this.cloneDictionary && this.cloneDictionary[prop]) {
                    this.makeClone(prop, changes[prop].currentValue);
                    if (this.instance) {
                        this.instance.settings[prop] = changes[prop].currentValue;
                    }
                    if (prop == 'invalid') {
                        invalidChange = true;
                    }
                    if (prop == 'data') {
                        dataChange = true;
                    }
                    cloneChange = true;
                }
                else {
                    newOptions[prop] = changes[prop].currentValue;
                    optionChange = true;
                }
            }
            else if (!changes[prop].firstChange && prop !== 'value') {
                newOptions = extend$1(changes[prop].currentValue, newOptions);
                optionChange = true;
            }
            else if (changes[prop].firstChange) {
                if (prop !== 'options' && prop !== 'value') {
                    this.inlineOptionsObj[prop] = changes[prop].currentValue;
                }
            }
        }
        if (cloneChange) {
            extend$1(newOptions, this.cloneDictionary);
        }
        if (optionChange || cloneChange) {
            this.updateOptions(newOptions, optionChange, invalidChange, dataChange);
        }
    };
    MbscBase.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
    ]; };
    MbscBase.propDecorators = {
        'options': [{ type: Input$1, args: ['mbsc-options',] },],
        'cssClass': [{ type: Input$1 },],
        'theme': [{ type: Input$1 },],
        'themeVariant': [{ type: Input$1 },],
        'lang': [{ type: Input$1 },],
        'rtl': [{ type: Input$1 },],
        'responsive': [{ type: Input$1 },],
        'onInit': [{ type: Output },],
        'onDestroy': [{ type: Output },],
    };
MbscBase.ɵfac = function MbscBase_Factory(t) { return new (t || MbscBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MbscBase, selectors: [["", "mbsc-b", ""]], inputs: { options: ["mbsc-options", "options"], cssClass: "cssClass", theme: "theme", themeVariant: "themeVariant", lang: "lang", rtl: "rtl", responsive: "responsive" }, outputs: { onInit: "onInit", onDestroy: "onDestroy" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscBase, [{
        type: Directive,
        args: [{ selector: '[mbsc-b]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { options: [{
            type: Input$1,
            args: ['mbsc-options']
        }], onInit: [{
            type: Output
        }], onDestroy: [{
            type: Output
        }], cssClass: [{
            type: Input$1
        }], theme: [{
            type: Input$1
        }], themeVariant: [{
            type: Input$1
        }], lang: [{
            type: Input$1
        }], rtl: [{
            type: Input$1
        }], responsive: [{
            type: Input$1
        }] }); })();
    return MbscBase;
}());
var MbscValueBase = (function (_super) {
    __extends(MbscValueBase, _super);
    function MbscValueBase(initialElem, zone) {
        var _this = _super.call(this, initialElem, zone) || this;
        _this.initialValue = undefined;
        return _this;
    }
    MbscValueBase.prototype.setNewValue = function (v) { };
    MbscValueBase.prototype.setNewValueProxy = function (v) {
        if (!this.instance) {
            this.initialValue = v;
        }
        this.setNewValue(v);
    };
    MbscValueBase.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
    ]; };
MbscValueBase.ɵfac = function MbscValueBase_Factory(t) { return new (t || MbscValueBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscValueBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MbscValueBase, selectors: [["", "mbsc-v-b", ""]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscValueBase, [{
        type: Directive,
        args: [{ selector: '[mbsc-v-b]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
    return MbscValueBase;
}(MbscBase));
var MbscCloneBase = (function (_super) {
    __extends(MbscCloneBase, _super);
    function MbscCloneBase(initElem, zone) {
        var _this = _super.call(this, initElem, zone) || this;
        _this.cloneDictionary = {};
        return _this;
    }
    MbscCloneBase.prototype.makeClone = function (setting, value) {
        if (value) {
            this.cloneDictionary[setting] = [];
            for (var i = 0; i < value.length; i++) {
                this.cloneDictionary[setting].push(value[i]);
            }
        }
        else {
            this.cloneDictionary[setting] = value;
        }
    };
    MbscCloneBase.prototype.ngDoCheck = function () {
        var changed = false, data = false, invalid = false;
        for (var key in this.cloneDictionary) {
            if (this[key] !== undefined && !deepEqualsArray(this[key], this.cloneDictionary[key])) {
                this.makeClone(key, this[key]);
                this.instance.settings[key] = this[key];
                changed = true;
                if (key == 'invalid') {
                    invalid = true;
                }
                if (key == 'data') {
                    data = true;
                }
            }
        }
        if (changed && this.instance) {
            this.updateOptions(this.cloneDictionary, false, invalid, data);
        }
    };
    MbscCloneBase.prototype.ngOnInit = function () {
        for (var key in this.cloneDictionary) {
            this.makeClone(key, this[key]);
        }
    };
    MbscCloneBase.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
    ]; };
MbscCloneBase.ɵfac = function MbscCloneBase_Factory(t) { return new (t || MbscCloneBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscCloneBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MbscCloneBase, selectors: [["", "mbsc-c-b", ""]], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscCloneBase, [{
        type: Directive,
        args: [{ selector: '[mbsc-c-b]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, null); })();
    return MbscCloneBase;
}(MbscValueBase));
var MbscControlBase = (function (_super) {
    __extends(MbscControlBase, _super);
    function MbscControlBase(initialElement, zone, control, _inputService, _view) {
        var _this = _super.call(this, initialElement, zone) || this;
        _this.control = control;
        _this._inputService = _inputService;
        _this._view = _view;
        _this._needsTimeout = true;
        _this.onChange = function () { };
        _this.onTouch = function () { };
        _this.onChangeEmitter = new EventEmitter();
        _this.oldAccessor = null;
        _this.overwriteAccessor();
        if (_inputService) {
            _inputService.isControlSet = true;
        }
        return _this;
    }
    Object.defineProperty(MbscControlBase.prototype, "optionExtensions", {
        get: function () {
            var _this = this;
            var externalOnClose = this.options && this.options.onClose;
            var externalOnFill = this.options && this.options.onFill;
            var onCloseEmitter = this.onClose;
            return {
                onFill: function (event, inst) {
                    if (_this.oldAccessor) {
                        _this.oldAccessor.writeValue(event.valueText);
                    }
                    else {
                        var ionInput = _this.getIonInput();
                        if (ionInput) {
                            ionInput.value = event.valueText;
                        }
                    }
                    if (externalOnFill) {
                        externalOnFill(event, inst);
                    }
                },
                onClose: function (event, inst) {
                    _this.onTouch();
                    if (externalOnClose) {
                        externalOnClose(event, inst);
                    }
                    if (onCloseEmitter) {
                        event.inst = inst;
                        onCloseEmitter.emit(event);
                    }
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscControlBase.prototype, "enableManualEdit", {
        get: function () {
            var nsf = this.showOnFocus === false || this.options.showOnFocus === false, nst = this.showOnTap === false || this.options.showOnTap === false;
            return nsf && nst;
        },
        enumerable: true,
        configurable: true
    });
    MbscControlBase.prototype.handleChange = function (element) {
        var that = this;
        $$1(element || this.element).on('change', function () {
            that.zone.run(function () {
                var elmValue = that.element.value;
                var instValue = that.instance._value;
                if (elmValue !== instValue && (instValue !== null || elmValue !== '') && that.enableManualEdit) {
                    that.instance.setVal(elmValue, true, true);
                }
                else {
                    var value = that.instance.getVal();
                    if (that.control) {
                        if (!valueEquals(value, that.control.model)) {
                            that.onChange(value);
                            that.control.control.patchValue(value);
                        }
                    }
                    else {
                        that.onChangeEmitter.emit(value);
                    }
                }
            });
        });
        function valueEquals(v1, v2) {
            if (v1 === v2) {
                return true;
            }
            if (v1 instanceof Date && v2 instanceof Date) {
                return (+v1) === (+v2);
            }
            return false;
        }
    };
    MbscControlBase.prototype.overwriteAccessor = function () {
        if (this.control) {
            if (this.control.valueAccessor !== this) {
                this.oldAccessor = this.control.valueAccessor;
            }
            this.control.valueAccessor = this;
        }
    };
    MbscControlBase.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        this.handleChange();
        this.overwriteAccessor();
        if (this.control && this.control._setUpControl) {
            this.control._setUpControl();
        }
    };
    MbscControlBase.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    MbscControlBase.prototype.registerOnTouched = function (fn) {
        this.onTouch = fn;
    };
    MbscControlBase.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
        if (this.oldAccessor && this.oldAccessor.setDisabledState) {
            this.oldAccessor.setDisabledState(isDisabled);
        }
        if (this.instance && this.instance.disable && this.instance.enable) {
            if (isDisabled) {
                this.instance.disable();
            }
            else {
                this.instance.enable();
            }
        }
    };
    MbscControlBase.prototype.writeValue = function (v) {
        var _this = this;
        if (this._needsTimeout) {
            this.pendingValue = v;
            setTimeout(function () {
                _this.pendingValue = undefined;
                _this.setNewValueProxy(v);
            });
        }
        else {
            this.setNewValueProxy(v);
        }
    };
    MbscControlBase.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
        { type: NgControl, },
        { type: MbscInputService, },
        { type: ViewContainerRef, },
    ]; };
    MbscControlBase.propDecorators = {
        'labelStyle': [{ type: Input$1, args: ['label-style',] },],
        'inputStyle': [{ type: Input$1, args: ['input-style',] },],
        'showOnFocus': [{ type: Input$1 },],
        'showOnTap': [{ type: Input$1 },],
        'disabled': [{ type: Input$1 },],
    };
MbscControlBase.ɵfac = function MbscControlBase_Factory(t) { return new (t || MbscControlBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
MbscControlBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MbscControlBase, selectors: [["", "mbsc-cc-b", ""]], inputs: { disabled: "disabled", labelStyle: ["label-style", "labelStyle"], inputStyle: ["input-style", "inputStyle"], showOnFocus: "showOnFocus", showOnTap: "showOnTap" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscControlBase, [{
        type: Directive,
        args: [{ selector: '[mbsc-cc-b]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.NgControl }, { type: MbscInputService }, { type: ɵngcc0.ViewContainerRef }]; }, { disabled: [{
            type: Input$1
        }], labelStyle: [{
            type: Input$1,
            args: ['label-style']
        }], inputStyle: [{
            type: Input$1,
            args: ['input-style']
        }], showOnFocus: [{
            type: Input$1
        }], showOnTap: [{
            type: Input$1
        }] }); })();
    return MbscControlBase;
}(MbscCloneBase));
var MbscFrameBase = (function (_super) {
    __extends(MbscFrameBase, _super);
    function MbscFrameBase(initialElem, zone, control, _inputService, view) {
        var _this = _super.call(this, initialElem, zone, control, _inputService, view) || this;
        _this.onBeforeClose = new EventEmitter();
        _this.onBeforeShow = new EventEmitter();
        _this.onCancel = new EventEmitter();
        _this.onClose = new EventEmitter();
        _this.onFill = new EventEmitter();
        _this.onMarkupReady = new EventEmitter();
        _this.onPosition = new EventEmitter();
        _this.onShow = new EventEmitter();
        return _this;
    }
    Object.defineProperty(MbscFrameBase.prototype, "inline", {
        get: function () {
            return (this.display || (this.options && this.options.display)) === 'inline';
        },
        enumerable: true,
        configurable: true
    });
    MbscFrameBase.prototype.ngOnInit = function () {
        this.cloneDictionary.invalid = [];
        this.cloneDictionary.valid = [];
        _super.prototype.ngOnInit.call(this);
    };
    MbscFrameBase.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
        { type: NgControl, },
        { type: MbscInputService, },
        { type: ViewContainerRef, },
    ]; };
    MbscFrameBase.propDecorators = {
        'options': [{ type: Input$1 },],
        'dropdown': [{ type: Input$1 },],
        'anchor': [{ type: Input$1 },],
        'animate': [{ type: Input$1 },],
        'buttons': [{ type: Input$1 },],
        'closeOnOverlayTap': [{ type: Input$1 },],
        'context': [{ type: Input$1 },],
        'display': [{ type: Input$1 },],
        'showInput': [{ type: Input$1 },],
        'focusOnClose': [{ type: Input$1 },],
        'focusTrap': [{ type: Input$1 },],
        'headerText': [{ type: Input$1 },],
        'scrollLock': [{ type: Input$1 },],
        'touchUi': [{ type: Input$1 },],
        'onBeforeClose': [{ type: Output },],
        'onBeforeShow': [{ type: Output },],
        'onCancel': [{ type: Output },],
        'onClose': [{ type: Output },],
        'onFill': [{ type: Output },],
        'onMarkupReady': [{ type: Output },],
        'onPosition': [{ type: Output },],
        'onShow': [{ type: Output },],
    };
MbscFrameBase.ɵfac = function MbscFrameBase_Factory(t) { return new (t || MbscFrameBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
MbscFrameBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MbscFrameBase, selectors: [["", "mbsc-fr-b", ""]], inputs: { options: "options", dropdown: "dropdown", anchor: "anchor", animate: "animate", buttons: "buttons", closeOnOverlayTap: "closeOnOverlayTap", context: "context", display: "display", showInput: "showInput", focusOnClose: "focusOnClose", focusTrap: "focusTrap", headerText: "headerText", scrollLock: "scrollLock", touchUi: "touchUi" }, outputs: { onBeforeClose: "onBeforeClose", onBeforeShow: "onBeforeShow", onCancel: "onCancel", onClose: "onClose", onFill: "onFill", onMarkupReady: "onMarkupReady", onPosition: "onPosition", onShow: "onShow" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscFrameBase, [{
        type: Directive,
        args: [{ selector: '[mbsc-fr-b]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.NgControl }, { type: MbscInputService }, { type: ɵngcc0.ViewContainerRef }]; }, { options: [{
            type: Input$1
        }], dropdown: [{
            type: Input$1
        }], anchor: [{
            type: Input$1
        }], animate: [{
            type: Input$1
        }], buttons: [{
            type: Input$1
        }], closeOnOverlayTap: [{
            type: Input$1
        }], context: [{
            type: Input$1
        }], display: [{
            type: Input$1
        }], showInput: [{
            type: Input$1
        }], focusOnClose: [{
            type: Input$1
        }], focusTrap: [{
            type: Input$1
        }], headerText: [{
            type: Input$1
        }], scrollLock: [{
            type: Input$1
        }], touchUi: [{
            type: Input$1
        }], onBeforeClose: [{
            type: Output
        }], onBeforeShow: [{
            type: Output
        }], onCancel: [{
            type: Output
        }], onClose: [{
            type: Output
        }], onFill: [{
            type: Output
        }], onMarkupReady: [{
            type: Output
        }], onPosition: [{
            type: Output
        }], onShow: [{
            type: Output
        }] }); })();
    return MbscFrameBase;
}(MbscControlBase));
var MbscScrollerBase = (function (_super) {
    __extends(MbscScrollerBase, _super);
    function MbscScrollerBase(initialElement, zone, control, _inputService, view) {
        var _this = _super.call(this, initialElement, zone, control, _inputService, view) || this;
        _this.onWheelChange = new EventEmitter();
        _this.onSet = new EventEmitter();
        _this.onItemTap = new EventEmitter();
        _this.onClear = new EventEmitter();
        return _this;
    }
    MbscScrollerBase.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
        { type: NgControl, },
        { type: MbscInputService, },
        { type: ViewContainerRef, },
    ]; };
    MbscScrollerBase.propDecorators = {
        'circular': [{ type: Input$1 },],
        'height': [{ type: Input$1 },],
        'layout': [{ type: Input$1 },],
        'maxWidth': [{ type: Input$1 },],
        'minWidth': [{ type: Input$1 },],
        'multiline': [{ type: Input$1 },],
        'readonly': [{ type: Input$1 },],
        'rows': [{ type: Input$1 },],
        'showLabel': [{ type: Input$1 },],
        'showScrollArrows': [{ type: Input$1 },],
        'wheels': [{ type: Input$1 },],
        'width': [{ type: Input$1 },],
        'validate': [{ type: Input$1 },],
        'cancelText': [{ type: Input$1 },],
        'clearText': [{ type: Input$1 },],
        'selectedText': [{ type: Input$1 },],
        'setText': [{ type: Input$1 },],
        'formatValue': [{ type: Input$1 },],
        'parseValue': [{ type: Input$1 },],
        'onWheelChange': [{ type: Output, args: ['onChange',] },],
        'onSet': [{ type: Output },],
        'onItemTap': [{ type: Output },],
        'onClear': [{ type: Output },],
    };
MbscScrollerBase.ɵfac = function MbscScrollerBase_Factory(t) { return new (t || MbscScrollerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
MbscScrollerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MbscScrollerBase, selectors: [["", "mbsc-s-b", ""]], inputs: { circular: "circular", height: "height", layout: "layout", maxWidth: "maxWidth", minWidth: "minWidth", multiline: "multiline", readonly: "readonly", rows: "rows", showLabel: "showLabel", showScrollArrows: "showScrollArrows", wheels: "wheels", width: "width", validate: "validate", cancelText: "cancelText", clearText: "clearText", selectedText: "selectedText", setText: "setText", formatValue: "formatValue", parseValue: "parseValue" }, outputs: { onWheelChange: "onChange", onSet: "onSet", onItemTap: "onItemTap", onClear: "onClear" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscScrollerBase, [{
        type: Directive,
        args: [{ selector: '[mbsc-s-b]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.NgControl }, { type: MbscInputService }, { type: ɵngcc0.ViewContainerRef }]; }, { circular: [{
            type: Input$1
        }], height: [{
            type: Input$1
        }], layout: [{
            type: Input$1
        }], maxWidth: [{
            type: Input$1
        }], minWidth: [{
            type: Input$1
        }], multiline: [{
            type: Input$1
        }], readonly: [{
            type: Input$1
        }], rows: [{
            type: Input$1
        }], showLabel: [{
            type: Input$1
        }], showScrollArrows: [{
            type: Input$1
        }], wheels: [{
            type: Input$1
        }], width: [{
            type: Input$1
        }], validate: [{
            type: Input$1
        }], cancelText: [{
            type: Input$1
        }], clearText: [{
            type: Input$1
        }], selectedText: [{
            type: Input$1
        }], setText: [{
            type: Input$1
        }], formatValue: [{
            type: Input$1
        }], parseValue: [{
            type: Input$1
        }], onWheelChange: [{
            type: Output,
            args: ['onChange']
        }], onSet: [{
            type: Output
        }], onItemTap: [{
            type: Output
        }], onClear: [{
            type: Output
        }] }); })();
    return MbscScrollerBase;
}(MbscFrameBase));
var MbscBaseModule = (function () {
    function MbscBaseModule() {
    }
    MbscBaseModule.ctorParameters = function () { return []; };
MbscBaseModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MbscBaseModule });
MbscBaseModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MbscBaseModule_Factory(t) { return new (t || MbscBaseModule)(); }, imports: [[CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscBaseModule, { declarations: function () { return [MbscBase, MbscValueBase, MbscCloneBase, MbscControlBase]; }, imports: function () { return [CommonModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscBaseModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [MbscBase, MbscValueBase, MbscCloneBase, MbscControlBase]
            }]
    }], function () { return []; }, null); })();
    return MbscBaseModule;
}());
function deepEqualsArray(a1, a2) {
    if (a1 === a2) {
        return true;
    }
    else if (!a1 || !a2 || a1.length !== a2.length) {
        return false;
    }
    else {
        for (var i = 0; i < a1.length; i++) {
            if (a1[i] !== a2[i]) {
                return false;
            }
        }
        return true;
    }
}
function emptyOrTrue(val) {
    return (typeof (val) === 'string' && (val === 'true' || val === '')) || !!val;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var wrapClass = 'mbsc-input-wrap';
var events = ['touchend', 'touchcancel', 'mousedown', 'mousemove', 'mouseup', 'mouseleave'];
var defaults = {
  tap: hasGhostClick
};
var $active;

function addIcon($control, ic) {
  var icons = {},
      control = $control[0],
      $parent = $control.parent(),
      errorMsg = $parent.find('.mbsc-err-msg'),
      align = $control.attr('data-icon-align') || 'left',
      icon = $control.attr('data-icon');

  if ($parent.hasClass(wrapClass)) {
    $parent = $parent.parent();
  } else {
    // Wrap input
    $$1('<span class="' + wrapClass + '"></span>').insertAfter($control).append($control);
  }

  if (errorMsg) {
    $parent.find('.' + wrapClass).append(errorMsg);
  }

  if (icon) {
    if (icon.indexOf('{') !== -1) {
      icons = JSON.parse(icon);
    } else {
      icons[align] = icon;
    }
  }

  if (control.type == 'file') {
    // Set icon
    icons.right = $control.attr('data-icon-upload') || 'upload';
  }

  if (icon || ic) {
    extend$1(icons, ic);
    $parent.addClass((icons.right ? 'mbsc-ic-right ' : '') + (icons.left ? ' mbsc-ic-left' : '')).find('.' + wrapClass).append('<span class="mbsc-input-fill"></span>').append(icons.left ? '<span class="mbsc-input-ic mbsc-left-ic mbsc-ic mbsc-ic-' + icons.left + '"></span>' : '').append(icons.right ? '<span class="mbsc-input-ic mbsc-right-ic mbsc-ic mbsc-ic-' + icons.right + '"></span>' : '');
  }
}

function addIconToggle(that, $parent, $control) {
  var icons = {},
      control = $control[0],
      toggle = $control.attr('data-password-toggle'),
      iconShow = $control.attr('data-icon-show') || 'eye',
      iconHide = $control.attr('data-icon-hide') || 'eye-blocked';

  if (toggle) {
    icons.right = control.type == 'password' ? iconShow : iconHide;
  }

  addIcon($control, icons);

  if (toggle) {
    tap(that, $parent.find('.mbsc-right-ic').addClass('mbsc-input-toggle'), function () {
      if (control.type == "text") {
        control.type = "password";
        $$1(this).addClass('mbsc-ic-' + iconShow).removeClass('mbsc-ic-' + iconHide);
      } else {
        control.type = "text";
        $$1(this).removeClass('mbsc-ic-' + iconShow).addClass('mbsc-ic-' + iconHide);
      }
    });
  }
}

function wrapLabel($parent, type, inputStyle, labelStyle, elm) {
  // Wrap non-empty text nodes in span with mbsc-label class
  if (type == 'segmented') {
    $parent.closest('.mbsc-segmented').addClass(inputStyle == 'box' ? 'mbsc-input-box' : '').addClass(inputStyle == 'outline' ? 'mbsc-input-outline' : '');
  } else if (type != 'button' && type != 'submit') {
    $parent.addClass('mbsc-control-w').addClass(inputStyle == 'box' ? 'mbsc-input-box' : '').addClass(inputStyle == 'outline' ? 'mbsc-input-outline' : '').addClass(labelStyle == 'inline' ? 'mbsc-label-inline' : '').addClass(labelStyle == 'stacked' ? 'mbsc-label-stacked' : '').addClass(labelStyle == 'floating' ? 'mbsc-label-floating' : '').addClass(labelStyle == 'floating' && elm.value ? 'mbsc-label-floating-active' : '').find('label').addClass('mbsc-label').each(function (i, v) {
      $$1(v).attr('title', $$1(v).text());
    });
    $parent.contents().filter(function () {
      return this.nodeType == 3 && this.nodeValue && /\S/.test(this.nodeValue);
    }).each(function () {
      $$1('<span class="mbsc-label" title="' + this.textContent.trim() + '"></span>').insertAfter(this).append(this);
    });
  }
}

function getRipple(theme) {
  var ripple = mobiscroll.themes.form[theme];
  return ripple && ripple.addRipple ? ripple : null;
}

function getAttr($elm, attr, def) {
  var v = $elm.attr(attr);
  return v === undefined || v === '' ? def : v;
}

function getCssClass(s) {
  var theme = getThemeName(s);
  var baseTheme = mobiscroll.themes.form[theme].baseTheme;
  return 'mbsc-' + theme + (baseTheme ? ' mbsc-' + baseTheme : '') + (s.rtl ? ' mbsc-rtl' : ' mbsc-ltr');
}

var FormControl =
/*#__PURE__*/
function () {
  function FormControl(elm, settings) {
    var _this = this;

    var s = extend$1({}, defaults, mobiscroll.settings, settings);
    var $elm = $$1(elm);
    var $p = $elm.parent();
    var $parent = $p.hasClass('mbsc-input-wrap') ? $p.parent() : $p; // Check for inline mobiscroll components

    var $frame = $elm.next().hasClass('mbsc-fr') ? $elm.next() : null;
    var type = getControlType($elm);
    var inputStyle = getAttr($elm, 'data-input-style', s.inputStyle);
    var labelStyle = getAttr($elm, 'data-label-style', s.labelStyle);

    if (elm.mbscInst) {
      elm.mbscInst.destroy();
    }

    if ($frame) {
      $frame.insertAfter($parent);
    }

    s.theme = getThemeName(s);

    if (s.rtl === undefined && s.lang && mobiscroll.i18n[s.lang]) {
      s.rtl = mobiscroll.i18n[s.lang].rtl;
    }

    wrapLabel($parent, type, inputStyle, labelStyle, elm);
    $elm.addClass('mbsc-control'); // Attach events

    this._handle = this._handle.bind(this); // Prevent 300ms click latency

    events.forEach(function (ev) {
      $elm.on(ev, _this._handle);
    }); // Touch events are added separately, needs to be passive listener

    listen(elm, 'touchstart', this._handle, {
      passive: true
    });
    listen(elm, 'touchmove', this._handle, {
      passive: true
    });
    this.settings = s;
    this._type = type;
    this._elm = elm;
    this._$elm = $elm;
    this._$parent = $parent;
    this._$frame = $frame;
    this._ripple = getRipple(s.theme);
    this._isFloating = labelStyle == 'floating' || $parent.hasClass('mbsc-label-floating');
    this.cssClass = getCssClass(s);
    this.getClassElm().addClass(this.cssClass);
    elm.mbscInst = this;
  }

  var _proto = FormControl.prototype;

  _proto.getClassElm = function getClassElm() {
    return this._$parent;
  };

  _proto.destroy = function destroy() {
    var _this2 = this;

    var $elm = this._$elm;
    var elm = this._elm;
    $elm.removeClass('mbsc-control');
    this.getClassElm().removeClass(this.cssClass);
    events.forEach(function (ev) {
      $elm.off(ev, _this2._handle);
    });
    unlisten(elm, 'touchstart', this._handle, {
      passive: true
    });
    unlisten(elm, 'touchmove', this._handle, {
      passive: true
    });
    delete elm.mbscInst;
  };

  _proto.option = function option(s) {
    extend$1(this.settings, s);
    var classElm = this.getClassElm();

    if (this.cssClass) {
      classElm.removeClass(this.cssClass);
    }

    this.cssClass = getCssClass(this.settings);
    classElm.addClass(this.cssClass);
    this._ripple = getRipple(this.settings.theme);
  };

  _proto._handle = function _handle(ev) {
    switch (ev.type) {
      case 'touchstart':
      case 'mousedown':
        this._onStart(ev);

        break;

      case 'touchmove':
      case 'mousemove':
        this._onMove(ev);

        break;

      case 'touchend':
      case 'touchcancel':
      case 'mouseup':
      case 'mouseleave':
        this._onEnd(ev);

        break;
    }
  };

  _proto._addRipple = function _addRipple(ev) {
    if (this._ripple && this._$rippleElm) {
      this._ripple.addRipple(this._$rippleElm, ev);
    }
  };

  _proto._removeRipple = function _removeRipple() {
    if (this._ripple && this._$rippleElm) {
      this._ripple.removeRipple();
    }
  };

  _proto._onStart = function _onStart(ev) {
    var elm = this._elm;

    if (testTouch(ev, elm)) {
      this._startX = getCoord(ev, 'X');
      this._startY = getCoord(ev, 'Y');

      if ($active) {
        $active.removeClass('mbsc-active');
      }

      if (!elm.disabled) {
        this._isActive = true;
        $active = this._$elm;
        $active.addClass('mbsc-active');

        this._addRipple(ev);
      }
    }

    if (ev.type == 'touchstart') {
      this._$elm.closest('.mbsc-no-touch').removeClass('mbsc-no-touch');
    }
  };

  _proto._onMove = function _onMove(ev) {
    // If movement is more than 9px, don't fire the click event handler
    if (this._isActive && Math.abs(getCoord(ev, 'X') - this._startX) > 9 || Math.abs(getCoord(ev, 'Y') - this._startY) > 9) {
      this._$elm.removeClass('mbsc-active');

      this._removeRipple();

      this._isActive = false;
    }
  };

  _proto._onEnd = function _onEnd(ev) {
    var _this3 = this;

    var control = this._elm;
    var type = this._type;

    if (this._isActive && this.settings.tap && ev.type == 'touchend' && !control.readOnly) {
      activateControl(control, type, ev);
    }

    if (this._isActive) {
      setTimeout(function () {
        _this3._$elm.removeClass('mbsc-active');

        _this3._removeRipple();
      }, 100);
    }

    this._isActive = false;
    $active = null;
  };

  return FormControl;
}();
mobiscroll.themes.form.mobiscroll = {};

var events$1 = ['focus', 'change', 'blur', 'animationstart'];
var Input =
/*#__PURE__*/
function (_FormControl) {
  _inheritsLoose(Input, _FormControl);

  function Input(elm, settings) {
    var _this;

    _this = _FormControl.call(this, elm, settings) || this;
    var $elm = _this._$elm;
    var $parent = _this._$parent;
    var $dummy = $parent.find('.mbsc-select-input, .mbsc-color-input');
    addIconToggle(_assertThisInitialized(_this), $parent, $elm);
    _this._checkLabel = _this._checkLabel.bind(_assertThisInitialized(_this));
    _this._mouseDown = _this._mouseDown.bind(_assertThisInitialized(_this));
    _this._setText = _this._setText.bind(_assertThisInitialized(_this));

    if (elm.type == 'file') {
      // Copy attributes and create dummy input
      var $existing = $parent.find('.mbsc-file-input');
      _this._$input = $existing.length ? $existing : $$1('<input type="text" class="' + ($elm.attr('class') || '') + ' mbsc-file-input" placeholder="' + ($elm.attr('placeholder') || '') + '"/>').insertAfter($elm); // Copy value on file upload

      $elm.on('change', _this._setText);
    }

    $parent.addClass('mbsc-input').on('mousedown', _this._mouseDown); // Attach events

    events$1.forEach(function (ev) {
      $elm.on(ev, _this._checkLabel);
    }); // Move the dummy input after the element for correct styling

    if ($dummy.length) {
      $elm.after($dummy);

      if ($dummy.hasClass('mbsc-select-input')) {
        _this._delm = $dummy[0];

        _this.refresh();
      }
    }

    return _this;
  }

  var _proto = Input.prototype;

  _proto._setText = function _setText(ev) {
    var files = ev.target.files;
    var names = [];

    for (var i = 0; i < files.length; ++i) {
      names.push(files[i].name);
    }

    this._$input.val(names);
  };

  _proto._checkLabel = function _checkLabel(ev) {
    if (this._isFloating) {
      // In case of select we need to check the dummy element
      var elm = this._delm || this._elm; // In case of autofill in webkit browsers the animationstart event will fire 
      // due to the empty animation added in the css,
      // because there's no other event in case of the initial autofill

      if (elm.value || document.activeElement === elm || ev && (ev.type == 'focus' || ev.type == 'animationstart' && this._$elm.is('*:-webkit-autofill'))) {
        this._$parent.addClass('mbsc-label-floating-active');
      } else {
        this._$parent.removeClass('mbsc-label-floating-active');
      }
    }
  };

  _proto._mouseDown = function _mouseDown(ev) {
    // Will prevent floating label animation when loosing focus only for a brief moment
    if (document.activeElement === this._elm && ev.target !== this._elm) {
      ev.preventDefault();
    }
  };

  _proto.refresh = function refresh() {
    this._checkLabel();
  };

  _proto.destroy = function destroy() {
    var _this2 = this;

    _FormControl.prototype.destroy.call(this);

    this._$parent.off('mousedown', this._mouseDown).removeClass('mbsc-ic-left mbsc-ic-right').find('.mbsc-input-ic').remove();

    this._$parent.find('.mbsc-input-fill').remove();

    events$1.forEach(function (ev) {
      _this2._$elm.off(ev, _this2._checkLabel);
    });

    this._$elm.off('change', this._setText);
  };

  return Input;
}(FormControl); // Init mbsc-input elements on page load

autoInit('[mbsc-input]', Input);

var MbscFormBase = (function (_super) {
    __extends(MbscFormBase, _super);
    function MbscFormBase(hostElem, _formService, zone) {
        var _this = _super.call(this, hostElem, zone) || this;
        _this._formService = _formService;
        _this.disabled = false;
        return _this;
    }
    MbscFormBase.prototype.ngOnInit = function () {
        this._inheritedOptions = this._formService ? this._formService.options : {};
    };
    MbscFormBase.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, },
        { type: NgZone, },
    ]; };
    MbscFormBase.propDecorators = {
        'color': [{ type: Input$1 },],
        'options': [{ type: Input$1 },],
        'disabled': [{ type: Input$1 },],
        'name': [{ type: Input$1 },],
        '_initElem': [{ type: ViewChild, args: ['initElement', { static: false },] },],
    };
MbscFormBase.ɵfac = function MbscFormBase_Factory(t) { return new (t || MbscFormBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscFormBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MbscFormBase, selectors: [["", "mbsc-f-b", ""]], viewQuery: function MbscFormBase_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._initElem = _t.first);
    } }, inputs: { color: "color", options: "options", disabled: "disabled", name: "name" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscFormBase, [{
        type: Directive,
        args: [{ selector: '[mbsc-f-b]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService }, { type: ɵngcc0.NgZone }]; }, { color: [{
            type: Input$1
        }], options: [{
            type: Input$1
        }], disabled: [{
            type: Input$1
        }], name: [{
            type: Input$1
        }], _initElem: [{
            type: ViewChild,
            args: ['initElement', { static: false }]
        }] }); })();
    return MbscFormBase;
}(MbscBase));
var MbscFormValueBase = (function (_super) {
    __extends(MbscFormValueBase, _super);
    function MbscFormValueBase(hostElem, _formService, _inputService, _control, zone) {
        var _this = _super.call(this, hostElem, _formService, zone) || this;
        _this._control = _control;
        _this.onChange = function () { };
        _this.onTouch = function () { };
        _this.errorMessage = '';
        _this.valueChangeEmitter = new EventEmitter();
        if (_control && (!_inputService || !_inputService.isControlSet)) {
            if (_control.valueAccessor && _control.valueAccessor.oldAccessor !== undefined) {
                _control.valueAccessor.oldAccessor = _this;
            }
            else {
                _control.valueAccessor = _this;
            }
        }
        return _this;
    }
    Object.defineProperty(MbscFormValueBase.prototype, "readonly", {
        set: function (val) {
            this._readonly = emptyOrTrue(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscFormValueBase.prototype, "innerValue", {
        get: function () {
            return this._value;
        },
        set: function (v) {
            this._value = v;
            this.onChange(v);
            this.valueChangeEmitter.emit(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscFormValueBase.prototype, "value", {
        set: function (v) {
            this._value = v;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    MbscFormValueBase.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    MbscFormValueBase.prototype.registerOnTouched = function (fn) {
        this.onTouch = fn;
    };
    MbscFormValueBase.prototype.setDisabledState = function (isDisabled) {
        this.disabled = isDisabled;
    };
    MbscFormValueBase.prototype.writeValue = function (v) {
        this._value = v;
        this.refresh();
    };
    MbscFormValueBase.prototype.refresh = function () {
        var _this = this;
        if (this.instance && this.instance.refresh) {
            setTimeout(function () {
                _this.instance.refresh();
            });
        }
        else {
            this._needRefresh = true;
        }
    };
    MbscFormValueBase.prototype.ngAfterViewInit = function () {
        _super.prototype.ngAfterViewInit.call(this);
        if (this._needRefresh) {
            this.refresh();
        }
    };
    MbscFormValueBase.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: MbscInputService, decorators: [{ type: Optional },] },
        { type: NgControl, },
        { type: NgZone, },
    ]; };
    MbscFormValueBase.propDecorators = {
        'readonly': [{ type: Input$1 },],
        'value': [{ type: Input$1 },],
        'error': [{ type: Input$1 },],
        'errorMessage': [{ type: Input$1 },],
        'valueChangeEmitter': [{ type: Output, args: ['valueChange',] },],
    };
MbscFormValueBase.ɵfac = function MbscFormValueBase_Factory(t) { return new (t || MbscFormValueBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscFormValueBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MbscFormValueBase, selectors: [["", "mbsc-fv-b", ""]], inputs: { readonly: "readonly", value: "value", error: "error", errorMessage: "errorMessage" }, outputs: { valueChangeEmitter: "valueChange" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscFormValueBase, [{
        type: Directive,
        args: [{ selector: '[mbsc-fv-b]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: MbscInputService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.NgControl }, { type: ɵngcc0.NgZone }]; }, { readonly: [{
            type: Input$1
        }], value: [{
            type: Input$1
        }], error: [{
            type: Input$1
        }], errorMessage: [{
            type: Input$1
        }], valueChangeEmitter: [{
            type: Output,
            args: ['valueChange']
        }] }); })();
    return MbscFormValueBase;
}(MbscFormBase));
var MbscInputBase = (function (_super) {
    __extends(MbscInputBase, _super);
    function MbscInputBase(initialElem, _formService, _inputService, _control, zone) {
        var _this = _super.call(this, initialElem, _formService, _inputService, _control, zone) || this;
        _this.type = 'text';
        _this.placeholder = '';
        return _this;
    }
    MbscInputBase.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: MbscInputService, decorators: [{ type: Optional },] },
        { type: NgControl, },
        { type: NgZone, },
    ]; };
    MbscInputBase.propDecorators = {
        'autocomplete': [{ type: Input$1 },],
        'autocapitalize': [{ type: Input$1 },],
        'autocorrect': [{ type: Input$1 },],
        'spellcheck': [{ type: Input$1 },],
        'autofocus': [{ type: Input$1 },],
        'minlength': [{ type: Input$1 },],
        'maxlength': [{ type: Input$1 },],
        'required': [{ type: Input$1 },],
        'icon': [{ type: Input$1 },],
        'iconAlign': [{ type: Input$1, args: ['icon-align',] },],
        'type': [{ type: Input$1 },],
        'passwordToggle': [{ type: Input$1, args: ['password-toggle',] },],
        'iconShow': [{ type: Input$1, args: ['icon-show',] },],
        'iconHide': [{ type: Input$1, args: ['icon-hide',] },],
        'iconUpload': [{ type: Input$1, args: ['icon-upload',] },],
        'inputStyle': [{ type: Input$1, args: ['input-style',] },],
        'labelStyle': [{ type: Input$1, args: ['label-style',] },],
        'placeholder': [{ type: Input$1 },],
    };
MbscInputBase.ɵfac = function MbscInputBase_Factory(t) { return new (t || MbscInputBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscInputBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MbscInputBase, selectors: [["", "mbsc-i-b", ""]], inputs: { autocomplete: "autocomplete", autocapitalize: "autocapitalize", autocorrect: "autocorrect", spellcheck: "spellcheck", autofocus: "autofocus", minlength: "minlength", maxlength: "maxlength", required: "required", icon: "icon", iconAlign: ["icon-align", "iconAlign"], type: "type", passwordToggle: ["password-toggle", "passwordToggle"], iconShow: ["icon-show", "iconShow"], iconHide: ["icon-hide", "iconHide"], iconUpload: ["icon-upload", "iconUpload"], inputStyle: ["input-style", "inputStyle"], labelStyle: ["label-style", "labelStyle"], placeholder: "placeholder" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscInputBase, [{
        type: Directive,
        args: [{ selector: '[mbsc-i-b]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: MbscInputService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.NgControl }, { type: ɵngcc0.NgZone }]; }, { autocomplete: [{
            type: Input$1
        }], autocapitalize: [{
            type: Input$1
        }], autocorrect: [{
            type: Input$1
        }], spellcheck: [{
            type: Input$1
        }], autofocus: [{
            type: Input$1
        }], minlength: [{
            type: Input$1
        }], maxlength: [{
            type: Input$1
        }], required: [{
            type: Input$1
        }], icon: [{
            type: Input$1
        }], iconAlign: [{
            type: Input$1,
            args: ['icon-align']
        }], type: [{
            type: Input$1
        }], passwordToggle: [{
            type: Input$1,
            args: ['password-toggle']
        }], iconShow: [{
            type: Input$1,
            args: ['icon-show']
        }], iconHide: [{
            type: Input$1,
            args: ['icon-hide']
        }], iconUpload: [{
            type: Input$1,
            args: ['icon-upload']
        }], inputStyle: [{
            type: Input$1,
            args: ['input-style']
        }], labelStyle: [{
            type: Input$1,
            args: ['label-style']
        }], placeholder: [{
            type: Input$1
        }] }); })();
    return MbscInputBase;
}(MbscFormValueBase));
var MbscInput = (function (_super) {
    __extends(MbscInput, _super);
    function MbscInput(initialElem, _formService, _inputService, _control, zone) {
        var _this = _super.call(this, initialElem, _formService, _inputService, _control, zone) || this;
        _this._inputService = _inputService;
        _this.controlNg = true;
        _this.dropdown = false;
        _inputService.input = _this;
        return _this;
    }
    MbscInput.prototype.initControl = function () {
        var _this = this;
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new Input(this._initElem.nativeElement, options);
        setTimeout(function () {
            _this.instance.refresh();
        });
    };
    MbscInput.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: MbscInputService, },
        { type: NgControl, decorators: [{ type: Optional },] },
        { type: NgZone, },
    ]; };
    MbscInput.propDecorators = {
        'min': [{ type: Input$1 },],
        'max': [{ type: Input$1 },],
        'step': [{ type: Input$1 },],
        'pattern': [{ type: Input$1 },],
        'accept': [{ type: Input$1 },],
        'multiple': [{ type: Input$1 },],
        'controlNg': [{ type: Input$1 },],
        'dropdown': [{ type: Input$1 },],
    };
MbscInput.ɵfac = function MbscInput_Factory(t) { return new (t || MbscInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscInput.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscInput, selectors: [["mbsc-input"]], hostVars: 4, hostBindings: function MbscInput_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("mbsc-control-ng", ctx.controlNg)("mbsc-err", ctx.error);
    } }, inputs: { min: "min", max: "max", step: "step", pattern: "pattern", accept: "accept", multiple: "multiple", controlNg: "controlNg", dropdown: "dropdown" }, features: [ɵngcc0.ɵɵProvidersFeature([MbscInputService]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 7, vars: 42, consts: [[1, "mbsc-input-wrap"], [3, "type", "placeholder", "ngModel", "disabled", "readonly", "ngModelChange", "blur"], ["initElement", ""], ["class", "mbsc-select-ic mbsc-ic mbsc-ic-arrow-down5", 4, "ngIf"], ["class", "mbsc-err-msg", 4, "ngIf"], [1, "mbsc-select-ic", "mbsc-ic", "mbsc-ic-arrow-down5"], [1, "mbsc-err-msg"]], template: function MbscInput_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label");
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementStart(2, "span", 0);
        ɵngcc0.ɵɵelementStart(3, "input", 1, 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function MbscInput_Template_input_ngModelChange_3_listener($event) { return ctx.innerValue = $event; })("blur", function MbscInput_Template_input_blur_3_listener($event) { return ctx.onTouch($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, MbscInput_span_5_Template, 1, 0, "span", 3);
        ɵngcc0.ɵɵtemplate(6, MbscInput_span_6_Template, 2, 1, "span", 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("mbsc-err", ctx.error)("mbsc-select", ctx.dropdown)("mbsc-input-box", ctx.inputStyle == "box")("mbsc-input-outline", ctx.inputStyle == "outline")("mbsc-label-stacked", ctx.labelStyle == "stacked")("mbsc-label-inline", ctx.labelStyle == "inline")("mbsc-label-floating", ctx.labelStyle == "floating");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("type", ctx.type)("placeholder", ctx.placeholder)("ngModel", ctx.innerValue)("disabled", ctx.disabled)("readonly", ctx._readonly);
        ɵngcc0.ɵɵattribute("name", ctx.name)("data-icon", ctx.icon ? ctx.icon : null)("data-icon-align", ctx.iconAlign ? ctx.iconAlign : null)("data-password-toggle", ctx.passwordToggle ? "true" : null)("data-icon-show", ctx.iconShow ? ctx.iconShow : null)("data-icon-hide", ctx.iconHide ? ctx.iconHide : null)("data-icon-upload", ctx.iconUpload ? ctx.iconUpload : null)("min", ctx.min)("max", ctx.max)("minlength", ctx.minlength)("maxlength", ctx.maxlength)("autocomplete", ctx.autocomplete)("autocapitalize", ctx.autocapitalize)("autocorrect", ctx.autocorrect)("spellcheck", ctx.spellcheck)("autofocus", ctx.autofocus)("step", ctx.step)("pattern", ctx.pattern)("required", ctx.required)("accept", ctx.accept)("multiple", ctx.multiple);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.dropdown);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.error && ctx.errorMessage);
    } }, directives: [ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc1.MinLengthValidator, ɵngcc1.MaxLengthValidator, ɵngcc1.PatternValidator, ɵngcc1.RequiredValidator, ɵngcc2.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscInput, [{
        type: Component,
        args: [{
                selector: 'mbsc-input',
                host: {
                    '[class.mbsc-control-ng]': 'controlNg',
                    '[class.mbsc-err]': 'error'
                },
                template: "\n        <label\n            [class.mbsc-err]=\"error\" [class.mbsc-select]=\"dropdown\"\n            [class.mbsc-input-box]=\"inputStyle == 'box'\"\n            [class.mbsc-input-outline]=\"inputStyle == 'outline'\"\n            [class.mbsc-label-stacked]=\"labelStyle == 'stacked'\"\n            [class.mbsc-label-inline]=\"labelStyle == 'inline'\"\n            [class.mbsc-label-floating]=\"labelStyle == 'floating'\"\n        >\n            <ng-content></ng-content>\n            <span class=\"mbsc-input-wrap\">\n                <input #initElement [type]=\"type\" [placeholder]=\"placeholder\" [(ngModel)]=\"innerValue\" (blur)=\"onTouch($event)\"\n                    [attr.name]=\"name\"\n                    [attr.data-icon]=\"icon ? icon : null\"\n                    [attr.data-icon-align]=\"iconAlign ? iconAlign : null\"\n                    [attr.data-password-toggle]=\"passwordToggle ? 'true': null\"\n                    [attr.data-icon-show]=\"iconShow ? iconShow : null\"\n                    [attr.data-icon-hide]=\"iconHide ? iconHide : null\"\n                    [attr.data-icon-upload]=\"iconUpload ? iconUpload : null\"\n                    [attr.min]=\"min\"\n                    [attr.max]=\"max\"\n                    [attr.minlength]=\"minlength\"\n                    [attr.maxlength]=\"maxlength\"\n                    [attr.autocomplete]=\"autocomplete\"\n                    [attr.autocapitalize]=\"autocapitalize\"\n                    [attr.autocorrect]=\"autocorrect\"\n                    [attr.spellcheck]=\"spellcheck\"\n                    [attr.autofocus]=\"autofocus\"\n                    [attr.step]=\"step\"\n                    [attr.pattern]=\"pattern\"\n                    [attr.required]=\"required\"\n                    [attr.accept]=\"accept\"\n                    [attr.multiple]=\"multiple\"\n                    [disabled]=\"disabled\"\n                    [readonly]=\"_readonly\" />\n                <span *ngIf=\"dropdown\" class=\"mbsc-select-ic mbsc-ic mbsc-ic-arrow-down5\"></span>\n                <span *ngIf=\"error && errorMessage\" class=\"mbsc-err-msg\">{{errorMessage}}</span>\n            </span>\n        </label>\n    ",
                providers: [MbscInputService]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: MbscInputService }, { type: ɵngcc1.NgControl, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.NgZone }]; }, { min: [{
            type: Input$1
        }], max: [{
            type: Input$1
        }], step: [{
            type: Input$1
        }], pattern: [{
            type: Input$1
        }], accept: [{
            type: Input$1
        }], multiple: [{
            type: Input$1
        }], controlNg: [{
            type: Input$1
        }], dropdown: [{
            type: Input$1
        }] }); })();
    return MbscInput;
}(MbscInputBase));
var MbscInputModule = (function () {
    function MbscInputModule() {
    }
    MbscInputModule.ctorParameters = function () { return []; };
MbscInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MbscInputModule });
MbscInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MbscInputModule_Factory(t) { return new (t || MbscInputModule)(); }, imports: [[FormsModule, CommonModule, MbscBaseModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscInputModule, { declarations: function () { return [MbscInput, MbscInputBase, MbscFormBase, MbscFormValueBase]; }, imports: function () { return [FormsModule, CommonModule, MbscBaseModule]; }, exports: function () { return [MbscInput]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscInputModule, [{
        type: NgModule,
        args: [{
                imports: [FormsModule, CommonModule, MbscBaseModule],
                declarations: [MbscInput, MbscInputBase, MbscFormBase, MbscFormValueBase],
                exports: [MbscInput]
            }]
    }], function () { return []; }, null); })();
    return MbscInputModule;
}());

var Button =
/*#__PURE__*/
function (_FormControl) {
  _inheritsLoose(Button, _FormControl);

  function Button(elm, settings) {
    var _this;

    _this = _FormControl.call(this, elm, settings) || this;
    var $elm = _this._$elm;
    var hasIcon = $elm.attr('data-icon');
    $elm.addClass('mbsc-btn mbsc-no-touch').find('.mbsc-btn-ic').remove();

    if (hasIcon) {
      $elm.prepend('<span class="mbsc-btn-ic mbsc-ic mbsc-ic-' + hasIcon + '"></span>');

      if ($elm.text() === "") {
        $elm.addClass('mbsc-btn-icon-only');
      }
    }

    _this._$rippleElm = $elm;
    return _this;
  }

  var _proto = Button.prototype;

  _proto.getClassElm = function getClassElm() {
    return this._$elm;
  };

  return Button;
}(FormControl); // Init mbsc-button elements on page load

autoInit('[mbsc-button]', Button);

var CheckBox =
/*#__PURE__*/
function (_FormControl) {
  _inheritsLoose(CheckBox, _FormControl);

  function CheckBox(elm, settings) {
    var _this;

    _this = _FormControl.call(this, elm, settings) || this;

    _this._$parent.prepend(_this._$elm).addClass('mbsc-checkbox mbsc-control-w').find('.mbsc-checkbox-box').remove();

    _this._$elm.after('<span class="mbsc-checkbox-box"></span>');

    return _this;
  }

  return CheckBox;
}(FormControl); // Init mbsc-checkbox elements on page load

autoInit('[mbsc-checkbox]', CheckBox);

var Radio =
/*#__PURE__*/
function (_FormControl) {
  _inheritsLoose(Radio, _FormControl);

  function Radio(elm, settings) {
    var _this;

    _this = _FormControl.call(this, elm, settings) || this;

    _this._$parent.addClass('mbsc-radio mbsc-control-w').find('.mbsc-radio-box').remove();

    _this._$elm.after('<span class="mbsc-radio-box"><span></span></span>');

    return _this;
  }

  return Radio;
}(FormControl); // Init mbsc-radio elements on page load

autoInit('[mbsc-radio]', Radio);

var Select =
/*#__PURE__*/
function (_Input) {
  _inheritsLoose(Select, _Input);

  function Select(elm, settings) {
    var _this;

    _this = _Input.call(this, elm, settings) || this;
    var $elm = _this._$elm;
    var $parent = _this._$parent;
    var $existing = $parent.find('.mbsc-select-input');
    var $input = $existing.length ? $existing : $$1('<input tabindex="-1" class="mbsc-select-input mbsc-control" readonly>');
    _this._$input = $input;
    _this._delm = $input[0];
    _this._setText = _this._setText.bind(_assertThisInitialized(_this));
    $parent.addClass('mbsc-select' + (_this._$frame ? ' mbsc-select-inline' : ''));
    $elm.after($input);
    $input.after('<span class="mbsc-select-ic mbsc-ic mbsc-ic-arrow-down5"></span>'); // Update dummy input text on change

    $elm.on('change', _this._setText);

    _this._setText();

    return _this;
  }

  var _proto = Select.prototype;

  _proto.destroy = function destroy() {
    _Input.prototype.destroy.call(this);

    this._$parent.find('.mbsc-select-ic').remove();

    this._$elm.off('change', this._setText);
  };

  _proto._setText = function _setText() {
    var elm = this._elm;
    var $elm = $$1(elm); // Check if select and mobiscroll select was not initialized

    if ($elm.is('select') && !$elm.hasClass('mbsc-comp')) {
      this._$input.val(elm.selectedIndex != -1 ? elm.options[elm.selectedIndex].text : '');
    } // Check floating label


    this.refresh();
  };

  return Select;
}(Input); // Init mbsc-select elements on page load

autoInit('[mbsc-dropdown]', Select);

var events$2 = ['change', 'keydown', 'input', 'scroll'];
var sizeDebounce;

function sizeTextAreas() {
  clearTimeout(sizeDebounce);
  sizeDebounce = setTimeout(function () {
    $$1('textarea.mbsc-control').each(function () {
      sizeTextArea(this);
    });
  }, 100);
}

function sizeTextArea(control) {
  var height,
      lineNr,
      line,
      rowNr = $$1(control).attr('rows') || 6;

  if (control.offsetHeight) {
    control.style.height = '';
    line = control.scrollHeight - control.offsetHeight;
    height = control.offsetHeight + (line > 0 ? line : 0);
    lineNr = Math.round(height / 24);

    if (lineNr > rowNr) {
      //control.scrollTop = height;
      height = 24 * rowNr + (height - lineNr * 24);
      $$1(control).addClass('mbsc-textarea-scroll');
    } else {
      $$1(control).removeClass('mbsc-textarea-scroll');
    }

    if (height) {
      control.style.height = height + 'px';
    }
  }
}

function scrollTextArea(elm) {
  var $elm = $$1(elm);

  if (!$elm.hasClass('mbsc-textarea-scroll')) {
    var line = elm.scrollHeight - elm.offsetHeight,
        height = elm.offsetHeight + line,
        lineNr = Math.round(height / 24),
        rowNr = $elm.attr('rows') || 6;

    if (lineNr <= rowNr) {
      elm.scrollTop = 0;
      elm.style.height = height + 'px';
    }
  }
}

if (isBrowser) {
  // Set height of textareas on viewport size changes
  $$1(window).on('resize orientationchange', sizeTextAreas);
}

var TextArea =
/*#__PURE__*/
function (_Input) {
  _inheritsLoose(TextArea, _Input);

  function TextArea(elm, settings) {
    var _this;

    _this = _Input.call(this, elm, settings) || this;

    _this._$parent.addClass('mbsc-textarea');

    events$2.forEach(function (ev) {
      _this._$elm.on(ev, _this._handle);
    });
    sizeTextArea(elm);
    return _this;
  }

  var _proto = TextArea.prototype;

  _proto.destroy = function destroy() {
    var _this2 = this;

    _Input.prototype.destroy.call(this);

    events$2.forEach(function (ev) {
      _this2._$elm.off(ev, _this2._handle);
    });
  };

  _proto.refresh = function refresh() {
    _Input.prototype.refresh.call(this);

    clearTimeout(this._debounce);
    sizeTextArea(this._elm);
  };

  _proto._handle = function _handle(ev) {
    _Input.prototype._handle.call(this, ev);

    switch (ev.type) {
      case 'change':
        sizeTextArea(this._elm);
        break;

      case 'keydown':
      case 'input':
        this._onInput(ev);

        break;

      case 'scroll':
        scrollTextArea(this._elm);
    }
  };

  _proto._onInput = function _onInput() {
    var _this3 = this;

    clearTimeout(this._debounce);
    this._debounce = setTimeout(function () {
      sizeTextArea(_this3._elm);
    }, 100);
  };

  return TextArea;
}(Input);

autoInit('[mbsc-textarea]', TextArea);

var SegmentedItem =
/*#__PURE__*/
function (_FormControl) {
  _inheritsLoose(SegmentedItem, _FormControl);

  function SegmentedItem(elm, settings) {
    var _this;

    _this = _FormControl.call(this, elm, settings) || this;
    var $segmentCont;
    var $segment;
    var $elm = _this._$elm;
    var $parent = _this._$parent;

    if (!$parent.hasClass('mbsc-segmented-item-ready')) {
      $segmentCont = $$1('<div class="mbsc-segmented mbsc-segmented-group mbsc-no-touch"></div>');
      $parent.after($segmentCont);
      $parent.parent().find('input[name="' + $elm.attr('name') + '"]').each(function () {
        var $input = $$1(this);
        $segment = $input.parent().addClass('mbsc-segmented-item mbsc-segmented-item-ready');
        $$1('<span class="mbsc-segmented-content">' + ($input.attr('data-icon') ? '<span class="mbsc-ic mbsc-ic-' + $input.attr('data-icon') + '"></span>' : '') + '</span>').append($segment.contents()).appendTo($segment);
        $segment.prepend($input);
        $segmentCont.append($segment);
      });
    }

    _this._$rippleElm = $elm.next();
    return _this;
  }

  var _proto = SegmentedItem.prototype;

  _proto.getClassElm = function getClassElm() {
    return this._$elm.closest('.mbsc-segmented');
  };

  return SegmentedItem;
}(FormControl); // Init mbsc-segmented elements on page load

autoInit('[mbsc-segmented]', SegmentedItem);

function createStepper($elm, action, delay, isReadOnly, stopProp, ripple) {
  var $btn,
      changed,
      index,
      running,
      source,
      startX,
      startY,
      step,
      timer,
      check = isReadOnly || noop;

  function onBtnStart(ev) {
    var proceed;
    $btn = $$1(ev.currentTarget);
    step = +$btn.attr('data-step');
    index = +$btn.attr('data-index');
    changed = true;

    if (stopProp) {
      ev.stopPropagation();
    }

    if (ev.type == 'touchstart') {
      $btn.closest('.mbsc-no-touch').removeClass('mbsc-no-touch');
    }

    if (ev.type == 'mousedown') {
      // Prevent focus
      ev.preventDefault();
    }

    if (ev.type != 'keydown') {
      //e.preventDefault();
      startX = getCoord(ev, 'X');
      startY = getCoord(ev, 'Y');
      proceed = testTouch(ev, this);
    } else {
      proceed = ev.keyCode === 32;
    }

    if (!running && proceed && !$btn.hasClass('mbsc-disabled')) {
      if (start(index, step, ev)) {
        $btn.addClass('mbsc-active');

        if (ripple) {
          ripple.addRipple($btn.find('.mbsc-segmented-content'), ev);
        }
      }

      if (ev.type == 'mousedown') {
        $$1(document).on('mousemove', onBtnMove).on('mouseup', onBtnEnd);
      }
    }
  }

  function onBtnMove(ev) {
    if (Math.abs(startX - getCoord(ev, 'X')) > 7 || Math.abs(startY - getCoord(ev, 'Y')) > 7) {
      changed = true;
      stop();
    }
  }

  function onBtnEnd(ev) {
    if (ev.type == 'touchend') {
      // Prevents iOS scroll on double tap
      ev.preventDefault();
    }

    stop();

    if (ev.type == 'mouseup') {
      $$1(document).off('mousemove', onBtnMove).off('mouseup', onBtnEnd);
    }
  }

  function stop() {
    running = false;
    clearInterval(timer);

    if ($btn) {
      $btn.removeClass('mbsc-active');

      if (ripple) {
        setTimeout(function () {
          ripple.removeRipple();
        }, 100);
      }
    }
  }

  function start(i, st, ev) {
    if (!running && !check(i)) {
      index = i;
      step = st;
      source = ev;
      running = true;
      changed = false;
      setTimeout(tick, 100);
    }

    return running;
  }

  function tick() {
    if ($btn && $btn.hasClass('mbsc-disabled')) {
      stop();
      return;
    }

    if (running || !changed) {
      changed = true;
      action(index, step, source, tick);
    }

    if (running && delay) {
      clearInterval(timer);
      timer = setInterval(function () {
        action(index, step, source);
      }, delay);
    }
  }

  function destroy() {
    $elm.each(function (i, el) {
      unlisten(el, 'touchstart', onBtnStart, {
        passive: true
      });
      unlisten(el, 'mousedown', onBtnStart);
      unlisten(el, 'keydown', onBtnStart);
      unlisten(el, 'touchmove', onBtnMove, {
        passive: true
      });
      unlisten(el, 'touchend', onBtnEnd);
      unlisten(el, 'touchcancel', onBtnEnd);
      unlisten(el, 'keyup', onBtnEnd);
    });
  }

  $elm.each(function (i, el) {
    listen(el, 'touchstart', onBtnStart, {
      passive: true
    });
    listen(el, 'mousedown', onBtnStart);
    listen(el, 'keydown', onBtnStart);
    listen(el, 'touchmove', onBtnMove, {
      passive: true
    });
    listen(el, 'touchend', onBtnEnd);
    listen(el, 'touchcancel', onBtnEnd);
    listen(el, 'keyup', onBtnEnd);
  });
  return {
    start: start,
    stop: stop,
    destroy: destroy
  };
}

var Stepper = function Stepper(control, settings) {
  var $btnPlus,
      $btnMinus,
      $controls,
      cssClass = '',
      displayValue,
      max,
      min,
      inputStyle,
      ripple,
      scale,
      step,
      stepper,
      s,
      theme,
      val,
      that = this,
      $control = $$1(control),
      ready,
      $parent,
      old = val;

  function onChange() {
    var v;

    if (!control.disabled) {
      v = parseFloat($$1(this).val());
      setValue(isNaN(v) ? val : v);
    }
  }

  function checkDisabled() {
    return control.disabled;
  }

  function stepValue(index, dir) {
    setValue(val + dir * step);
  }

  function setValue(v, fill, change) {
    old = val;

    if (fill === undefined) {
      fill = true;
    }

    if (change === undefined) {
      change = fill;
    }

    val = round(v);
    $controls.removeClass('mbsc-disabled');

    if (fill) {
      $control.val(val);
    }

    if (val == min) {
      $btnMinus.addClass('mbsc-disabled');
    }

    if (val == max) {
      $btnPlus.addClass('mbsc-disabled');
    }

    if (val !== old && change) {
      $control.trigger('change');
    }
  }

  function getAttr(attr, def, str) {
    var v = $control.attr(attr);
    return v === undefined || v === '' ? def : str ? v : +v;
  }

  function round(v) {
    return +Math.min(max, Math.max(Math.round(v / step) * step, min)).toFixed(scale);
  } // Call the parent constructor


  Base.call(this, control, settings, true);
  /* TRIALFUNC */

  that.getVal = function () {
    var v = parseFloat($control.val());
    v = isNaN(v) ? val : v;
    return round(v);
  };

  that.setVal = function (v, fill, change) {
    v = parseFloat(v);
    setValue(isNaN(v) ? val : v, fill, change);
  };

  that._init = function () {
    ready = $control.parent().hasClass('mbsc-stepper');
    $parent = ready ? $control.closest('.mbsc-stepper-cont') : $control.parent();
    s = that.settings;
    min = settings.min === undefined ? getAttr('min', s.min) : settings.min;
    max = settings.max === undefined ? getAttr('max', s.max) : settings.max;
    step = settings.step === undefined ? getAttr('step', s.step) : settings.step;
    scale = Math.abs(step) < 1 ? (step + '').split('.')[1].length : 0;
    inputStyle = settings.inputStyle === undefined ? getAttr('data-input-style', s.inputStyle, true) : settings.inputStyle;
    displayValue = $control.attr('data-val') || s.val;
    val = round(+control.value || 0);
    theme = mobiscroll.themes.form[s.theme];
    ripple = theme && theme.addRipple ? theme : null;

    if (!ready) {
      $parent.addClass('mbsc-stepper-cont mbsc-no-touch mbsc-control-w').addClass(inputStyle == 'box' ? 'mbsc-input-box' : '').addClass(inputStyle == 'outline' ? 'mbsc-input-outline' : '').append('<span class="mbsc-segmented mbsc-stepper' + '"></span>').find('.mbsc-stepper').append('<span class="mbsc-segmented-item mbsc-stepper-control mbsc-stepper-minus ' + (val == min ? 'mbsc-disabled' : '') + '" data-step="-1" tabindex="0"><span class="mbsc-segmented-content"><span class="mbsc-ic mbsc-ic-minus"></span></span></span>').append('<span class="mbsc-segmented-item mbsc-stepper-control mbsc-stepper-plus ' + (val == max ? 'mbsc-disabled' : '') + '"  data-step="1" tabindex="0"><span class="mbsc-segmented-content"> <span class="mbsc-ic mbsc-ic-plus"></span></span></span>').prepend($control);
    }

    if (cssClass) {
      $parent.removeClass(cssClass).find('.mbsc-segmented').removeClass(cssClass);
    }

    cssClass = 'mbsc-' + s.theme + (theme.baseTheme ? ' mbsc-' + theme.baseTheme : '') + (s.rtl ? ' mbsc-rtl' : ' mbsc-ltr');
    $parent.addClass(cssClass).find('.mbsc-segmented').addClass(cssClass);
    $btnMinus = $$1('.mbsc-stepper-minus', $parent);
    $btnPlus = $$1('.mbsc-stepper-plus', $parent);
    $controls = $$1('.mbsc-stepper-control', $parent);

    if (!ready) {
      if (displayValue == 'left') {
        $parent.addClass('mbsc-stepper-val-left');
        $control.after('<span class="mbsc-segmented-item"><span class="mbsc-segmented-content"></span></span>');
      } else if (displayValue == 'right') {
        $parent.addClass('mbsc-stepper-val-right');
        $btnPlus.after('<span class="mbsc-segmented-item"><span class="mbsc-segmented-content"></span></span>');
      } else {
        $btnMinus.after('<span class="mbsc-segmented-item"><span class="mbsc-segmented-content mbsc-stepper-val"></span></span>');
      }
    }

    if (!stepper) {
      $control.on('change', onChange);
      stepper = createStepper($controls, stepValue, 150, checkDisabled, false, ripple);
    }

    $control.val(val).attr('data-role', 'stepper').attr('min', min).attr('max', max).attr('step', step).addClass('mbsc-control');
    control.mbscInst = that;
  };

  that._destroy = function () {
    $control.removeClass('mbsc-control').off('change', onChange);
    stepper.destroy();
    delete control.mbscInst;
  };

  that.init();
};
Stepper.prototype = {
  _class: 'stepper',
  _hasDef: true,
  _hasTheme: true,
  _hasLang: true,
  _defaults: {
    min: 0,
    max: 100,
    step: 1
  }
};
classes.Stepper = Stepper; // Init mbsc-stepper elements on page load

autoInit('[mbsc-stepper]', Stepper);

var ProgressBase = function ProgressBase(elm, settings, inherit) {
  var $elm,
      $parent,
      cssClass,
      s,
      that = this; // Call the parent constructor

  Base.call(this, elm, settings, true);
  that.__init = noop;
  that.__destroy = noop;

  that._init = function () {
    var wasInit;
    s = that.settings;
    $elm = $$1(elm); // Check if the element was already initialized

    wasInit = !!$parent;
    $parent = $elm.parent();
    $parent = $parent.hasClass('mbsc-input-wrap') ? $parent.parent() : $parent;
    that._$parent = $parent;

    if (cssClass) {
      $parent.removeClass(cssClass);
    }

    cssClass = that._css + ' mbsc-progress-w mbsc-control-w ' + getCssClass(s);
    $parent.addClass(cssClass);
    $elm.addClass('mbsc-control');

    that.__init();

    if (!wasInit) {
      that._attachChange();
    } // Show initial value


    that.refresh();
    elm.mbscInst = that;
  };

  that._destroy = function () {
    that.__destroy();

    $parent.removeClass(cssClass);
    $elm.removeClass('mbsc-control');
    delete elm.mbscInst;
  };

  if (!inherit) {
    that.init();
  }
};

var SliderBase = function SliderBase(elm, settings, inherit) {
  var $elm,
      $handle,
      $handleCont,
      $handles,
      $listeners,
      $parent,
      $track,
      action,
      base,
      changed,
      diffX,
      diffY,
      diff,
      endX,
      endY,
      handleIndex,
      isHover,
      isPressed,
      isRtl,
      live,
      max,
      min,
      moved,
      multiple,
      oldValue,
      step,
      s,
      scale,
      startX,
      startY,
      stepDecimal,
      timer,
      totalWidth,
      value,
      that = this,
      lastUpdate = new Date();

  function onStart(ev) {
    if (ev.type === 'mousedown') {
      ev.preventDefault();
    }

    if (testTouch(ev, this) && (!action || isHover) && !elm.disabled && !elm.readOnly
    /* TRIALCOND */
    ) {
        if (s.stopProp) {
          ev.stopPropagation();
        }

        action = true;
        moved = false;
        changed = false;
        startX = getCoord(ev, 'X');
        startY = getCoord(ev, 'Y');
        endX = startX;
        $track.removeClass('mbsc-progress-anim');
        $handle = multiple ? $$1('.mbsc-slider-handle', this) : $handles;

        if ($handleCont) {
          $handleCont.removeClass('mbsc-handle-curr');
        }

        $handleCont = $handle.parent().addClass('mbsc-active mbsc-handle-curr');
        $elm.addClass('mbsc-active');
        handleIndex = +$handle.attr('data-index');
        totalWidth = $track[0].offsetWidth;
        diff = $track[0].getBoundingClientRect().left;

        if (ev.type === 'mousedown') {
          isPressed = true;
          $$1(document).on('mousemove', onMove).on('mouseup', onEnd);
        }

        if (ev.type === 'mouseenter') {
          isHover = true;
          $$1(document).on('mousemove', onMove);
        }
      }
  }

  function onMove(ev) {
    if (action) {
      endX = getCoord(ev, 'X');
      endY = getCoord(ev, 'Y');
      diffX = endX - startX;
      diffY = endY - startY;

      if (Math.abs(diffX) > 5) {
        moved = true;
      }

      if (moved || isPressed || isHover) {
        if (Math.abs(lastUpdate - new Date()) > 50) {
          lastUpdate = new Date();
          updateSlider(endX, s.round, live && (!isHover || isPressed));
        }
      }

      if (moved) {
        ev.preventDefault();
      } else if (Math.abs(diffY) > 7 && ev.type == 'touchmove') {
        cleanUp();
      }
    }
  }

  function onEnd(ev) {
    if (action) {
      ev.preventDefault();

      if (!multiple) {
        $track.addClass('mbsc-progress-anim');
      }

      if (isHover && !isPressed) {
        updateValue(value[handleIndex], handleIndex, false, false, true);
      } else {
        updateSlider(endX, true, true);
      }

      if (!moved && !changed) {
        if (ev.type == 'touchend') {
          // Prevent ghost click
          preventClick();
        }

        that._onTap(value[handleIndex]);
      }

      if (ev.type == 'mouseup') {
        isPressed = false;
      }

      if (ev.type == 'mouseleave') {
        isHover = false;
      }

      if (!isHover) {
        cleanUp();
      }
    }
  }

  function onCancel() {
    if (action) {
      cleanUp();
    }
  }

  function onChange() {
    var v = that._readValue($$1(this)),
        i = +$$1(this).attr('data-index');

    if (v !== value[i]) {
      value[i] = v;
      oldValue[i] = v;
      updateValue(v, i);
    }
  }

  function onClick(ev) {
    // Prevent propagating click to label
    ev.stopPropagation();
  }

  function onLabelClick(ev) {
    // Prevent change on label click for swithes
    ev.preventDefault();
  }

  function onKeyDown(ev) {
    var dir;

    if (!elm.disabled) {
      switch (ev.keyCode) {
        case 38:
        case 39:
          dir = 1;
          break;

        case 40:
        case 37:
          dir = -1;
          break;
      }

      if (dir) {
        ev.preventDefault();

        if (!timer) {
          handleIndex = +$$1(this).attr('data-index');
          updateValue(value[handleIndex] + step * dir, handleIndex, true);
          timer = setInterval(function () {
            updateValue(value[handleIndex] + step * dir, handleIndex, true);
          }, 200);
        }
      }
    }
  }

  function onKeyUp(ev) {
    ev.preventDefault();
    clearInterval(timer);
    timer = null;
  }

  function cleanUp() {
    action = false;
    $handleCont.removeClass('mbsc-active');
    $elm.removeClass('mbsc-active'); // Detach document events

    $$1(document).off('mousemove', onMove).off('mouseup', onEnd);
  }

  function updateSlider(pos, round, fill) {
    var percent = round ? Math.min(Math[that._rounding || 'round'](Math.max((pos - diff) * 100 / totalWidth, 0) / scale / step) * step * 100 / (max - min + base), 100) : Math.max(0, Math.min((pos - diff) * 100 / totalWidth, 100));

    if (isRtl) {
      percent = 100 - percent;
    }

    updateValue(Math.round((min - base + percent / scale) * stepDecimal) / stepDecimal, handleIndex, fill, percent);
  }

  function updateValue(v, index, fill, percent, refresh, change) {
    var $handle = $handles.eq(index),
        $handleCont = $handle.parent();
    v = Math.min(max, Math.max(v, min));

    if (change === undefined) {
      change = fill;
    }

    if (that._update) {
      v = that._update(v, value, index, percent, multiple, refresh, $handleCont);
    } else {
      $handleCont.css({
        left: isRtl ? 'auto' : (percent || getPercent(v, min, max)) + '%',
        right: isRtl ? (percent || getPercent(v, min, max)) + '%' : 'auto'
      });
    }

    if (v > min) {
      $handleCont.removeClass('mbsc-slider-start');
    } else if (value[index] > min || refresh) {
      $handleCont.addClass('mbsc-slider-start');
    } // Store new value


    if (fill) {
      value[index] = v;
    } // Check if value changed


    if (fill && oldValue[index] != v) {
      changed = true;
      oldValue[index] = v; // Set new value to the input

      that._fillValue(v, index, change);
    }

    $handle.attr('aria-valuenow', v);
  } // Call the parent constructor


  ProgressBase.call(this, elm, settings, true);
  that._onTap = noop;
  that.___init = noop;
  that.___destroy = noop;

  that._attachChange = function () {
    $elm.on(s.changeEvent, onChange);
  };

  that.__init = function () {
    var wasInit;

    if ($handles) {
      wasInit = true;
      $handles.parent().remove();
    }

    that.___init();

    $parent = that._$parent;
    $track = that._$track;
    $elm = $parent.find('input');
    s = that.settings;
    min = that._min;
    max = that._max;
    base = that._base || 0;
    step = that._step;
    live = that._live;
    stepDecimal = step % 1 !== 0 ? 100 / (+(step % 1).toFixed(2) * 100) : 1;
    scale = 100 / (max - min + base) || 100;
    multiple = $elm.length > 1;
    isRtl = s.rtl;
    value = [];
    oldValue = []; // Read values

    $elm.each(function (i) {
      value[i] = that._readValue($$1(this));
      $$1(this).attr('data-index', i);
    });
    $handles = $parent.find('.mbsc-slider-handle');
    $listeners = $parent.find(multiple ? '.mbsc-slider-handle-cont' : '.mbsc-progress-cont'); // Attach events

    $handles.on('keydown', onKeyDown).on('keyup', onKeyUp).on('blur', onKeyUp);
    $listeners.each(function (i, listener) {
      listen(listener, 'touchstart', onStart, {
        passive: true
      });
      listen(listener, 'mousedown', onStart);
      listen(listener, 'touchend', onEnd);
      listen(listener, 'touchcancel', onEnd);
      listen(listener, 'pointercancel', onCancel);

      if (s.hover) {
        listen(listener, 'mouseenter', onStart);
        listen(listener, 'mouseleave', onEnd);
      }
    });

    if (!wasInit) {
      $elm.on('click', onClick);
      $parent.on('click', onLabelClick); // Attach to document to avoid non-passive listener warnings

      listen(document, 'touchmove', onMove, {
        passive: false
      });
    }
  };

  that.__destroy = function () {
    $parent.off('click', onLabelClick);
    $elm.off(s.changeEvent, onChange).off('click', onClick);
    $handles.off('keydown', onKeyDown).off('keyup', onKeyUp).off('blur', onKeyUp);
    $listeners.each(function (i, listener) {
      unlisten(listener, 'touchstart', onStart, {
        passive: true
      });
      unlisten(listener, 'mousedown', onStart);
      unlisten(listener, 'touchend', onEnd);
      unlisten(listener, 'touchcancel', onEnd);
      unlisten(listener, 'pointercancel', onCancel);
      unlisten(listener, 'mouseenter', onStart);
      unlisten(listener, 'mouseleave', onEnd);
      unlisten(document, 'touchmove', onMove, {
        passive: false
      });
    });

    that.___destroy();
  };

  that.refresh = function () {
    $elm.each(function (i) {
      updateValue(that._readValue($$1(this)), i, true, false, true, false);
    });
  };

  that.getVal = function () {
    return multiple ? value.slice(0) : value[0];
  };

  that.setVal = that._setVal = function (val, fill, change) {
    if (!$$1.isArray(val)) {
      val = [val];
    }

    $$1.each(val, function (i, v) {
      value[i] = v;
    });
    $$1.each(val, function (i, v) {
      updateValue(v, i, true, false, true, change);
    });
  };

  if (!inherit) {
    that.init();
  }
};

var Switch = function Switch(elm, settings) {
  var $elm,
      $parent,
      s,
      formControl,
      that = this;
  settings = settings || {};
  extend$1(settings, {
    changeEvent: 'click',
    round: false
  }); // Call the parent constructor

  SliderBase.call(this, elm, settings, true);

  that._readValue = function () {
    return elm.checked ? 1 : 0;
  };

  that._fillValue = function (v, index, change) {
    $elm.prop('checked', !!v);

    if (change) {
      $elm.trigger('change');
    }
  };

  that._onTap = function (v) {
    that._setVal(v ? 0 : 1);
  };

  that.___init = function () {
    s = that.settings;
    $elm = $$1(elm);
    $parent = $elm.parent();
    $parent.find('.mbsc-switch-track').remove();
    $parent.prepend($elm);
    $elm.attr('data-role', 'switch').after('<span class="mbsc-progress-cont mbsc-switch-track">' + '<span class="mbsc-progress-track mbsc-progress-anim">' + '<span class="mbsc-slider-handle-cont">' + '<span class="mbsc-slider-handle mbsc-switch-handle" data-index="0">' + '<span class="mbsc-switch-txt-off">' + s.offText + '</span>' + '<span class="mbsc-switch-txt-on">' + s.onText + '</span>' + '</span></span></span></span>');

    if (formControl) {
      formControl.destroy();
    }

    formControl = new FormControl(elm, s);
    that._$track = $parent.find('.mbsc-progress-track');
    that._min = 0;
    that._max = 1;
    that._step = 1;
  };

  that.___destroy = function () {
    formControl.destroy();
  };

  that.getVal = function () {
    return elm.checked;
  };

  that.setVal = function (val, fill, change) {
    that._setVal(val ? 1 : 0, fill, change);
  };

  that.init();
};
Switch.prototype = {
  _class: 'switch',
  _css: 'mbsc-switch',
  _hasTheme: true,
  _hasLang: true,
  _hasDef: true,
  _defaults: {
    stopProp: true,
    offText: 'Off',
    onText: 'On'
  }
};
classes.Switch = Switch; // Init mbsc-switch elements on page load

autoInit('[mbsc-switch]', Switch);

// eslint-disable-next-line no-unused-vars
var Progress = function Progress(elm, settings, inherit) {
  var $display,
      $elm,
      $parent,
      $progress,
      $target,
      $track,
      min,
      max,
      inputStyle,
      labelStyle,
      s,
      template,
      value,
      valueText,
      that = this;

  function onChange() {
    var v = getAttr('value', min);

    if (v !== value) {
      updateValue(v);
    }
  }

  function getAttr(attr, def, str) {
    var v = $elm.attr(attr);
    return v === undefined || v === '' ? def : str ? v : +v;
  }

  function updateValue(v, refresh, fill, change) {
    v =
    /* TRIALCONDREV */
    Math.min(max, Math.max(v, min));
    $progress.css('width', (v - min) * 100 / (max - min) + '%');

    if (fill === undefined) {
      fill = true;
    }

    if (change === undefined) {
      change = fill;
    }

    if (v !== value || refresh) {
      // Display value
      that._display(v);
    }

    if (v !== value) {
      // Set new value
      value = v; // Put new value in the progress element

      if (fill) {
        $elm.attr('value', value);
      } // Trigger change on the element


      if (change) {
        $elm.trigger('change');
      }
    }
  } // Call the parent constructor


  ProgressBase.call(this, elm, settings, true);

  that._display = function (v) {
    valueText = template && s.returnAffix ? template.replace(/\{value\}/, v).replace(/\{max\}/, max) : v;

    if ($target) {
      $target.html(valueText);
    }

    if ($display) {
      $display.html(valueText);
    }
  };

  that._attachChange = function () {
    $elm.on('change', onChange);
  };

  that.__init = function () {
    var displayValue, i, stepLabels, wasInit;
    s = that.settings;
    $elm = $$1(elm); // Check if the element was already initialized

    wasInit = !!$parent;
    $parent = that._$parent; // Read settings from data attributes or settings object

    min = that._min = settings.min === undefined ? getAttr('min', s.min) : settings.min;
    max = that._max = settings.max === undefined ? getAttr('max', s.max) : settings.max;
    inputStyle = settings.inputStyle === undefined ? getAttr('data-input-style', s.inputStyle, true) : settings.inputStyle;
    labelStyle = settings.labelStyle === undefined ? getAttr('data-label-style', s.labelStyle, true) : settings.labelStyle;
    value = getAttr('value', min);
    displayValue = $elm.attr('data-val') || s.val;
    stepLabels = $elm.attr('data-step-labels');
    stepLabels = stepLabels ? JSON.parse(stepLabels) : s.stepLabels;
    template = $elm.attr('data-template') || (max == 100 && !s.template ? '{value}%' : s.template);

    if (!wasInit) {
      wrapLabel($parent, null, inputStyle, labelStyle, elm);
      addIcon($elm); // Generate track and progress

      $parent.find('.mbsc-input-wrap').append('<span class="mbsc-progress-cont"><span class="mbsc-progress-track mbsc-progress-anim"><span class="mbsc-progress-bar"></span></span></span>');
      $progress = that._$progress = $parent.find('.mbsc-progress-bar');
      $track = that._$track = $parent.find('.mbsc-progress-track');
    } else {
      if (displayValue) {
        $display.remove();
        $parent.removeClass('mbsc-progress-value-' + (displayValue == 'right' ? 'right' : 'left'));
      }

      if (stepLabels) {
        $$1('.mbsc-progress-step-label', $track).remove();
      }
    } // Set attributes


    $elm.attr('min', min).attr('max', max); // Generate value container on left or right side

    if (displayValue) {
      $display = $$1('<span class="mbsc-progress-value"></span>');
      $parent.addClass('mbsc-progress-value-' + (displayValue == 'right' ? 'right' : 'left')).find('.mbsc-input-wrap').append($display);
    } // Generate step labels


    if (stepLabels) {
      for (i = 0; i < stepLabels.length; ++i) {
        $track.append('<span class="mbsc-progress-step-label" style="' + (s.rtl ? 'right' : 'left') + ': ' + (stepLabels[i] - min) * 100 / (max - min) + '%" >' + stepLabels[i] + '</span>');
      }
    }

    $target = $$1($elm.attr('data-target') || s.target);
  };

  that.__destroy = function () {
    $parent.removeClass('mbsc-ic-left mbsc-ic-right').find('.mbsc-progress-cont').remove();
    $parent.find('.mbsc-input-ic').remove();
    $elm.off('change', onChange);
  };

  that.refresh = function () {
    updateValue(getAttr('value', min), true, false);
  };

  that.getVal = function () {
    return value;
  };

  that.setVal = function (v, fill, change) {
    updateValue(v, true, fill, change);
  };

  if (!inherit) {
    that.init();
  }
};
Progress.prototype = {
  _class: 'progress',
  _css: 'mbsc-progress',
  _hasTheme: true,
  _hasLang: true,
  _hasDef: true,
  _defaults: {
    min: 0,
    max: 100,
    returnAffix: true
  }
};
classes.Progress = Progress; // Init mbsc-progress elements on page load

autoInit('[mbsc-progress]', Progress);

var Slider = function Slider(elm, settings, inherit) {
  var $elm,
      $parent,
      $progress,
      $tooltips,
      $track,
      hasProgress,
      hasTooltip,
      isRange,
      isRtl,
      max,
      min,
      step,
      s,
      that = this; // Call the parent constructor

  Progress.call(this, elm, settings, true);
  var progressInit = that.__init,
      progressDestroy = that.__destroy;
  SliderBase.call(this, elm, settings, true);
  var sliderInit = that.__init,
      sliderDestroy = that.__destroy; // ---

  that.__init = function () {
    progressInit();
    sliderInit();
  };

  that.__destroy = function () {
    progressDestroy();
    sliderDestroy();
  };

  that._update = function (v, value, index, percent, multiple, refresh, $handleCont) {
    if (isRange) {
      if (index === 0) {
        v = Math.min(v, value[1]);
        $progress.css({
          width: getPercent(value[1], min, max) - getPercent(v, min, max) + '%',
          left: isRtl ? 'auto' : getPercent(v, min, max) + '%',
          right: isRtl ? getPercent(v, min, max) + '%' : 'auto'
        });
      } else {
        v = Math.max(v, value[0]);
        $progress.css({
          width: getPercent(v, min, max) - getPercent(value[0], min, max) + '%'
        });
      }
    } else if (multiple || !hasProgress) {
      $handleCont.css({
        left: isRtl ? 'auto' : (percent || getPercent(v, min, max)) + '%',
        right: isRtl ? (percent || getPercent(v, min, max)) + '%' : 'auto'
      });
    } else {
      $progress.css('width', (percent || getPercent(v, min, max)) + '%');
    }

    if (hasTooltip) {
      $tooltips.eq(index).html(v);
    } // Display value in the specified container(s)


    if (!multiple && (value[index] != v || refresh)) {
      that._display(v);
    } // Return validated value


    return v;
  };

  that._readValue = function ($elm) {
    return +$elm.val();
  };

  that._fillValue = function (v, index, change) {
    $elm.eq(index).val(v);

    if (change) {
      $elm.eq(index).trigger('change');
    }
  };

  that._markupReady = function () {
    var i, stepNr;

    if (hasTooltip) {
      $parent.addClass('mbsc-slider-has-tooltip');
    } // Generate step marks


    if (step != 1) {
      stepNr = (max - min) / step;

      for (i = 0; i <= stepNr; ++i) {
        $track.append('<span class="mbsc-slider-step" style="' + (isRtl ? 'right' : 'left') + ':' + 100 / stepNr * i + '%"></span>');
      }
    } // Generate slider handles


    $elm.each(function (i, elm) {
      var value = +elm.value;

      if (elm.type == 'range') {
        // Set min / max / step properties for all inputs
        $$1(elm).attr('min', min).attr('max', max).attr('step', step);
      }

      (hasProgress ? $progress : $track).append('<span class="mbsc-slider-handle-cont' + (isRange && !i ? ' mbsc-slider-handle-left' : '') + (isRange && !i && value > (max - min) / 2 ? ' mbsc-handle-curr' : '') + '">' + '<span tabindex="0" class="mbsc-slider-handle" aria-valuemin="' + min + '" aria-valuemax="' + max + '" data-index="' + i + '"></span>' + (hasTooltip ? '<span class="mbsc-slider-tooltip"></span>' : '') + '</span>');
    });
    $tooltips = $parent.find('.mbsc-slider-tooltip');
  };

  that.___init = function () {
    if ($parent) {
      $parent.removeClass('mbsc-slider-has-tooltip');

      if (step != 1) {
        $$1('.mbsc-slider-step', $track).remove();
      }
    }

    $parent = that._$parent;
    $track = that._$track;
    $progress = that._$progress;
    $elm = $parent.find('input');
    s = that.settings;
    min = that._min;
    max = that._max;
    that._step = step = settings.step === undefined ? +$elm.attr('step') || s.step : settings.step;
    that._live = getBoolAttr('data-live', s.live, $elm);
    hasTooltip = getBoolAttr('data-tooltip', s.tooltip, $elm);
    hasProgress = getBoolAttr('data-highlight', s.highlight, $elm) && $elm.length < 3;
    isRange = hasProgress && $elm.length == 2;
    isRtl = s.rtl;

    that._markupReady();
  };

  if (!inherit) {
    that.init();
  }
};
Slider.prototype = {
  _class: 'progress',
  _css: 'mbsc-progress mbsc-slider',
  _hasTheme: true,
  _hasLang: true,
  _hasDef: true,
  _defaults: {
    changeEvent: 'change',
    stopProp: true,
    min: 0,
    max: 100,
    step: 1,
    live: true,
    highlight: true,
    round: true,
    returnAffix: true
  }
};
classes.Slider = Slider; // Init mbsc-slider elements on page load

autoInit('[mbsc-slider]', Slider);

var Rating = function Rating(elm, settings, inherit) {
  var $progress,
      $track,
      max,
      min,
      empty,
      filled,
      s,
      that = this,
      $elm = $$1(elm); // Call the parent constructor

  Slider.call(this, elm, settings, true);

  that._update = function (v, value, index, percent, multiple, refresh) {
    $progress.css('width', getPercent(v, 0, max) + '%'); // Display value in the specified container(s)

    if (!multiple && (value[index] != v || refresh)) {
      that._display(v);
    } // Return validated value


    return v;
  };

  that._markupReady = function () {
    var i,
        emptyString = '',
        filledString = '';
    $track = that._$track;
    $progress = that._$progress;
    s = that.settings;
    min = that._min;
    max = that._max;
    that._base = min;
    that._rounding = s.rtl ? 'floor' : 'ceil';
    empty = $elm.attr('data-empty') || s.empty;
    filled = $elm.attr('data-filled') || s.filled;

    for (i = 0; i < max; ++i) {
      emptyString += '<span class="mbsc-ic mbsc-ic-' + empty + '"></span>';
      filledString += '<span class="mbsc-ic mbsc-ic-' + filled + '"></span>';
    }

    $track.html(emptyString);
    $track.append($progress);
    $progress.html(filledString);
    $track.append('<span class="mbsc-rating-handle-cont' + '">' + '<span tabindex="0" class="mbsc-slider-handle" aria-valuemin="' + min + '" aria-valuemax="' + max + '" data-index="0"></span>' + '</span>');
  };

  if (!inherit) {
    that.init();
  }
};
Rating.prototype = {
  _class: 'progress',
  _css: 'mbsc-progress mbsc-rating',
  _hasTheme: true,
  _hasLang: true,
  _hasDef: true,
  _defaults: {
    changeEvent: 'change',
    stopProp: true,
    min: 1,
    max: 5,
    step: 1,
    live: true,
    round: true,
    hover: true,
    highlight: true,
    returnAffix: true,
    empty: 'star',
    filled: 'star3'
  }
};
classes.Rating = Rating; // Init mbsc-rating elements on page load

autoInit('[mbsc-rating]', Rating);

var nr = 1;
var CollapsibleBase =
/*#__PURE__*/
function () {
  function CollapsibleBase(elm, settings) {
    var _this = this;

    var content;
    var $header;
    var $content;
    var $elm = $$1(elm);
    this.settings = settings;
    this._isOpen = settings.isOpen || false;
    $elm.addClass('mbsc-collapsible ' + (this._isOpen ? 'mbsc-collapsible-open' : ''));

    if ($elm.hasClass('mbsc-card')) {
      // card enhance
      $header = $elm.find('.mbsc-card-header').eq(0).addClass('mbsc-collapsible-header');
      $content = $elm.find('.mbsc-card-content').eq(0).addClass('mbsc-collapsible-content');
    } else if ($elm.hasClass('mbsc-form-group') || $elm.hasClass('mbsc-form-group-inset')) {
      // form group enhance
      $header = $elm.find('.mbsc-form-group-title').eq(0).addClass('mbsc-collapsible-header');
      $content = $elm.find('.mbsc-form-group-content').eq(0).addClass('mbsc-collapsible-content');
    } else {
      // if it is used independently
      $header = $elm.find('.mbsc-collapsible-header').eq(0);
      $content = $elm.find('.mbsc-collapsible-content').eq(0);
    }

    content = $content[0];

    if (content && !content.id) {
      content.id = 'mbsc-collapsible-' + nr++;
    }

    if ($header.length && content) {
      var $collapsibleIcon = $$1('<span class="mbsc-collapsible-icon mbsc-ic mbsc-ic-arrow-down5"></span>');
      tap(this, $header, function () {
        _this.collapse();
      });
      $header.attr('role', 'button').attr('aria-expanded', this._isOpen).attr('aria-controls', content.id).attr('tabindex', '0').on('mousedown', this.onMouseDown).on('keydown', this.onKeyDown).append($collapsibleIcon);
    }

    elm.mbscInst = this;
    this._$header = $header;
    this._$content = $content;
    this._$elm = $elm;
    this._$accordionParent = $elm.parent('[mbsc-accordion], mbsc-accordion, .mbsc-accordion');
    this.show = this.show.bind(this);
    this.hide = this.hide.bind(this);
    this.toggle = this.toggle.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
    this.onMouseDown = this.onMouseDown.bind(this);
  }

  var _proto = CollapsibleBase.prototype;

  _proto.collapse = function collapse(show) {
    var $elm = this._$elm;
    var $content = this._$content;

    var removeHeight = function removeHeight() {
      $content.off('transitionend', removeHeight).css('height', '');
    };

    if (show === undefined) {
      show = !this._isOpen;
    }

    if (show && this._isOpen || !show && !this._isOpen || !$content.length) {
      return;
    }

    if (show) {
      if (hasTransition) {
        $content.on('transitionend', removeHeight).css('height', $content[0].scrollHeight);
      }

      $elm.addClass('mbsc-collapsible-open');
    } else {
      if (hasTransition) {
        $content.css('height', getComputedStyle($content[0]).height);
      }

      setTimeout(function () {
        $content.css('height', 0);
        $elm.removeClass('mbsc-collapsible-open');
      }, 50);
    }

    if (show && this._$accordionParent) {
      this._$accordionParent.find('.mbsc-collapsible-open').each(function () {
        if (this !== $elm[0]) {
          this.mbscInst.hide();
        }
      });
    }

    this._isOpen = show;

    this._$header.attr('aria-expanded', this._isOpen);
  };

  _proto.show = function show() {
    this.collapse(true);
  };

  _proto.hide = function hide() {
    this.collapse(false);
  };

  _proto.toggle = function toggle() {
    this.collapse();
  };

  _proto.destroy = function destroy() {
    this._$elm.removeClass('mbsc-collapsible mbsc-collapsible-open');

    this._$content.removeClass('mbsc-collapsible-content');

    this._$header.removeClass('mbsc-collapsible-header').off('mousedown', this.onMouseDown).off('keydown', this.onKeyDown).find('.mbsc-collapsible-icon').remove();

    tapOff(this._$header);
  };

  _proto.onKeyDown = function onKeyDown(ev) {
    if (ev.which === 32 || ev.keyCode == 13) {
      //space or enter 
      ev.preventDefault();
      this.collapse();
    }
  };

  _proto.onMouseDown = function onMouseDown(ev) {
    // prevent focus on mouse down
    ev.preventDefault();
  };

  return CollapsibleBase;
}();
classes.CollapsibleBase = CollapsibleBase;

var id$1 = 0;

function initControls($ctx, controls, s, shallow) {
  $$1('input,select,textarea,progress,button', $ctx).each(function () {
    var control = this,
        $control = $$1(control),
        //$parent = $control.parent(),
    type = getControlType($control); // Skip elements with data-enhance="false"

    if ($control.attr('data-enhance') != 'false'
    /* TRIALCOND */
    ) {
        if ($control.hasClass('mbsc-control')) {
          if (control.mbscInst) {
            control.mbscInst.option({
              theme: s.theme,
              lang: s.lang,
              rtl: s.rtl,
              onText: s.onText,
              offText: s.offText,
              stopProp: s.stopProp
            });
          }
        } else {
          if (!control.id) {
            control.id = 'mbsc-form-control-' + ++id$1;
          }

          switch (type) {
            case 'button':
            case 'submit':
              controls[control.id] = new Button(control, {
                theme: s.theme,
                rtl: s.rtl,
                tap: s.tap
              });
              break;

            case 'switch':
              controls[control.id] = new Switch(control, {
                theme: s.theme,
                lang: s.lang,
                rtl: s.rtl,
                tap: s.tap,
                onText: s.onText,
                offText: s.offText,
                stopProp: s.stopProp
              });
              break;

            case 'checkbox':
              controls[control.id] = new CheckBox(control, {
                tap: s.tap,
                theme: s.theme,
                rtl: s.rtl
              });
              break;

            case 'range':
              if (!$$1(control).parent().hasClass('mbsc-slider')) {
                controls[control.id] = new Slider(control, {
                  theme: s.theme,
                  lang: s.lang,
                  rtl: s.rtl,
                  stopProp: s.stopProp,
                  labelStyle: s.labelStyle
                });
              }

              break;

            case 'rating':
              controls[control.id] = new Rating(control, {
                theme: s.theme,
                lang: s.lang,
                rtl: s.rtl,
                stopProp: s.stopProp
              });
              break;

            case 'progress':
              controls[control.id] = new Progress(control, {
                theme: s.theme,
                lang: s.lang,
                rtl: s.rtl,
                labelStyle: s.labelStyle
              });
              break;

            case 'radio':
              controls[control.id] = new Radio(control, {
                tap: s.tap,
                theme: s.theme,
                rtl: s.rtl
              });
              break;

            case 'select':
            case 'select-one':
            case 'select-multiple':
              controls[control.id] = new Select(control, {
                tap: s.tap,
                inputStyle: s.inputStyle,
                labelStyle: s.labelStyle,
                theme: s.theme,
                rtl: s.rtl
              });
              break;

            case 'textarea':
              controls[control.id] = new TextArea(control, {
                tap: s.tap,
                inputStyle: s.inputStyle,
                labelStyle: s.labelStyle,
                theme: s.theme,
                rtl: s.rtl
              });
              break;

            case 'segmented':
              controls[control.id] = new SegmentedItem(control, {
                theme: s.theme,
                rtl: s.rtl,
                tap: s.tap,
                inputStyle: s.inputStyle
              });
              break;

            case 'stepper':
              controls[control.id] = new Stepper(control, {
                theme: s.theme,
                rtl: s.rtl
              });
              break;

            case 'hidden':
              return;

            default:
              controls[control.id] = new Input(control, {
                tap: s.tap,
                inputStyle: s.inputStyle,
                labelStyle: s.labelStyle,
                theme: s.theme,
                rtl: s.rtl
              });
              break;
          }
        }
      }
  });
  $$1('[data-collapsible]:not(.mbsc-collapsible)', $ctx).each(function () {
    var control = this,
        $control = $$1(control),
        isOpen = $control.attr('data-open');

    if (!control.id) {
      control.id = 'mbsc-form-control-' + ++id$1;
    }

    controls[control.id] = new CollapsibleBase(control, {
      isOpen: isOpen !== undefined && isOpen != 'false'
    });
    instances[control.id] = controls[control.id];
  }); // Set initial height for textareas

  if (!shallow) {
    sizeTextAreas();
  }
}

var innerStyle = 'position:absolute;left:0;top:0;';
var style = innerStyle + 'right:0;bottom:0;overflow:hidden;z-index:-1;';
var markup = '<div style="' + style + '"><div style="' + innerStyle + '"></div></div>' + '<div style="' + style + '"><div style="' + innerStyle + 'width:200%;height:200%;"></div></div>';
var observer;
var count = 0;
function resizeObserver(el, callback, zone) {
  function reset() {
    expandChild.style.width = '100000px';
    expandChild.style.height = '100000px';
    expand.scrollLeft = 100000;
    expand.scrollTop = 100000;
    shrink.scrollLeft = 100000;
    shrink.scrollTop = 100000;
  }

  function checkHidden() {
    var now = new Date();
    hiddenRafId = 0;

    if (!stopCheck) {
      if (now - lastCheck > 200 && !expand.scrollTop && !expand.scrollLeft) {
        lastCheck = now;
        reset();
      }

      if (!hiddenRafId) {
        hiddenRafId = raf(checkHidden);
      }
    }
  }

  function onScroll() {
    if (!rafId) {
      rafId = raf(onResize);
    }
  }

  function onResize() {
    rafId = 0;
    reset();
    callback();
  }

  var expand;
  var expandChild;
  var helper;
  var hiddenRafId;
  var rafId;
  var shrink;
  var stopCheck;
  var lastCheck = 0; //let isHidden = true;

  if (window.ResizeObserver) {
    if (!observer) {
      observer = new ResizeObserver(function (entries) {
        for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var entry = _ref;

          entry.target.__mbscResize();
        }
      });
    }

    count++;
    el.__mbscResize = callback;
    observer.observe(el);
  } else {
    helper = document.createElement('div');
    helper.innerHTML = markup;
    helper.dir = 'ltr'; // Need this to work in rtl as well;

    shrink = helper.childNodes[1];
    expand = helper.childNodes[0];
    expandChild = expand.childNodes[0];
    el.appendChild(helper);
    expand.addEventListener('scroll', onScroll);
    shrink.addEventListener('scroll', onScroll);

    if (zone) {
      zone.runOutsideAngular(function () {
        raf(checkHidden);
      });
    } else {
      raf(checkHidden);
    }
  }

  return {
    detach: function detach() {
      if (observer) {
        count--;
        observer.unobserve(el);

        if (!count) {
          observer = null;
        }
      } else {
        el.removeChild(helper);
        stopCheck = true;
      }
    }
  };
}

var $activeElm,
    preventShow,
    themes = mobiscroll.themes,
    needsFixed = /(iphone|ipod)/i.test(userAgent) && majorVersion >= 7,
    isAndroid = os == 'android',
    isIOS = os == 'ios',
    isIOS8 = isIOS && majorVersion == 8,
    halfBorder = isIOS && majorVersion > 7,
    prevdef = function prevdef(ev) {
  ev.preventDefault();
};

var EDITABLE = 'input,select,textarea,button';
var ALLOW_ENTER = 'textarea,button,input[type="button"],input[type="submit"]';
var FOCUSABLE = EDITABLE + ',[tabindex="0"]';
var Frame = function Frame(el, settings, inherit) {
  var //$ariaDiv,
  $ctx,
      $header,
      $lock,
      $markup,
      $overlay,
      $persp,
      $popup,
      $wnd,
      $wrapper,
      buttons,
      btn,
      ctx,
      doAnim,
      hasContext,
      isModal,
      isInserted,
      isPointer,
      markup,
      modalWidth,
      modalHeight,
      needsDimensions,
      needsLock,
      observer,
      overlay,
      popup,
      posDebounce,
      prevInst,
      s,
      scrollLock,
      touched,
      trigger,
      wndWidth,
      wndHeight,
      that = this,
      $elm = $$1(el),
      elmList = [],
      lastFocus = new Date();

  function onBtnStart(ev) {
    // Need this to prevent opening of sidemenus or similar
    if (s.stopProp) {
      ev.stopPropagation();
    }

    var b = closest(this, ev.target, '.mbsc-fr-btn-e');

    if (!b) {
      return;
    } // Can't call preventDefault here, it kills page scroll


    if (btn) {
      btn.removeClass('mbsc-active');
    }

    btn = $$1(b); // Active button

    if (!btn.hasClass('mbsc-disabled') && !btn.hasClass('mbsc-fr-btn-nhl')) {
      btn.addClass('mbsc-active');
    }

    if (ev.type === 'mousedown') {
      $$1(document).on('mouseup', onBtnEnd);
    }
  }

  function onBtnEnd(ev) {
    if (btn) {
      btn.removeClass('mbsc-active');
      btn = null;
    }

    if (ev.type === 'mouseup') {
      $$1(document).off('mouseup', onBtnEnd);
    }
  }

  function onScroll(ev) {
    if (scrollLock && markup.contains(ev.target)) {
      ev.preventDefault();
    }
  }

  function onWndKeyDown(ev) {
    if (mobiscroll.activeInstance == that) {
      if (ev.keyCode == 13 && (!$$1(ev.target).is(ALLOW_ENTER) || ev.shiftKey)) {
        that.select();
      } else if (ev.keyCode == 27) {
        that.cancel();
      }
    }
  }

  function onShow(prevFocus) {
    if (!prevFocus && !isAndroid && that._activeElm) {
      //overlay.focus();
      lastFocus = new Date();

      that._activeElm.focus();
    } //that.ariaMessage(s.ariaMessage);

  }

  function onHide(prevAnim) {
    var $activeEl = $activeElm,
        focus = s.focusOnClose;

    that._markupRemove();

    $markup.remove();

    if (isModal) {
      ctx.mbscModals--;

      if (s.scrollLock) {
        ctx.mbscLock--;
      }

      if (!ctx.mbscLock) {
        $lock.removeClass('mbsc-fr-lock');
      }

      if (needsLock) {
        ctx.mbscIOSLock--;

        if (!ctx.mbscIOSLock) {
          $lock.removeClass('mbsc-fr-lock-ios');
          $ctx.css({
            top: '',
            left: ''
          });
          $wnd.scrollLeft(ctx.mbscScrollLeft);
          $wnd.scrollTop(ctx.mbscScrollTop);
        }
      } // The follwing should be done only if no other
      // instance was opened during the hide animation


      if (!ctx.mbscModals) {
        $lock.removeClass('mbsc-fr-lock-ctx');
      }

      if (!ctx.mbscModals || prevInst) {
        // Put focus back to the last active element
        if (!prevAnim) {
          if (!$activeEl) {
            $activeEl = $elm;
          }

          setTimeout(function () {
            if (focus === undefined || focus === true) {
              preventShow = true;
              $activeEl[0].focus();
            } else if (focus) {
              $$1(focus)[0].focus();
            }
          }, 200);
        }
      }
    }

    prevInst = undefined;
    isInserted = false;
    trigger('onHide');
  }

  function onPosition() {
    clearTimeout(posDebounce);
    posDebounce = setTimeout(function () {
      if (that.position(true)) {
        // Trigger reflow, needed on iOS safari, when orientation is changed
        popup.style.visibility = 'hidden';
        popup.offsetHeight;
        popup.style.visibility = '';
      }
    }, 200);
  }

  function onFocus(ev) {
    if (mobiscroll.activeInstance == that && ev.target.nodeType && !overlay.contains(ev.target) && new Date() - lastFocus > 100) {
      lastFocus = new Date();

      that._activeElm.focus();
    }
  }

  function insertMarkup(prevAnim, prevFocus) {
    function onAnimEnd() {
      $markup.off(animEnd, onAnimEnd).removeClass('mbsc-anim-in mbsc-anim-trans mbsc-anim-trans-' + doAnim).find('.mbsc-fr-popup').removeClass('mbsc-anim-' + doAnim);
      onShow(prevFocus);
    }

    function onOverlayStart(ev) {
      if (!target && ev.target == overlay) {
        target = true;
        moved = false;
        startX = getCoord(ev, 'X');
        startY = getCoord(ev, 'Y');
      }
    }

    function onOverlayMove(ev) {
      if (target && !moved && (Math.abs(getCoord(ev, 'X') - startX) > 9 || Math.abs(getCoord(ev, 'Y') - startY) > 9)) {
        moved = true;
      }
    } // Might be not visible if immediately hidden


    if (!that._isVisible) {
      return;
    } // Show


    if (isModal) {
      $markup.appendTo($ctx);
    } else if ($elm.is('div') && !that._hasContent) {
      // Insert inside the element on which was initialized
      $elm.empty().append($markup);
    } else {
      // Insert after the element
      if ($elm.hasClass('mbsc-control')) {
        var $wrap = $elm.closest('.mbsc-control-w');
        $markup.insertAfter($wrap);

        if ($wrap.hasClass('mbsc-select')) {
          $wrap.addClass('mbsc-select-inline');
        }
      } else {
        $markup.insertAfter($elm);
      }
    }

    isInserted = true;

    that._markupInserted($markup);

    trigger('onMarkupInserted', {
      target: markup
    });

    if (isModal && s.closeOnOverlayTap) {
      var moved, target, startX, startY;
      listen(overlay, 'touchstart', onOverlayStart, {
        passive: true
      });
      listen(overlay, 'touchmove', onOverlayMove, {
        passive: true
      });
      $overlay.on('mousedown', onOverlayStart).on('mousemove', onOverlayMove).on('touchcancel', function () {
        target = false;
      }).on('touchend click', function (ev) {
        if (target && !moved) {
          that.cancel();

          if (ev.type == 'touchend') {
            preventClick();
          }
        }

        target = false;
      });
    }

    $markup.on('mousedown', '.mbsc-btn-e,.mbsc-fr-btn-e', prevdef).on('keydown', '.mbsc-fr-btn-e', function (ev) {
      if (ev.keyCode == 32) {
        // Space
        ev.preventDefault();
        ev.stopPropagation();
        this.click();
      }
    }).on('keydown', function (ev) {
      // Trap focus inside modal
      if (ev.keyCode == 32 && !$$1(ev.target).is(EDITABLE)) {
        // Prevent page scroll on space press
        ev.preventDefault();
      } else if (ev.keyCode == 9 && isModal && s.focusTrap) {
        // Tab
        var $focusable = $markup.find(FOCUSABLE).filter(function () {
          return this.offsetWidth > 0 || this.offsetHeight > 0;
        }),
            index = $focusable.index($$1(':focus', $markup)),
            i = $focusable.length - 1,
            target = 0;

        if (ev.shiftKey) {
          i = 0;
          target = -1;
        }

        if (index === i) {
          $focusable.eq(target)[0].focus();
          ev.preventDefault();
        }
      }
    }).on('touchend', '.mbsc-fr-btn-e', onBtnEnd);
    listen(markup, 'touchstart', onBtnStart, {
      passive: true
    });
    listen(markup, 'mousedown', onBtnStart); // Need event capture for this

    listen(markup, 'touchstart', function () {
      if (!touched) {
        touched = true;
        $ctx.find('.mbsc-no-touch').removeClass('mbsc-no-touch');
      }
    }, {
      passive: true,
      capture: true
    }); // Init buttons

    $$1.each(buttons, function (i, b) {
      that.tap($$1('.mbsc-fr-btn' + i, $markup), function (ev) {
        b = isString(b) ? that.buttons[b] : b;
        (isString(b.handler) ? that.handlers[b.handler] : b.handler).call(this, ev, that);
      }, true);
    });

    that._attachEvents($markup); // Set position


    if (that.position() === false) {
      return;
    }

    if (isModal || that._checkSize) {
      observer = resizeObserver(markup, onPosition, s.zone);
    }

    if (isModal) {
      $markup.removeClass('mbsc-fr-pos');

      if (doAnim && !prevAnim) {
        $markup.addClass('mbsc-anim-in mbsc-anim-trans mbsc-anim-trans-' + doAnim).on(animEnd, onAnimEnd).find('.mbsc-fr-popup').addClass('mbsc-anim-' + doAnim);
      } else {
        onShow(prevFocus);
      }
    }

    trigger('onShow', {
      target: markup,
      valueText: that._tempValue
    });
  }

  function show(beforeShow, $elm) {
    if (that._isVisible) {
      return;
    }

    if (beforeShow) {
      beforeShow();
    }

    if (that.show() !== false) {
      $activeElm = $elm;
    }
  }

  function set() {
    that._fillValue();

    trigger('onSet', {
      valueText: that._value
    });
  }

  function cancel() {
    trigger('onCancel', {
      valueText: that._value
    });
  }

  function clear() {
    that.setVal(null, true);
  } // Call the parent constructor


  Base.call(this, el, settings, true);
  /**
   * Positions the scroller on the screen.
   */

  that.position = function (check) {
    var anchor,
        anchorWidth,
        anchorHeight,
        anchorPos,
        anchorTop,
        anchorLeft,
        arrow,
        arrowWidth,
        arrowHeight,
        docHeight,
        docWidth,
        isWrapped,
        newHeight,
        newWidth,
        oldHeight,
        oldWidth,
        width,
        top,
        left,
        css = {},
        scrollLeft = 0,
        scrollTop = 0,
        minWidth = 0,
        totalWidth = 0;

    if (!isInserted) {
      return false;
    }

    oldWidth = wndWidth;
    oldHeight = wndHeight;
    newHeight = Math.min(markup.offsetHeight, hasContext ? Infinity : window.innerHeight);
    newWidth = Math.min(markup.offsetWidth, hasContext ? Infinity : window.innerWidth);

    if (!newWidth || !newHeight || wndWidth === newWidth && wndHeight === newHeight && check) {
      return;
    }

    if (that._checkResp(newWidth)) {
      return false;
    }

    wndWidth = newWidth;
    wndHeight = newHeight;

    if (that._isFullScreen || /top|bottom/.test(s.display)) {
      // Set width, if document is larger than viewport, needs to be set before onPosition (for calendar)
      $popup.width(newWidth);
    } else if (isModal) {
      // Reset width
      $wrapper.width('');
    }

    that._position($markup); // Call position for nested mobiscroll components
    // $('.mbsc-comp', $markup).each(function () {
    //     var inst = instances[this.id];
    //     if (inst && inst !== that && inst.position) {
    //         inst.position();
    //     }
    // });


    if (!that._isFullScreen && /center|bubble/.test(s.display)) {
      $$1('.mbsc-w-p', $markup).each(function () {
        // Need fractional values here, so offsetWidth is not ok
        width = this.getBoundingClientRect().width;
        totalWidth += width;
        minWidth = width > minWidth ? width : minWidth;
      });
      isWrapped = totalWidth > newWidth - 16 || s.tabs === true;
      $wrapper.css({
        'width': that._isLiquid ? Math.min(s.maxPopupWidth, newWidth - 16) : Math.ceil(isWrapped ? minWidth : totalWidth),
        'white-space': isWrapped ? '' : 'nowrap'
      });
    }

    if (trigger('onPosition', {
      target: markup,
      popup: popup,
      hasTabs: isWrapped,
      oldWidth: oldWidth,
      oldHeight: oldHeight,
      windowWidth: newWidth,
      windowHeight: newHeight
    }) === false || !isModal) {
      return;
    }

    if (needsDimensions) {
      scrollLeft = $wnd.scrollLeft();
      scrollTop = $wnd.scrollTop();

      if (wndWidth) {
        $persp.css({
          width: '',
          height: ''
        });
      }
    }

    modalWidth = popup.offsetWidth;
    modalHeight = popup.offsetHeight;
    scrollLock = modalHeight <= newHeight && modalWidth <= newWidth;

    if (s.display == 'center') {
      left = Math.max(0, scrollLeft + (newWidth - modalWidth) / 2);
      top = Math.max(0, scrollTop + (newHeight - modalHeight) / 2);
    } else if (s.display == 'bubble') {
      anchor = s.anchor === undefined ? $elm : $$1(s.anchor);
      arrow = $$1('.mbsc-fr-arr-i', $markup)[0];
      anchorPos = anchor.offset();
      anchorTop = anchorPos.top + (hasContext ? scrollTop - $ctx.offset().top : 0);
      anchorLeft = anchorPos.left + (hasContext ? scrollLeft - $ctx.offset().left : 0);
      anchorWidth = anchor[0].offsetWidth;
      anchorHeight = anchor[0].offsetHeight;
      arrowWidth = arrow.offsetWidth;
      arrowHeight = arrow.offsetHeight; // Horizontal positioning

      left = constrain(anchorLeft - (modalWidth - anchorWidth) / 2, scrollLeft + 3, scrollLeft + newWidth - modalWidth - 3); // Vertical positioning
      // Below the input

      top = anchorTop + anchorHeight + arrowHeight / 2;

      if (top + modalHeight + 8 > scrollTop + newHeight && anchorTop - modalHeight - arrowHeight / 2 > scrollTop) {
        $popup.removeClass('mbsc-fr-bubble-bottom').addClass('mbsc-fr-bubble-top'); // Above the input

        top = anchorTop - modalHeight - arrowHeight / 2;
      } else {
        $popup.removeClass('mbsc-fr-bubble-top').addClass('mbsc-fr-bubble-bottom');
      } // Set arrow position


      $$1('.mbsc-fr-arr', $markup).css({
        left: constrain(anchorLeft + anchorWidth / 2 - (left + (modalWidth - arrowWidth) / 2), 0, arrowWidth)
      }); // Lock scroll only if popup is entirely in the viewport

      scrollLock = top > scrollTop && left > scrollLeft && top + modalHeight <= scrollTop + newHeight && left + modalWidth <= scrollLeft + newWidth;
    } else {
      left = scrollLeft;
      top = s.display == 'top' ? scrollTop : Math.max(0, scrollTop + newHeight - modalHeight);
    }

    if (needsDimensions) {
      // If top + modal height > doc height, increase doc height
      docHeight = Math.max(top + modalHeight, hasContext ? ctx.scrollHeight : $$1(document).height());
      docWidth = Math.max(left + modalWidth, hasContext ? ctx.scrollWidth : $$1(document).width());
      $persp.css({
        width: docWidth,
        height: docHeight
      }); // Check if scroll needed

      if (s.scroll && s.display == 'bubble' && (top + modalHeight + 8 > scrollTop + newHeight || anchorTop > scrollTop + newHeight || anchorTop + anchorHeight < scrollTop)) {
        $wnd.scrollTop(Math.min(anchorTop, top + modalHeight - newHeight + 8, docHeight - newHeight));
      }
    }

    css.top = Math.floor(top);
    css.left = Math.floor(left);
    $popup.css(css);
    return true;
  };
  /**
   * Show mobiscroll on focus and click event of the parameter.
   * @param {HTMLElement} elm - Events will be attached to this element.
   * @param {Function} [beforeShow=undefined] - Optional function to execute before showing mobiscroll.
   */


  that.attachShow = function (elm, beforeShow) {
    var $label,
        $elm = $$1(elm).off('.mbsc'),
        readOnly = $elm.prop('readonly');
    tapOff($elm);

    if (s.display !== 'inline') {
      if ((s.showOnFocus || s.showOnTap) && $elm.is('input,select')) {
        $elm.prop('readonly', true).on('mousedown.mbsc', function (ev) {
          // Prevent input to get focus on tap (virtual keyboard pops up on some devices)
          ev.preventDefault();
        }).on('focus.mbsc', function () {
          if (that._isVisible) {
            // Don't allow input focus if mobiscroll is being opened
            this.blur();
          }
        });
        $label = $$1('label[for="' + $elm.attr('id') + '"]');

        if (!$label.length) {
          $label = $elm.closest('label');
        }
      }

      if (!$elm.is('select')) {
        if (s.showOnFocus) {
          $elm.on('focus.mbsc', function () {
            if (!preventShow) {
              show(beforeShow, $elm);
            } else {
              preventShow = false;
            }
          });
        }

        if (s.showOnTap) {
          $elm.on('keydown.mbsc', function (ev) {
            if (ev.keyCode == 32 || ev.keyCode == 13) {
              // Space or Enter
              ev.preventDefault();
              ev.stopPropagation();
              show(beforeShow, $elm);
            }
          });
          that.tap($elm, function (ev) {
            if (ev.isMbscTap) {
              touched = true;
            }

            show(beforeShow, $elm);
          });

          if ($label && $label.length) {
            tapOff($label);
            that.tap($label, function (ev) {
              ev.preventDefault();

              if (ev.target !== $elm[0]) {
                show(beforeShow, $elm);
              }
            });
          }
        }
      }

      elmList.push({
        readOnly: readOnly,
        el: $elm,
        lbl: $label
      });
    }
  };
  /**
   * Set button handler.
   */


  that.select = function () {
    if (isModal) {
      that.hide(false, 'set', false, set);
    } else {
      set();
    }
  };
  /**
   * Cancel and hide the scroller instance.
   */


  that.cancel = function () {
    if (isModal) {
      that.hide(false, 'cancel', false, cancel);
    } else {
      cancel();
    }
  };
  /**
   * Clear button handler.
   */


  that.clear = function () {
    that._clearValue();

    trigger('onClear');

    if (isModal && that._isVisible && !that.live) {
      that.hide(false, 'clear', false, clear);
    } else {
      clear();
    }
  };
  /**
   * Enables the scroller and the associated input.
   */


  that.enable = function () {
    s.disabled = false;
    $$1.each(elmList, function (i, v) {
      if (v.el.is('input,select')) {
        v.el[0].disabled = false;
      }
    });
  };
  /**
   * Disables the scroller and the associated input.
   */


  that.disable = function () {
    s.disabled = true;
    $$1.each(elmList, function (i, v) {
      if (v.el.is('input,select')) {
        v.el[0].disabled = true;
      }
    });
  };
  /**
   * Shows the scroller instance.
   * @param {Boolean} prevAnim - Prevent animation if true
   * @param {Boolean} prevFocus - Prevent focusing if true
   */


  that.show = function (prevAnim, prevFocus) {
    var hasButtons, html, scrollLeft, scrollTop;

    if (s.disabled || that._isVisible) {
      return;
    } // Parse value from input


    that._readValue();

    if (trigger('onBeforeShow') === false) {
      return false;
    }

    $activeElm = null;
    doAnim = s.animate;
    buttons = s.buttons || [];
    needsDimensions = hasContext || s.display == 'bubble';
    needsLock = needsFixed && !needsDimensions && s.scrollLock;
    hasButtons = buttons.length > 0; //touched = false;

    if (doAnim !== false) {
      if (s.display == 'top') {
        doAnim = doAnim || 'slidedown';
      } else if (s.display == 'bottom') {
        doAnim = doAnim || 'slideup';
      } else if (s.display == 'center' || s.display == 'bubble') {
        doAnim = doAnim || 'pop';
      }
    }

    if (isModal) {
      wndWidth = 0;
      wndHeight = 0;

      if (needsLock && !$lock.hasClass('mbsc-fr-lock-ios')) {
        //$lock.scrollTop(0);
        ctx.mbscScrollTop = scrollTop = Math.max(0, $wnd.scrollTop());
        ctx.mbscScrollLeft = scrollLeft = Math.max(0, $wnd.scrollLeft());
        $ctx.css({
          top: -scrollTop + 'px',
          left: -scrollLeft + 'px'
        });
      }

      $lock.addClass((s.scrollLock ? 'mbsc-fr-lock' : '') + (needsLock ? ' mbsc-fr-lock-ios' : '') + (hasContext ? ' mbsc-fr-lock-ctx' : '')); // Hide virtual keyboard

      if ($$1(document.activeElement).is('input,textarea')) {
        document.activeElement.blur();
      } // Save active instance to previous


      prevInst = mobiscroll.activeInstance; // Set active instance

      mobiscroll.activeInstance = that; // Keep track of modals opened per context

      ctx.mbscModals = (ctx.mbscModals || 0) + 1;

      if (needsLock) {
        ctx.mbscIOSLock = (ctx.mbscIOSLock || 0) + 1;
      }

      if (s.scrollLock) {
        ctx.mbscLock = (ctx.mbscLock || 0) + 1;
      }
    } // Create wheels containers


    html = '<div lang="' + s.lang + '" class="mbsc-fr mbsc-' + s.theme + (s.baseTheme ? ' mbsc-' + s.baseTheme : '') + ' mbsc-fr-' + s.display + ' ' + (s.cssClass || '') + ' ' + (s.compClass || '') + (that._isLiquid ? ' mbsc-fr-liq' : '') + (isModal ? ' mbsc-fr-pos' + (s.showOverlay ? '' : ' mbsc-fr-no-overlay') : '') + (isPointer ? ' mbsc-fr-pointer' : '') + (halfBorder ? ' mbsc-fr-hb' : '') + (touched ? '' : ' mbsc-no-touch') + (needsLock ? ' mbsc-platform-ios' : '') + (hasButtons ? buttons.length >= 3 ? ' mbsc-fr-btn-block ' : '' : ' mbsc-fr-nobtn') + '">' + (isModal ? '<div class="mbsc-fr-persp">' + (s.showOverlay ? '<div class="mbsc-fr-overlay"></div>' : '') + // Overlay
    '<div role="dialog" class="mbsc-fr-scroll">' : '') + '<div class="mbsc-fr-popup' + (s.rtl ? ' mbsc-rtl' : ' mbsc-ltr') + (s.headerText ? ' mbsc-fr-has-hdr' : '') + '">' + ( // Popup
    s.display === 'bubble' ? '<div class="mbsc-fr-arr-w"><div class="mbsc-fr-arr-i"><div class="mbsc-fr-arr"></div></div></div>' : '') + ( // Bubble arrow
    isModal ? '<div class="mbsc-fr-focus" tabindex="-1"></div>' : '') + '<div class="mbsc-fr-w">' + ( // Popup content
    //'<div aria-live="assertive" class="mbsc-fr-aria mbsc-fr-hdn"></div>' +
    s.headerText ? '<div class="mbsc-fr-hdr">' + (isString(s.headerText) ? s.headerText : '') + '</div>' : '') + // Header
    '<div class="mbsc-fr-c">'; // Wheel group container

    html += that._generateContent();
    html += '</div>';

    if (hasButtons) {
      var b,
          i,
          j,
          l = buttons.length;
      html += '<div class="mbsc-fr-btn-cont">';

      for (i = 0; i < buttons.length; i++) {
        j = s.btnReverse ? l - i - 1 : i;
        b = buttons[j];
        b = isString(b) ? that.buttons[b] : b;

        if (b.handler === 'set') {
          b.parentClass = 'mbsc-fr-btn-s';
        }

        if (b.handler === 'cancel') {
          b.parentClass = 'mbsc-fr-btn-c';
        }

        html += '<div' + (s.btnWidth ? ' style="width:' + 100 / buttons.length + '%"' : '') + ' class="mbsc-fr-btn-w ' + (b.parentClass || '') + '">' + '<div tabindex="0" role="button" class="mbsc-fr-btn' + j + ' mbsc-fr-btn-e ' + (b.cssClass === undefined ? s.btnClass : b.cssClass) + (b.icon ? ' mbsc-ic mbsc-ic-' + b.icon : '') + '">' + (b.text || '') + '</div></div>';
      }

      html += '</div>';
    }

    html += '</div></div></div></div>' + (isModal ? '</div></div>' : '');
    $markup = $$1(html);
    $persp = $$1('.mbsc-fr-persp', $markup);
    $overlay = $$1('.mbsc-fr-scroll', $markup);
    $wrapper = $$1('.mbsc-fr-w', $markup);
    $popup = $$1('.mbsc-fr-popup', $markup);
    $header = $$1('.mbsc-fr-hdr', $markup); //$ariaDiv = $('.mbsc-fr-aria', $markup);

    markup = $markup[0];
    overlay = $overlay[0];
    popup = $popup[0];
    that._activeElm = $$1('.mbsc-fr-focus', $markup)[0];
    that._markup = $markup;
    that._isVisible = true;
    that.markup = markup;

    that._markupReady($markup);

    trigger('onMarkupReady', {
      target: markup
    }); // Attach events

    if (isModal) {
      // Enter / ESC
      $$1(window).on('keydown', onWndKeyDown); // Prevent scroll if not specified otherwise

      if (s.scrollLock) {
        listen(document, 'touchmove', onScroll, {
          passive: false
        });
        listen(document, 'mousewheel', onScroll, {
          passive: false
        });
        listen(document, 'wheel', onScroll, {
          passive: false
        });
      }

      if (s.focusTrap) {
        $wnd.on('focusin', onFocus);
      }
    }

    if (isModal) {
      // Wait for the toolbar and addressbar to appear on iOS
      setTimeout(function () {
        insertMarkup(prevAnim, prevFocus);
      }, needsLock ? 100 : 0);
    } else {
      insertMarkup(prevAnim, prevFocus);
    }
  };
  /**
   * Hides the scroller instance.
   */


  that.hide = function (prevAnim, btn, force, callback) {
    function onAnimEnd() {
      $markup.off(animEnd, onAnimEnd);
      onHide(prevAnim);
    } // If onClose handler returns false, prevent hide


    if (!that._isVisible || !force && !that._isValid && btn == 'set' || !force && trigger('onBeforeClose', {
      valueText: that._tempValue,
      button: btn
    }) === false) {
      return false;
    }

    that._isVisible = false;

    if (observer) {
      observer.detach();
      observer = null;
    }

    if (isModal) {
      if ($$1(document.activeElement).is('input,textarea') && popup.contains(document.activeElement)) {
        document.activeElement.blur();
      }

      if (mobiscroll.activeInstance == that) {
        mobiscroll.activeInstance = prevInst;
      }

      $$1(window).off('keydown', onWndKeyDown);
      $wnd.off('focusin', onFocus);
      unlisten(document, 'touchmove', onScroll, {
        passive: false
      });
      unlisten(document, 'mousewheel', onScroll, {
        passive: false
      });
      unlisten(document, 'wheel', onScroll, {
        passive: false
      });
    } // Hide wheels and overlay


    if ($markup) {
      if (isModal && isInserted && doAnim && !prevAnim) {
        $markup.addClass('mbsc-anim-out mbsc-anim-trans mbsc-anim-trans-' + doAnim).on(animEnd, onAnimEnd).find('.mbsc-fr-popup').addClass('mbsc-anim-' + doAnim);
      } else {
        onHide(prevAnim);
      }

      that._detachEvents($markup);
    }

    if (callback) {
      callback();
    } // For validation


    $elm.trigger('blur');
    trigger('onClose', {
      valueText: that._value
    });
  }; // that.ariaMessage = function (txt) {
  //     $ariaDiv.html('');
  //     setTimeout(function () {
  //         $ariaDiv.html(txt);
  //     }, 100);
  // };

  /**
   * Return true if the scroller is currently visible.
   */


  that.isVisible = function () {
    return that._isVisible;
  }; // Protected functions to override


  that.setVal = noop;
  that.getVal = noop;
  that._generateContent = noop;
  that._attachEvents = noop;
  that._detachEvents = noop;
  that._readValue = noop;
  that._clearValue = noop;
  that._fillValue = noop;
  that._markupReady = noop;
  that._markupInserted = noop;
  that._markupRemove = noop;
  that._position = noop;
  that.__processSettings = noop;
  that.__init = noop;
  that.__destroy = noop; // Generic frame functions

  /**
   * Destroys the mobiscroll instance.
   */

  that._destroy = function () {
    // Force hide without animation
    that.hide(true, false, true);
    $elm.off('.mbsc');
    tapOff($elm); // Remove all events from elements

    $$1.each(elmList, function (i, v) {
      v.el.off('.mbsc').prop('readonly', v.readOnly);
      tapOff(v.el);

      if (v.lbl) {
        v.lbl.off('.mbsc');
        tapOff(v.lbl);
      }
    });

    that.__destroy();
  };

  that._updateHeader = function () {
    var t = s.headerText,
        txt = t ? typeof t === 'function' ? t.call(el, that._tempValue) : t.replace(/\{value\}/i, that._tempValue) : '';
    $header.html(txt || '&nbsp;');
  };

  that._getRespCont = function () {
    hasContext = s.context != 'body';
    $wnd = $$1(hasContext ? s.context : window);
    return s.display == 'inline' ? $elm.is('div') ? $elm : $elm.parent() : $wnd;
  };

  that._processSettings = function (resp) {
    var b, i;

    that.__processSettings(resp);

    isPointer = !s.touchUi;

    if (isPointer) {
      s.display = resp.display || settings.display || 'bubble';
      s.buttons = resp.buttons || settings.buttons || [];
      s.showOverlay = resp.showOverlay || settings.showOverlay || false;
    } // Add default buttons


    s.buttons = s.buttons || (s.display !== 'inline' ? ['cancel', 'set'] : []); // Hide header text in inline mode by default

    s.headerText = s.headerText === undefined ? s.display !== 'inline' ? '{value}' : false : s.headerText;
    buttons = s.buttons || [];
    isModal = s.display !== 'inline';
    $ctx = $$1(s.context);
    $lock = hasContext ? $ctx : $$1('body,html');
    ctx = $ctx[0];
    that.live = true; // If no set button is found, live mode is activated

    for (i = 0; i < buttons.length; i++) {
      b = buttons[i];

      if (b == 'ok' || b == 'set' || b.handler == 'set') {
        that.live = false;
      }
    }

    that.buttons.set = {
      text: s.setText,
      icon: s.setIcon,
      handler: 'set'
    };
    that.buttons.cancel = {
      text: s.cancelText,
      icon: s.cancelIcon,
      handler: 'cancel'
    };
    that.buttons.close = {
      text: s.closeText,
      icon: s.closeIcon,
      handler: 'cancel'
    };
    that.buttons.clear = {
      text: s.clearText,
      icon: s.clearIcon,
      handler: 'clear'
    };
    that._isInput = $elm.is('input');
  };
  /**
   * Scroller initialization.
   */


  that._init = function (newSettings) {
    var wasVisible = that._isVisible,
        wasReady = wasVisible && !$markup.hasClass('mbsc-fr-pos');

    if (wasVisible) {
      that.hide(true, false, true);
    } // Unbind all events (if re-init)


    $elm.off('.mbsc');
    tapOff($elm);

    that.__init(newSettings);

    that._isLiquid = s.layout == 'liquid';

    if (isModal) {
      that._readValue();

      if (!that._hasContent && !s.skipShow) {
        that.attachShow($elm);
      }

      if (wasVisible) {
        that.show(wasReady);
      }
    } else {
      that.show();
    }

    $elm.removeClass('mbsc-cloak').filter('input, select, textarea').on('change.mbsc', function () {
      if (!that._preventChange) {
        that.setVal($elm.val(), true, false);
      }

      that._preventChange = false;
    });
  };

  that.buttons = {};
  that.handlers = {
    set: that.select,
    cancel: that.cancel,
    clear: that.clear
  };
  that._value = null;
  that._isValid = true;
  that._isVisible = false; // Constructor

  s = that.settings;
  trigger = that.trigger;

  if (!inherit) {
    that.init();
  }
};
Frame.prototype._defaults = {
  // Localization
  lang: 'en',
  setText: 'Set',
  selectedText: '{count} selected',
  closeText: 'Close',
  cancelText: 'Cancel',
  clearText: 'Clear',
  // Options
  context: 'body',
  maxPopupWidth: 600,
  disabled: false,
  closeOnOverlayTap: true,
  showOnFocus: isAndroid || isIOS,
  // Needed for ion-input
  showOnTap: true,
  display: 'center',
  scroll: true,
  scrollLock: true,
  showOverlay: true,
  tap: true,
  touchUi: true,
  btnClass: 'mbsc-fr-btn',
  btnWidth: true,
  focusTrap: true,
  focusOnClose: !isIOS8 // Temporary for iOS8

};
classes.Frame = Frame;
themes.frame.mobiscroll = {
  headerText: false,
  btnWidth: false
};
themes.scroller.mobiscroll = extend$1({}, themes.frame.mobiscroll, {
  rows: 5,
  showLabel: false,
  selectedLineBorder: 1,
  weekDays: 'min',
  checkIcon: 'ion-ios7-checkmark-empty',
  btnPlusClass: 'mbsc-ic mbsc-ic-arrow-down5',
  btnMinusClass: 'mbsc-ic mbsc-ic-arrow-up5',
  btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left5',
  btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right5'
});

if (isBrowser) {
  // Prevent re-show on window focus
  $$1(window).on('focus', function () {
    if ($activeElm) {
      preventShow = true;
    }
  });
}

var Popup = function Popup(el, settings, inherit) {
  function addContent($m) {
    /* TRIAL */
    if (!$$1('.mbsc-fr-c', $m).hasClass('mbsc-wdg-c')
    /* TRIALCOND */
    ) {
        $$1('.mbsc-fr-c', $m).addClass('mbsc-wdg-c').append($elm.show());

        if (!$$1('.mbsc-w-p', $m).length) {
          $$1('.mbsc-fr-c', $m).addClass('mbsc-w-p');
        }
      }
  }

  var s,
      $prev,
      $elm = $$1(el),
      that = this; // Call the parent constructor

  Frame.call(this, el, settings, true);
  /* TRIALFUNC */

  that._generateContent = function () {
    return '';
  };

  that._markupReady = function ($m) {
    if (s.display != 'inline') {
      addContent($m);
    }
  };

  that._markupInserted = function ($m) {
    if (s.display == 'inline') {
      addContent($m);
    }

    $m.trigger('mbsc-enhance', [{
      theme: s.theme,
      lang: s.lang
    }]);
  };

  that._markupRemove = function () {
    $elm.hide();

    if ($prev && $prev.parent().length) {
      $prev.after($elm);
    }
  };

  that.__processSettings = function () {
    s = that.settings;
    that.buttons.ok = {
      text: s.okText,
      icon: s.okIcon,
      handler: 'set'
    };
    s.buttons = s.buttons || (s.display == 'inline' ? [] : ['ok']);

    if (!$prev && $elm.parent().length) {
      $prev = $$1(document.createComment('popup'));
      $elm.before($prev);
    }

    $elm.hide();
  }; // Constructor


  if (!inherit) {
    that.init();
  }
};
Popup.prototype = {
  _hasDef: true,
  _hasTheme: true,
  _hasContent: true,
  _hasLang: true,
  _responsive: true,
  _class: 'popup',
  _defaults: extend$1({}, Frame.prototype._defaults, {
    compClass: 'mbsc-wdg',
    okText: 'OK',
    headerText: false
  })
};
classes.Popup = Popup;
classes.Widget = Popup;
mobiscroll.themes.popup = mobiscroll.themes.frame;

var hasPromise = isBrowser && !!window.Promise;
var popupQueue = [];
var notificationQueue = [];
var activeNotification;

function showPopup(popup) {
  if (!popupQueue.length) {
    popup.show();
  }

  popupQueue.push(popup);
}

function showNotification(notification) {
  var isAny = notificationQueue.length;
  notificationQueue.push(notification); // Only show notification if no popup is visible
  // otherwise postpone it until popup is closed

  if (!popupQueue.length) {
    // If there's a visible notification, hide it.
    // The notification will be shown after hide animation is complete
    if (isAny) {
      notificationQueue[0].hide();
    } else {
      // Prevent focus on show for notifications
      notification.show(false, true);
    }
  }
}

function getSettings(queue, settings, resolve, more) {
  //const active = mobiscroll.activeInstance;
  return extend$1({
    display: settings.display || 'center',
    cssClass: 'mbsc-alert',
    okText: settings.okText,
    cancelText: settings.cancelText,
    context: settings.context,
    theme: settings.theme,
    closeOnOverlayTap: false,
    onBeforeClose: function onBeforeClose() {
      queue.shift();
    },
    onHide: function onHide(ev, inst) {
      //mobiscroll.activeInstance = active;
      if (resolve) {
        resolve(inst._resolve);
      }

      if (settings.callback) {
        settings.callback(inst._resolve);
      }

      if (inst) {
        inst.destroy();
      } // Show next


      if (popupQueue.length) {
        popupQueue[0].show();
      } else if (notificationQueue.length) {
        // Prevent focus on show for notifications
        notificationQueue[0].show(false, true);
      }
    }
  }, more);
}

function getMessage(settings) {
  return (settings.title ? '<h2>' + settings.title + '</h2>' : '') + '<p>' + (settings.message || '') + '</p>';
}

function showAlert(popup, settings, resolve) {
  var inst = new Popup(popup, getSettings(popupQueue, settings, resolve));
  showPopup(inst);
}

function showConfirm(popup, settings, resolve) {
  var inst = new Popup(popup, getSettings(popupQueue, settings, resolve, {
    buttons: ['cancel', 'ok'],
    onSet: function onSet() {
      inst._resolve = true;
    }
  }));
  inst._resolve = false;
  showPopup(inst);
}

function showPrompt(popup, settings, resolve) {
  var input, label;
  var inst = new Popup(popup, getSettings(popupQueue, settings, resolve, {
    buttons: ['cancel', 'ok'],
    onMarkupReady: function onMarkupReady(event, inst) {
      var s = inst.settings;
      label = inst._markup.find('label');
      label.addClass('mbsc-' + s.theme + (s.baseTheme ? ' mbsc-' + s.baseTheme : ''));
      input = inst._markup.find('input')[0];
      setTimeout(function () {
        input.focus();
        input.setSelectionRange(0, input.value.length);
      }, 300);
    },
    onSet: function onSet() {
      inst._resolve = input.value;
    }
  }));
  inst._resolve = null;
  showPopup(inst);
}

function showSnackbar(popup, settings, resolve, cssClass, animation) {
  var notificationTimer;
  var inst = new Popup(popup, getSettings(notificationQueue, settings, resolve, {
    display: settings.display || 'bottom',
    animate: animation,
    cssClass: (cssClass || 'mbsc-snackbar') + (settings.color ? ' mbsc-' + settings.color : ''),
    scrollLock: false,
    focusTrap: false,
    buttons: [],
    onMarkupReady: function onMarkupReady(event, inst) {
      var s = inst.settings;

      var button = inst._markup.find('button');

      button.addClass('mbsc-' + s.theme + (s.baseTheme ? ' mbsc-' + s.baseTheme : ''));
    },
    onShow: function onShow(ev, inst) {
      activeNotification = inst;

      if (settings.duration !== false) {
        notificationTimer = setTimeout(function () {
          if (inst) {
            inst.hide();
          }
        }, settings.duration || 3000);
      }

      if (settings.button) {
        inst.tap($$1('.mbsc-snackbar-btn', ev.target), function () {
          inst.hide();

          if (settings.button.action) {
            settings.button.action.call(this);
          }
        });
      }
    },
    onClose: function onClose() {
      activeNotification = null;
      clearTimeout(notificationTimer);
    }
  }));
  showNotification(inst);
}

function showToast(popup, settings, resolve) {
  showSnackbar(popup, settings, resolve, 'mbsc-toast', 'fade');
}

function show(func, popup, settings) {
  var p;

  if (hasPromise) {
    p = new Promise(function (resolve) {
      func(popup, settings, resolve);
    });
  } else {
    func(popup, settings);
  }

  return p;
}

mobiscroll.alert = function (settings) {
  var popup = document.createElement('div');
  popup.innerHTML = getMessage(settings);
  return show(showAlert, popup, settings);
};

mobiscroll.confirm = function (settings) {
  var popup = document.createElement('div');
  popup.innerHTML = getMessage(settings);
  return show(showConfirm, popup, settings);
};

mobiscroll.prompt = function (settings) {
  var popup = document.createElement('div');
  popup.innerHTML = getMessage(settings) + '<label class="mbsc-input">' + (settings.label ? '<span class="mbsc-label">' + settings.label + '</span>' : '') + '<input class="mbsc-control" tabindex="0" type="' + (settings.inputType || 'text') + '" placeholder="' + (settings.placeholder || '') + '" value="' + (settings.value || '') + '">' + '</label>';
  return show(showPrompt, popup, settings);
};

mobiscroll.snackbar = function (settings) {
  var popup = document.createElement('div'),
      btn = settings.button;
  popup.innerHTML = '<div class="mbsc-snackbar-cont"><div class="mbsc-snackbar-msg">' + (settings.message || '') + '</div>' + (btn ? '<button class="mbsc-snackbar-btn mbsc-btn mbsc-btn-flat">' + (btn.icon ? '<span class="mbsc-ic ' + (btn.text ? 'mbsc-btn-ic ' : '') + 'mbsc-ic-' + btn.icon + '"></span>' : '') + (btn.text || '') + '</button>' : '') + '</div>';
  return show(showSnackbar, popup, settings);
};

mobiscroll.toast = function (settings) {
  var popup = document.createElement('div');
  popup.innerHTML = '<div class="mbsc-toast-msg">' + (settings.message || '') + '</div>';
  return show(showToast, popup, settings);
};

mobiscroll.notification = {
  dismiss: function dismiss() {
    if (activeNotification) {
      activeNotification.hide();
    }
  }
};

var halfBorder$1 = os == 'ios' && majorVersion > 7;
var Form = function Form(el, settings) {
  var s,
      cssClass = '',
      $ctx = $$1(el),
      controls = {},
      that = this;

  function touched() {
    $ctx.removeClass('mbsc-no-touch');
  } // Call the parent constructor


  Base.call(this, el, settings, true);

  that.refresh = function (shallow) {
    if (s.enhance) {
      initControls($ctx, controls, s, shallow);
    }
  };
  /**
   * Form initialization.
   */


  that._init = function () {
    if (!mobiscroll.themes.form[s.theme]) {
      s.theme = 'mobiscroll';
    }

    if (!$ctx.hasClass('mbsc-form')) {
      $ctx.show();
      listen($ctx[0], 'touchstart', touched, {
        passive: true
      });
    }

    if (cssClass) {
      $ctx.removeClass(cssClass);
    } // --- TRIAL SERVER CODE START ---


    cssClass = 'mbsc-form mbsc-no-touch mbsc-' + s.theme + (halfBorder$1 ? ' mbsc-form-hb' : '') + (s.baseTheme ? ' mbsc-' + s.baseTheme : '') + (s.rtl ? ' mbsc-rtl' : ' mbsc-ltr') + (s.inputStyle == 'box' ? ' mbsc-form-box' : '') + (s.inputStyle == 'outline' ? ' mbsc-form-outline' : ''); // --- TRIAL SERVER CODE END ---

    $ctx.addClass(cssClass).removeClass('mbsc-cloak');
    that.refresh();
  };
  /**
   * Destroys the mobiscroll instance.
   */


  that._destroy = function () {
    $ctx.removeClass(cssClass);
    unlisten($ctx[0], 'touchstart', touched, {
      passive: true
    });

    for (var id in controls) {
      controls[id].destroy();
    }
  };
  /**
   * Object with the underlying form control instances
   * keys are the element id's
   */


  that.controls = controls; // Constructor

  s = that.settings;
  that.init();
}; // Extend defaults

Form.prototype = {
  _hasDef: true,
  _hasTheme: true,
  _hasLang: true,
  _class: 'form',
  _defaults: {
    tap: hasGhostClick,
    stopProp: true,
    rtl: false,
    enhance: true
  }
};
classes.Form = Form; // Init mbsc-form elements on page load

autoInit('[mbsc-enhance],[mbsc-form]', Form, true);

var MbscForm = (function (_super) {
    __extends(MbscForm, _super);
    function MbscForm(initialElem, _formService, zone) {
        var _this = _super.call(this, initialElem, zone) || this;
        _this._formService = _formService;
        _this.enhance = false;
        return _this;
    }
    MbscForm.prototype.ngOnInit = function () {
        this.optionsObj = extend$1({}, this.options, this.inlineOptionsObj);
        this._formService.options = this.optionsObj;
    };
    MbscForm.prototype.initControl = function () {
        var opt = this.options;
        if (opt && opt.enhance === undefined) {
            opt.enhance = false;
        }
        var options = extend$1({}, opt, this.inlineOptionsObj);
        this.instance = new Form(this.rootElem.nativeElement, options);
    };
    MbscForm.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, },
        { type: NgZone, },
    ]; };
    MbscForm.propDecorators = {
        'options': [{ type: Input$1, args: ['options',] },],
        'enhance': [{ type: Input$1 },],
        'context': [{ type: Input$1 },],
        'inputStyle': [{ type: Input$1, args: ['input-style',] },],
        'labelStyle': [{ type: Input$1, args: ['label-style',] },],
        'rootElem': [{ type: ViewChild, args: ['rootElement', { static: false },] },],
    };
MbscForm.ɵfac = function MbscForm_Factory(t) { return new (t || MbscForm)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscForm.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscForm, selectors: [["mbsc-form"]], viewQuery: function MbscForm_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c2, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rootElem = _t.first);
    } }, inputs: { options: "options", enhance: "enhance", context: "context", inputStyle: ["input-style", "inputStyle"], labelStyle: ["label-style", "labelStyle"] }, exportAs: ["mobiscroll"], features: [ɵngcc0.ɵɵProvidersFeature([MbscOptionsService]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 3, vars: 0, consts: [["rootElement", ""]], template: function MbscForm_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", null, 0);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscForm, [{
        type: Component,
        args: [{
                selector: 'mbsc-form',
                template: "<div #rootElement><ng-content></ng-content></div>",
                providers: [MbscOptionsService],
                exportAs: 'mobiscroll'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService }, { type: ɵngcc0.NgZone }]; }, { options: [{
            type: Input$1,
            args: ['options']
        }], enhance: [{
            type: Input$1
        }], context: [{
            type: Input$1
        }], inputStyle: [{
            type: Input$1,
            args: ['input-style']
        }], labelStyle: [{
            type: Input$1,
            args: ['label-style']
        }], rootElem: [{
            type: ViewChild,
            args: ['rootElement', { static: false }]
        }] }); })();
    return MbscForm;
}(MbscBase));
var MbscTextarea = (function (_super) {
    __extends(MbscTextarea, _super);
    function MbscTextarea(initialElem, _formService, _inputService, _control, zone) {
        var _this = _super.call(this, initialElem, _formService, _inputService, _control, zone) || this;
        _this._inputService = _inputService;
        _inputService.input = _this;
        return _this;
    }
    MbscTextarea.prototype.initControl = function () {
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new TextArea(this._initElem.nativeElement, options);
    };
    MbscTextarea.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: MbscInputService, },
        { type: NgControl, decorators: [{ type: Optional },] },
        { type: NgZone, },
    ]; };
    MbscTextarea.propDecorators = {
        'rows': [{ type: Input$1 },],
        'wrap': [{ type: Input$1 },],
    };
MbscTextarea.ɵfac = function MbscTextarea_Factory(t) { return new (t || MbscTextarea)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscTextarea.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscTextarea, selectors: [["mbsc-textarea"]], hostAttrs: [1, "mbsc-control-ng"], inputs: { rows: "rows", wrap: "wrap" }, features: [ɵngcc0.ɵɵProvidersFeature([MbscInputService]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 30, consts: [[1, "mbsc-input-wrap"], [3, "placeholder", "ngModel", "disabled", "readonly", "ngModelChange", "blur"], ["initElement", ""], ["class", "mbsc-err-msg", 4, "ngIf"], [1, "mbsc-err-msg"]], template: function MbscTextarea_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label");
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementStart(2, "span", 0);
        ɵngcc0.ɵɵelementStart(3, "textarea", 1, 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function MbscTextarea_Template_textarea_ngModelChange_3_listener($event) { return ctx.innerValue = $event; })("blur", function MbscTextarea_Template_textarea_blur_3_listener($event) { return ctx.onTouch($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(5, MbscTextarea_span_5_Template, 2, 1, "span", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("mbsc-err", ctx.error)("mbsc-input-box", ctx.inputStyle == "box")("mbsc-input-outline", ctx.inputStyle == "outline")("mbsc-label-stacked", ctx.labelStyle == "stacked")("mbsc-label-inline", ctx.labelStyle == "inline")("mbsc-label-floating", ctx.labelStyle == "floating");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("placeholder", ctx.placeholder)("ngModel", ctx.innerValue)("disabled", ctx.disabled)("readonly", ctx._readonly);
        ɵngcc0.ɵɵattribute("name", ctx.name)("rows", ctx.rows)("wrap", ctx.wrap)("minlength", ctx.minlength)("maxlength", ctx.maxlength)("autocomplete", ctx.autocomplete)("autocapitalize", ctx.autocapitalize)("autocorrect", ctx.autocorrect)("spellcheck", ctx.spellcheck)("autofocus", ctx.autofocus)("required", ctx.required)("data-icon", ctx.icon ? ctx.icon : null)("data-icon-align", ctx.iconAlign ? ctx.iconAlign : null);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.error && ctx.errorMessage);
    } }, directives: [ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc1.MinLengthValidator, ɵngcc1.MaxLengthValidator, ɵngcc1.RequiredValidator, ɵngcc2.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscTextarea, [{
        type: Component,
        args: [{
                selector: 'mbsc-textarea',
                host: { 'class': 'mbsc-control-ng' },
                template: "\n            <label \n                [class.mbsc-err]=\"error\"\n                [class.mbsc-input-box]=\"inputStyle == 'box'\"\n                [class.mbsc-input-outline]=\"inputStyle == 'outline'\"\n                [class.mbsc-label-stacked]=\"labelStyle == 'stacked'\"\n                [class.mbsc-label-inline]=\"labelStyle == 'inline'\"\n                [class.mbsc-label-floating]=\"labelStyle == 'floating'\"\n            >\n            <ng-content></ng-content>\n            <span class=\"mbsc-input-wrap\">\n                <textarea #initElement [placeholder]=\"placeholder\" [(ngModel)]=\"innerValue\" (blur)=\"onTouch($event)\"\n                    [attr.name]=\"name\"\n                    [attr.rows]=\"rows\"\n                    [attr.wrap]=\"wrap\"\n                    [attr.minlength]=\"minlength\"\n                    [attr.maxlength]=\"maxlength\"\n                    [attr.autocomplete]=\"autocomplete\" \n                    [attr.autocapitalize]=\"autocapitalize\"\n                    [attr.autocorrect]=\"autocorrect\"\n                    [attr.spellcheck]=\"spellcheck\"\n                    [attr.autofocus]=\"autofocus\"\n                    [attr.required]=\"required\"\n                    [attr.data-icon]=\"icon ? icon : null\"\n                    [attr.data-icon-align]=\"iconAlign ? iconAlign : null\"\n                    [disabled]=\"disabled\"\n                    [readonly]=\"_readonly\"></textarea>\n                <span *ngIf=\"error && errorMessage\" class=\"mbsc-err-msg\">{{errorMessage}}</span>\n            </span>\n        </label>\n    ",
                providers: [MbscInputService]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: MbscInputService }, { type: ɵngcc1.NgControl, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.NgZone }]; }, { rows: [{
            type: Input$1
        }], wrap: [{
            type: Input$1
        }] }); })();
    return MbscTextarea;
}(MbscInputBase));
var MbscDropdown = (function (_super) {
    __extends(MbscDropdown, _super);
    function MbscDropdown(hostElem, formService, _inputService, control, zone) {
        var _this = _super.call(this, hostElem, formService, _inputService, control, zone) || this;
        _this._inputService = _inputService;
        _inputService.input = _this;
        return _this;
    }
    Object.defineProperty(MbscDropdown.prototype, "value", {
        set: function (v) {
            var _this = this;
            this._value = v;
            setTimeout(function () {
                _this.instance._setText();
            });
        },
        enumerable: true,
        configurable: true
    });
    MbscDropdown.prototype.initControl = function () {
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new Select(this._initElem.nativeElement, options);
        var that = this;
        setTimeout(function () {
            that.instance._setText();
        });
    };
    MbscDropdown.prototype.writeValue = function (v) {
        this._value = v;
        if (this.instance) {
            var that_1 = this;
            setTimeout(function () {
                that_1.instance._setText();
            });
        }
    };
    MbscDropdown.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: MbscInputService, },
        { type: NgControl, decorators: [{ type: Optional },] },
        { type: NgZone, },
    ]; };
    MbscDropdown.propDecorators = {
        'label': [{ type: Input$1 },],
        'icon': [{ type: Input$1 },],
        'iconAlign': [{ type: Input$1, args: ['icon-align',] },],
        'value': [{ type: Input$1 },],
        'inputStyle': [{ type: Input$1, args: ['input-style',] },],
        'labelStyle': [{ type: Input$1, args: ['label-style',] },],
    };
MbscDropdown.ɵfac = function MbscDropdown_Factory(t) { return new (t || MbscDropdown)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscDropdown.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscDropdown, selectors: [["mbsc-dropdown"]], hostAttrs: [1, "mbsc-control-ng"], inputs: { value: "value", label: "label", icon: "icon", iconAlign: ["icon-align", "iconAlign"], inputStyle: ["input-style", "inputStyle"], labelStyle: ["label-style", "labelStyle"] }, features: [ɵngcc0.ɵɵProvidersFeature([MbscInputService]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 7, vars: 19, consts: [[1, "mbsc-input-wrap"], [3, "ngModel", "disabled", "ngModelChange", "blur"], ["initElement", ""], ["class", "mbsc-err-msg", 4, "ngIf"], [1, "mbsc-err-msg"]], template: function MbscDropdown_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label");
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementStart(2, "span", 0);
        ɵngcc0.ɵɵelementStart(3, "select", 1, 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function MbscDropdown_Template_select_ngModelChange_3_listener($event) { return ctx.innerValue = $event; })("blur", function MbscDropdown_Template_select_blur_3_listener($event) { return ctx.onTouch($event); });
        ɵngcc0.ɵɵprojection(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(6, MbscDropdown_span_6_Template, 2, 1, "span", 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("mbsc-err", ctx.error)("mbsc-input-box", ctx.inputStyle == "box")("mbsc-input-outline", ctx.inputStyle == "outline")("mbsc-label-stacked", ctx.labelStyle == "stacked")("mbsc-label-inline", ctx.labelStyle == "inline")("mbsc-label-floating", ctx.labelStyle == "floating");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.label, " ");
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngModel", ctx.innerValue)("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("name", ctx.name)("data-icon", ctx.icon ? ctx.icon : null)("data-icon-align", ctx.iconAlign ? ctx.iconAlign : null);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.error && ctx.errorMessage);
    } }, directives: [ɵngcc1.SelectControlValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc2.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscDropdown, [{
        type: Component,
        args: [{
                selector: 'mbsc-dropdown',
                host: { 'class': 'mbsc-control-ng' },
                template: "\n            <label \n                [class.mbsc-err]=\"error\"\n                [class.mbsc-input-box]=\"inputStyle == 'box'\"\n                [class.mbsc-input-outline]=\"inputStyle == 'outline'\"\n                [class.mbsc-label-stacked]=\"labelStyle == 'stacked'\"\n                [class.mbsc-label-inline]=\"labelStyle == 'inline'\"\n                [class.mbsc-label-floating]=\"labelStyle == 'floating'\"\n            >\n            {{label}}\n            <span class=\"mbsc-input-wrap\">\n                <select #initElement\n                    [(ngModel)]=\"innerValue\" \n                    [attr.name]=\"name\"\n                    [attr.data-icon]=\"icon ? icon : null\"\n                    [attr.data-icon-align]=\"iconAlign ? iconAlign : null\"\n                    [disabled]=\"disabled\"\n                    (blur)=\"onTouch($event)\">\n                    <ng-content></ng-content>\n                </select>\n                <span *ngIf=\"error && errorMessage\" class=\"mbsc-err-msg\">{{errorMessage}}</span>\n            </span>\n        </label>\n    ",
                providers: [MbscInputService]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: MbscInputService }, { type: ɵngcc1.NgControl, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.NgZone }]; }, { value: [{
            type: Input$1
        }], label: [{
            type: Input$1
        }], icon: [{
            type: Input$1
        }], iconAlign: [{
            type: Input$1,
            args: ['icon-align']
        }], inputStyle: [{
            type: Input$1,
            args: ['input-style']
        }], labelStyle: [{
            type: Input$1,
            args: ['label-style']
        }] }); })();
    return MbscDropdown;
}(MbscFormValueBase));
var MbscButton = (function (_super) {
    __extends(MbscButton, _super);
    function MbscButton(hostElem, formService, zone) {
        var _this = _super.call(this, hostElem, formService, zone) || this;
        _this._flat = false;
        _this._block = false;
        _this._outline = false;
        _this._classesObj = {};
        _this.type = 'button';
        return _this;
    }
    Object.defineProperty(MbscButton.prototype, "cssClasses", {
        get: function () {
            for (var k in this._classesObj) {
                delete this._classesObj[k];
            }
            this._classesObj['mbsc-btn-flat'] = this._flat;
            this._classesObj['mbsc-btn-block'] = this._block;
            this._classesObj['mbsc-btn-outline'] = this._outline;
            if (this.classes) {
                var cssClasses = this.classes.split(' ');
                if (cssClasses.length) {
                    for (var i = 0; i < cssClasses.length; i++) {
                        if (cssClasses[i]) {
                            this._classesObj[cssClasses[i]] = true;
                        }
                    }
                }
            }
            if (this.color) {
                this._classesObj['mbsc-btn-' + this.color] = true;
            }
            return this._classesObj;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscButton.prototype, "flat", {
        set: function (val) {
            this._flat = emptyOrTrue(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscButton.prototype, "block", {
        set: function (val) {
            this._block = emptyOrTrue(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscButton.prototype, "outline", {
        set: function (val) {
            this._outline = emptyOrTrue(val);
        },
        enumerable: true,
        configurable: true
    });
    MbscButton.prototype.initControl = function () {
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new Button(this._initElem.nativeElement, options);
    };
    MbscButton.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: NgZone, },
    ]; };
    MbscButton.propDecorators = {
        'classes': [{ type: Input$1, args: ['class',] },],
        'type': [{ type: Input$1 },],
        'icon': [{ type: Input$1 },],
        'flat': [{ type: Input$1 },],
        'block': [{ type: Input$1 },],
        'outline': [{ type: Input$1 },],
    };
MbscButton.ɵfac = function MbscButton_Factory(t) { return new (t || MbscButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscButton, selectors: [["mbsc-button"]], inputs: { flat: "flat", block: "block", outline: "outline", classes: ["class", "classes"], type: "type", icon: "icon" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 3, vars: 5, consts: [[3, "type", "ngClass", "disabled"], ["initElement", ""]], template: function MbscButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0, 1);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("type", ctx.type)("ngClass", ctx.cssClasses)("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("name", ctx.name)("data-icon", ctx.icon ? ctx.icon : null);
    } }, directives: [ɵngcc2.NgClass], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscButton, [{
        type: Component,
        args: [{
                selector: 'mbsc-button',
                template: "\n        <button #initElement \n            [type]=\"type\"\n            [ngClass]=\"cssClasses\"\n            [attr.name]=\"name\"\n            [attr.data-icon]=\"icon ? icon : null\"\n            [disabled]=\"disabled\">\n            <ng-content></ng-content>\n        </button>\n    ",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.NgZone }]; }, { flat: [{
            type: Input$1
        }], block: [{
            type: Input$1
        }], outline: [{
            type: Input$1
        }], classes: [{
            type: Input$1,
            args: ['class']
        }], type: [{
            type: Input$1
        }], icon: [{
            type: Input$1
        }] }); })();
    return MbscButton;
}(MbscFormBase));
var MbscCheckbox = (function (_super) {
    __extends(MbscCheckbox, _super);
    function MbscCheckbox(hostElem, cdr, formService, _inputService, control, zone) {
        var _this = _super.call(this, hostElem, formService, _inputService, control, zone) || this;
        _this.cdr = cdr;
        _this._colorClass = {};
        return _this;
    }
    Object.defineProperty(MbscCheckbox.prototype, "colorClass", {
        get: function () {
            for (var k in this._colorClass) {
                delete this._colorClass[k];
            }
            if (this.color) {
                this._colorClass['mbsc-checkbox-' + this.color] = true;
            }
            if (this.error) {
                this._colorClass['mbsc-err'] = true;
            }
            return this._colorClass;
        },
        enumerable: true,
        configurable: true
    });
    MbscCheckbox.prototype.initControl = function () {
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new CheckBox(this._initElem.nativeElement, options);
    };
    MbscCheckbox.prototype.writeValue = function (v) {
        this._value = v;
        this.cdr.detectChanges();
    };
    MbscCheckbox.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ChangeDetectorRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: MbscInputService, decorators: [{ type: Optional },] },
        { type: NgControl, decorators: [{ type: Optional },] },
        { type: NgZone, },
    ]; };
    MbscCheckbox.propDecorators = {
        'color': [{ type: Input$1 },],
        'inputStyle': [{ type: Input$1, args: ['input-style',] },],
        'labelStyle': [{ type: Input$1, args: ['label-style',] },],
    };
MbscCheckbox.ɵfac = function MbscCheckbox_Factory(t) { return new (t || MbscCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscCheckbox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscCheckbox, selectors: [["mbsc-checkbox"]], hostAttrs: [1, "mbsc-control-ng"], inputs: { color: "color", inputStyle: ["input-style", "inputStyle"], labelStyle: ["label-style", "labelStyle"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 5, vars: 7, consts: [[3, "ngClass"], ["type", "checkbox", 3, "disabled", "ngModel", "ngModelChange", "blur"], ["initElement", ""], ["class", "mbsc-err-msg", 4, "ngIf"], [1, "mbsc-err-msg"]], template: function MbscCheckbox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵelementStart(1, "input", 1, 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function MbscCheckbox_Template_input_ngModelChange_1_listener($event) { return ctx.innerValue = $event; })("blur", function MbscCheckbox_Template_input_blur_1_listener($event) { return ctx.onTouch($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵtemplate(4, MbscCheckbox_span_4_Template, 2, 1, "span", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.colorClass);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("ngModel", ctx.innerValue);
        ɵngcc0.ɵɵattribute("name", ctx.name)("data-label-style", ctx.labelStyle)("data-input-style", ctx.inputStyle);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.error && ctx.errorMessage);
    } }, directives: [ɵngcc2.NgClass, ɵngcc1.CheckboxControlValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc2.NgIf], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscCheckbox, [{
        type: Component,
        args: [{
                selector: 'mbsc-checkbox',
                host: { 'class': 'mbsc-control-ng' },
                template: "\n        <label [ngClass]=\"colorClass\">\n            <input #initElement \n                type=\"checkbox\"\n                [attr.name]=\"name\"\n                [disabled]=\"disabled\"\n                [attr.data-label-style]=\"labelStyle\"\n                [attr.data-input-style]=\"inputStyle\"\n                [(ngModel)]=\"innerValue\"\n                (blur)=\"onTouch($event)\" />\n            <ng-content></ng-content>\n            <span *ngIf=\"error && errorMessage\" class=\"mbsc-err-msg\">{{errorMessage}}</span>\n        </label>\n    ",
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: MbscInputService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.NgControl, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.NgZone }]; }, { color: [{
            type: Input$1
        }], inputStyle: [{
            type: Input$1,
            args: ['input-style']
        }], labelStyle: [{
            type: Input$1,
            args: ['label-style']
        }] }); })();
    return MbscCheckbox;
}(MbscFormValueBase));
var MbscSwitch = (function (_super) {
    __extends(MbscSwitch, _super);
    function MbscSwitch(hostElem, zone, _formService, control) {
        var _this = _super.call(this, hostElem, zone, control, null, null) || this;
        _this._formService = _formService;
        _this.disabled = false;
        _this.onChangeEmitter = new EventEmitter();
        _this._colorClass = {};
        return _this;
    }
    Object.defineProperty(MbscSwitch.prototype, "value", {
        set: function (v) {
            this.setNewValueProxy(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscSwitch.prototype, "colorClass", {
        get: function () {
            for (var k in this._colorClass) {
                delete this._colorClass[k];
            }
            if (this.color) {
                this._colorClass['mbsc-switch-' + this.color] = true;
            }
            if (this.error) {
                this._colorClass['mbsc-err'] = true;
            }
            return this._colorClass;
        },
        enumerable: true,
        configurable: true
    });
    MbscSwitch.prototype.setNewValue = function (v) {
        if (this.instance) {
            if (this.instance.getVal() !== v) {
                this.instance.setVal(v, true, false);
            }
        }
    };
    MbscSwitch.prototype.ngOnInit = function () {
        this._inheritedOptions = this._formService ? this._formService.options : {};
        _super.prototype.ngOnInit.call(this);
    };
    MbscSwitch.prototype.initControl = function () {
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new Switch(this._initElem.nativeElement, options);
        if (this.initialValue !== undefined) {
            this.instance.setVal(this.initialValue, true, false);
        }
    };
    MbscSwitch.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    MbscSwitch.propDecorators = {
        'options': [{ type: Input$1, args: ['options',] },],
        'disabled': [{ type: Input$1 },],
        'name': [{ type: Input$1 },],
        'color': [{ type: Input$1 },],
        'error': [{ type: Input$1 },],
        'errorMessage': [{ type: Input$1 },],
        'value': [{ type: Input$1, args: ['value',] },],
        'onChangeEmitter': [{ type: Output, args: ['valueChange',] },],
        '_initElem': [{ type: ViewChild, args: ['initElement', { static: false },] },],
    };
MbscSwitch.ɵfac = function MbscSwitch_Factory(t) { return new (t || MbscSwitch)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8)); };
MbscSwitch.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscSwitch, selectors: [["mbsc-switch"]], viewQuery: function MbscSwitch_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._initElem = _t.first);
    } }, hostAttrs: [1, "mbsc-control-ng"], inputs: { value: "value", options: "options", disabled: "disabled", name: "name", color: "color", error: "error", errorMessage: "errorMessage" }, outputs: { onChangeEmitter: "valueChange" }, exportAs: ["mobiscroll"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 5, vars: 6, consts: [[3, "ngClass"], ["class", "mbsc-err-msg", 4, "ngIf"], ["type", "checkbox", "data-role", "switch", 3, "disabled", "blur"], ["initElement", ""], [1, "mbsc-err-msg"]], template: function MbscSwitch_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵtemplate(2, MbscSwitch_span_2_Template, 2, 1, "span", 1);
        ɵngcc0.ɵɵelementStart(3, "input", 2, 3);
        ɵngcc0.ɵɵlistener("blur", function MbscSwitch_Template_input_blur_3_listener($event) { return ctx.onTouch($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.colorClass);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.error && ctx.errorMessage);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("name", ctx.name)("data-label-style", ctx.labelStyle)("data-input-style", ctx.inputStyle);
    } }, directives: [ɵngcc2.NgClass, ɵngcc2.NgIf], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscSwitch, [{
        type: Component,
        args: [{
                selector: 'mbsc-switch',
                host: { 'class': 'mbsc-control-ng' },
                template: "\n        <label [ngClass]=\"colorClass\">\n            <ng-content></ng-content>\n            <span *ngIf=\"error && errorMessage\" class=\"mbsc-err-msg\">{{errorMessage}}</span>\n            <input #initElement \n                type=\"checkbox\"\n                data-role=\"switch\"\n                [attr.name]=\"name\"\n                [attr.data-label-style]=\"labelStyle\"\n                [attr.data-input-style]=\"inputStyle\"\n                [disabled]=\"disabled\"\n                (blur)=\"onTouch($event)\" />\n        </label>\n    ",
                exportAs: 'mobiscroll',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.NgControl, decorators: [{
                type: Optional
            }] }]; }, { value: [{
            type: Input$1,
            args: ['value']
        }], options: [{
            type: Input$1,
            args: ['options']
        }], disabled: [{
            type: Input$1
        }], name: [{
            type: Input$1
        }], color: [{
            type: Input$1
        }], error: [{
            type: Input$1
        }], errorMessage: [{
            type: Input$1
        }], onChangeEmitter: [{
            type: Output,
            args: ['valueChange']
        }], _initElem: [{
            type: ViewChild,
            args: ['initElement', { static: false }]
        }] }); })();
    return MbscSwitch;
}(MbscControlBase));
var MbscStepper = (function (_super) {
    __extends(MbscStepper, _super);
    function MbscStepper(hostElement, zone, _formService, control) {
        var _this = _super.call(this, hostElement, zone, control, null, null) || this;
        _this._formService = _formService;
        _this.min = undefined;
        _this.max = undefined;
        _this.step = undefined;
        _this.val = undefined;
        _this.disabled = false;
        _this._colorClass = {};
        _this.onChangeEmitter = new EventEmitter();
        return _this;
    }
    Object.defineProperty(MbscStepper.prototype, "readonly", {
        set: function (val) {
            this._readonly = emptyOrTrue(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscStepper.prototype, "value", {
        set: function (v) {
            this.setNewValueProxy(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscStepper.prototype, "colorClass", {
        get: function () {
            for (var k in this._colorClass) {
                delete this._colorClass[k];
            }
            if (this.color) {
                this._colorClass['mbsc-stepper-' + this.color] = true;
            }
            return this._colorClass;
        },
        enumerable: true,
        configurable: true
    });
    MbscStepper.prototype.setNewValue = function (v) {
        if (this.instance && this.instance.getVal() !== v) {
            this.instance.setVal(v, true, false);
        }
    };
    MbscStepper.prototype.ngOnInit = function () {
        this._inheritedOptions = this._formService ? this._formService.options : {};
        _super.prototype.ngOnInit.call(this);
    };
    MbscStepper.prototype.initControl = function () {
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new Stepper(this._initElem.nativeElement, options);
        if (this.initialValue !== undefined) {
            this.instance.setVal(this.initialValue, true, false);
        }
    };
    MbscStepper.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    MbscStepper.propDecorators = {
        'readonly': [{ type: Input$1 },],
        'options': [{ type: Input$1, args: ['options',] },],
        'value': [{ type: Input$1 },],
        'name': [{ type: Input$1 },],
        'min': [{ type: Input$1 },],
        'max': [{ type: Input$1 },],
        'step': [{ type: Input$1 },],
        'val': [{ type: Input$1 },],
        'disabled': [{ type: Input$1 },],
        'color': [{ type: Input$1 },],
        'onChangeEmitter': [{ type: Output, args: ['valueChange',] },],
        '_initElem': [{ type: ViewChild, args: ['initElement', { static: false },] },],
    };
MbscStepper.ɵfac = function MbscStepper_Factory(t) { return new (t || MbscStepper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8)); };
MbscStepper.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscStepper, selectors: [["mbsc-stepper"]], viewQuery: function MbscStepper_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._initElem = _t.first);
    } }, hostAttrs: [1, "mbsc-control-ng"], inputs: { readonly: "readonly", value: "value", options: "options", name: "name", min: "min", max: "max", step: "step", val: "val", disabled: "disabled", color: "color" }, outputs: { onChangeEmitter: "valueChange" }, exportAs: ["mobiscroll"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 10, consts: [[3, "ngClass"], ["data-role", "stepper", 3, "disabled", "readonly"], ["initElement", ""]], template: function MbscStepper_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelement(2, "input", 1, 2);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.colorClass);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("readonly", ctx._readonly);
        ɵngcc0.ɵɵattribute("name", ctx.name)("min", ctx.min !== undefined ? ctx.min : null)("max", ctx.max !== undefined ? ctx.max : null)("step", ctx.step !== undefined ? ctx.step : null)("data-val", ctx.val ? ctx.val : null)("data-label-style", ctx.labelStyle)("data-input-style", ctx.inputStyle);
    } }, directives: [ɵngcc2.NgClass], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscStepper, [{
        type: Component,
        args: [{
                selector: 'mbsc-stepper',
                host: { 'class': 'mbsc-control-ng' },
                template: "\n        <div [ngClass]=\"colorClass\">\n            <ng-content></ng-content>\n            <input #initElement\n                data-role=\"stepper\"\n                [attr.name]=\"name\"\n                [attr.min]=\"min !== undefined ? min : null\"\n                [attr.max]=\"max !== undefined ? max : null\"\n                [attr.step]=\"step !== undefined ? step : null\"\n                [attr.data-val]=\"val ? val : null\"\n                [attr.data-label-style]=\"labelStyle\"\n                [attr.data-input-style]=\"inputStyle\"\n                [disabled]=\"disabled\" \n                [readonly]=\"_readonly\"/>\n        </div>\n    ",
                exportAs: 'mobiscroll',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.NgControl, decorators: [{
                type: Optional
            }] }]; }, { readonly: [{
            type: Input$1
        }], value: [{
            type: Input$1
        }], options: [{
            type: Input$1,
            args: ['options']
        }], name: [{
            type: Input$1
        }], min: [{
            type: Input$1
        }], max: [{
            type: Input$1
        }], step: [{
            type: Input$1
        }], val: [{
            type: Input$1
        }], disabled: [{
            type: Input$1
        }], color: [{
            type: Input$1
        }], onChangeEmitter: [{
            type: Output,
            args: ['valueChange']
        }], _initElem: [{
            type: ViewChild,
            args: ['initElement', { static: false }]
        }] }); })();
    return MbscStepper;
}(MbscControlBase));
var MbscProgress = (function (_super) {
    __extends(MbscProgress, _super);
    function MbscProgress(hostElement, zone, _formService, control) {
        var _this = _super.call(this, hostElement, zone, control, null, null) || this;
        _this._formService = _formService;
        _this.max = undefined;
        _this.icon = undefined;
        _this.iconAlign = undefined;
        _this.val = undefined;
        _this.disabled = false;
        _this._colorClass = {};
        return _this;
    }
    Object.defineProperty(MbscProgress.prototype, "value", {
        set: function (v) {
            this.setNewValueProxy(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscProgress.prototype, "dataStepLabels", {
        get: function () {
            if (typeof (this.stepLabels) === 'string') {
                return this.stepLabels;
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscProgress.prototype, "colorClass", {
        get: function () {
            for (var k in this._colorClass) {
                delete this._colorClass[k];
            }
            if (this.color) {
                this._colorClass['mbsc-progress-' + this.color] = true;
            }
            return this._colorClass;
        },
        enumerable: true,
        configurable: true
    });
    MbscProgress.prototype.setNewValue = function (v) {
        if (this.instance && this.instance.getVal() !== v) {
            this.instance.setVal(v, true, false);
        }
    };
    MbscProgress.prototype.ngOnInit = function () {
        this._inheritedOptions = this._formService ? this._formService.options : {};
        _super.prototype.ngOnInit.call(this);
    };
    MbscProgress.prototype.initControl = function () {
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new Progress(this._initElem.nativeElement, options);
        if (this.initialValue !== undefined) {
            this.instance.setVal(this.initialValue, true, false);
        }
    };
    MbscProgress.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    MbscProgress.propDecorators = {
        'options': [{ type: Input$1, args: ['options',] },],
        'value': [{ type: Input$1 },],
        'max': [{ type: Input$1 },],
        'icon': [{ type: Input$1 },],
        'iconAlign': [{ type: Input$1, args: ['icon-align',] },],
        'val': [{ type: Input$1 },],
        'disabled': [{ type: Input$1 },],
        'stepLabels': [{ type: Input$1, args: ['step-labels',] },],
        'color': [{ type: Input$1 },],
        '_initElem': [{ type: ViewChild, args: ['initElement', { static: false },] },],
    };
MbscProgress.ɵfac = function MbscProgress_Factory(t) { return new (t || MbscProgress)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8)); };
MbscProgress.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscProgress, selectors: [["mbsc-progress"]], viewQuery: function MbscProgress_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._initElem = _t.first);
    } }, hostAttrs: [1, "mbsc-control-ng"], inputs: { value: "value", options: "options", max: "max", icon: "icon", iconAlign: ["icon-align", "iconAlign"], val: "val", disabled: "disabled", stepLabels: ["step-labels", "stepLabels"], color: "color" }, exportAs: ["mobiscroll"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 8, consts: [[3, "ngClass"], ["initElement", ""]], template: function MbscProgress_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelement(2, "progress", null, 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.colorClass);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵattribute("data-step-labels", ctx.dataStepLabels)("data-icon", ctx.icon ? ctx.icon : null)("data-icon-align", ctx.iconAlign ? ctx.iconAlign : null)("data-label-style", ctx.labelStyle)("data-input-style", ctx.inputStyle)("max", ctx.max !== undefined ? ctx.max : null)("data-val", ctx.val !== undefined ? ctx.val : null);
    } }, directives: [ɵngcc2.NgClass], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscProgress, [{
        type: Component,
        args: [{
                selector: 'mbsc-progress',
                host: { 'class': 'mbsc-control-ng' },
                template: "\n        <label [ngClass]=\"colorClass\">\n            <ng-content></ng-content>\n            <progress #initElement\n                [attr.data-step-labels]=\"dataStepLabels\"\n                [attr.data-icon]=\"icon ? icon : null\"\n                [attr.data-icon-align]=\"iconAlign ? iconAlign : null\"\n                [attr.data-label-style]=\"labelStyle\"\n                [attr.data-input-style]=\"inputStyle\"\n                [attr.max]=\"max !== undefined ? max : null\"\n                [attr.data-val]=\"val !== undefined ? val : null\"\n            >\n            </progress>\n        </label>\n    ",
                exportAs: 'mobiscroll',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.NgControl, decorators: [{
                type: Optional
            }] }]; }, { value: [{
            type: Input$1
        }], options: [{
            type: Input$1,
            args: ['options']
        }], max: [{
            type: Input$1
        }], icon: [{
            type: Input$1
        }], iconAlign: [{
            type: Input$1,
            args: ['icon-align']
        }], val: [{
            type: Input$1
        }], disabled: [{
            type: Input$1
        }], stepLabels: [{
            type: Input$1,
            args: ['step-labels']
        }], color: [{
            type: Input$1
        }], _initElem: [{
            type: ViewChild,
            args: ['initElement', { static: false }]
        }] }); })();
    return MbscProgress;
}(MbscControlBase));
var groupName = 1;
var MbscRadioService = (function () {
    function MbscRadioService() {
        this._lastValue = null;
        this._valueObservable = new Observable();
    }
    Object.defineProperty(MbscRadioService.prototype, "name", {
        get: function () {
            if (!this._name) {
                this._name = 'mbsc-radio-group-' + (groupName++);
            }
            return this._name;
        },
        set: function (n) {
            this._name = n;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscRadioService.prototype, "multiSelect", {
        get: function () {
            return this._multiSelect;
        },
        set: function (v) {
            this._multiSelect = v;
        },
        enumerable: true,
        configurable: true
    });
    MbscRadioService.prototype.onValueChanged = function () {
        return this._valueObservable;
    };
    MbscRadioService.prototype.changeValue = function (v) {
        this._valueObservable.next(v);
        this._lastValue = v;
    };
    Object.defineProperty(MbscRadioService.prototype, "getLastValue", {
        get: function () {
            return this._lastValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscRadioService.prototype, "color", {
        get: function () {
            return this._color;
        },
        set: function (v) {
            this._color = v;
        },
        enumerable: true,
        configurable: true
    });
    MbscRadioService.ctorParameters = function () { return []; };
MbscRadioService.ɵfac = function MbscRadioService_Factory(t) { return new (t || MbscRadioService)(); };
MbscRadioService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MbscRadioService, factory: function (t) { return MbscRadioService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscRadioService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return MbscRadioService;
}());
var MbscRadioGroupBase = (function (_super) {
    __extends(MbscRadioGroupBase, _super);
    function MbscRadioGroupBase(hostElement, formService, _inputService, _radioService, control, zone) {
        var _this = _super.call(this, hostElement, formService, _inputService, control, zone) || this;
        _this._radioService = _radioService;
        _this.valueObserver = _this._radioService.onValueChanged().subscribe(function (v) {
            _this.innerValue = v;
            _this.onTouch();
        });
        return _this;
    }
    Object.defineProperty(MbscRadioGroupBase.prototype, "value", {
        set: function (v) {
            this._value = v;
            this._radioService.changeValue(v);
        },
        enumerable: true,
        configurable: true
    });
    MbscRadioGroupBase.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        if (this.name) {
            this._radioService.name = this.name;
        }
        if (this.color) {
            this._radioService.color = this.color;
        }
    };
    MbscRadioGroupBase.prototype.writeValue = function (v) {
        this._value = v;
        this._radioService.changeValue(v);
    };
    MbscRadioGroupBase.prototype.updateOptions = function () { };
    MbscRadioGroupBase.prototype.ngOnDestroy = function () {
        this._radioService.onValueChanged().unsubscribe(this.valueObserver);
        _super.prototype.ngOnDestroy.call(this);
    };
    MbscRadioGroupBase.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: MbscInputService, decorators: [{ type: Optional },] },
        { type: MbscRadioService, },
        { type: NgControl, },
        { type: NgZone, },
    ]; };
    MbscRadioGroupBase.propDecorators = {
        'name': [{ type: Input$1 },],
        'value': [{ type: Input$1 },],
    };
MbscRadioGroupBase.ɵfac = function MbscRadioGroupBase_Factory(t) { return new (t || MbscRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscRadioService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscRadioGroupBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MbscRadioGroupBase, selectors: [["", "mbsc-rg-b", ""]], inputs: { value: "value", name: "name" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscRadioGroupBase, [{
        type: Directive,
        args: [{ selector: '[mbsc-rg-b]' }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: MbscInputService, decorators: [{
                type: Optional
            }] }, { type: MbscRadioService }, { type: ɵngcc1.NgControl }, { type: ɵngcc0.NgZone }]; }, { value: [{
            type: Input$1
        }], name: [{
            type: Input$1
        }] }); })();
    return MbscRadioGroupBase;
}(MbscFormValueBase));
var MbscRadioGroup = (function (_super) {
    __extends(MbscRadioGroup, _super);
    function MbscRadioGroup(hostElement, formService, _inputService, radioService, control, zone) {
        return _super.call(this, hostElement, formService, _inputService, radioService, control, zone) || this;
    }
    MbscRadioGroup.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: MbscInputService, decorators: [{ type: Optional },] },
        { type: MbscRadioService, },
        { type: NgControl, decorators: [{ type: Optional },] },
        { type: NgZone, },
    ]; };
MbscRadioGroup.ɵfac = function MbscRadioGroup_Factory(t) { return new (t || MbscRadioGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscRadioService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscRadioGroup.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscRadioGroup, selectors: [["mbsc-radio-group"]], features: [ɵngcc0.ɵɵProvidersFeature([MbscRadioService]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, template: function MbscRadioGroup_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscRadioGroup, [{
        type: Component,
        args: [{
                selector: 'mbsc-radio-group',
                template: "<ng-content></ng-content>",
                providers: [MbscRadioService]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: MbscInputService, decorators: [{
                type: Optional
            }] }, { type: MbscRadioService }, { type: ɵngcc1.NgControl, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.NgZone }]; }, null); })();
    return MbscRadioGroup;
}(MbscRadioGroupBase));
var MbscRadio = (function (_super) {
    __extends(MbscRadio, _super);
    function MbscRadio(hostElement, formService, _radioService, zone) {
        var _this = _super.call(this, hostElement, formService, zone) || this;
        _this._radioService = _radioService;
        _this._colorClass = {};
        var v = _this._radioService.getLastValue;
        if (v !== null) {
            _this.modelValue = v;
        }
        _this.valueObserver = _this._radioService.onValueChanged().subscribe(function (v) {
            _this.modelValue = v;
        });
        return _this;
    }
    Object.defineProperty(MbscRadio.prototype, "checked", {
        get: function () {
            return this.value == this.modelValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscRadio.prototype, "colorClass", {
        get: function () {
            for (var k in this._colorClass) {
                delete this._colorClass[k];
            }
            if (this.color) {
                this._colorClass['mbsc-radio-' + this.color] = true;
            }
            if (this.error) {
                this._colorClass['mbsc-err'] = true;
            }
            return this._colorClass;
        },
        enumerable: true,
        configurable: true
    });
    MbscRadio.prototype.clicked = function (e) {
        this._radioService.changeValue(this.value);
    };
    MbscRadio.prototype.initControl = function () {
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new Radio(this._initElem.nativeElement, options);
    };
    MbscRadio.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        this.name = this._radioService.name;
        this.color = this._radioService.color;
    };
    MbscRadio.prototype.ngOnDestroy = function () {
        this._radioService.onValueChanged().unsubscribe(this.valueObserver);
        _super.prototype.ngOnDestroy.call(this);
    };
    MbscRadio.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: MbscRadioService, },
        { type: NgZone, },
    ]; };
    MbscRadio.propDecorators = {
        'value': [{ type: Input$1 },],
        'error': [{ type: Input$1 },],
        'errorMessage': [{ type: Input$1 },],
    };
MbscRadio.ɵfac = function MbscRadio_Factory(t) { return new (t || MbscRadio)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscRadioService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscRadio.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscRadio, selectors: [["mbsc-radio"]], hostAttrs: [1, "mbsc-control-ng"], inputs: { value: "value", error: "error", errorMessage: "errorMessage" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 5, vars: 7, consts: [[3, "ngClass"], ["type", "radio", 3, "value", "checked", "disabled", "click"], ["initElement", ""], ["class", "mbsc-err-msg", 4, "ngIf"], [1, "mbsc-err-msg"]], template: function MbscRadio_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵelementStart(1, "input", 1, 2);
        ɵngcc0.ɵɵlistener("click", function MbscRadio_Template_input_click_1_listener($event) { return ctx.clicked($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(3);
        ɵngcc0.ɵɵtemplate(4, MbscRadio_span_4_Template, 2, 1, "span", 3);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.colorClass);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("value", ctx.value)("checked", ctx.checked)("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("name", ctx.name)("value", ctx.value);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.error && ctx.errorMessage);
    } }, directives: [ɵngcc2.NgClass, ɵngcc2.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscRadio, [{
        type: Component,
        args: [{
                selector: 'mbsc-radio',
                host: { 'class': 'mbsc-control-ng' },
                template: "\n        <label [ngClass]=\"colorClass\">\n            <input #initElement \n                type=\"radio\" \n                [attr.name]=\"name\" \n                [attr.value]=\"value\"\n                [value]=\"value\" \n                [checked]=\"checked\"\n                [disabled]=\"disabled\"\n                (click)=\"clicked($event)\" />\n            <ng-content></ng-content>\n            <span *ngIf=\"error && errorMessage\" class=\"mbsc-err-msg\">{{errorMessage}}</span>\n        </label>\n    "
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: MbscRadioService }, { type: ɵngcc0.NgZone }]; }, { value: [{
            type: Input$1
        }], error: [{
            type: Input$1
        }], errorMessage: [{
            type: Input$1
        }] }); })();
    return MbscRadio;
}(MbscFormBase));
var MbscSegmentedGroup = (function (_super) {
    __extends(MbscSegmentedGroup, _super);
    function MbscSegmentedGroup(hostElement, formService, _inputService, radioService, control, zone) {
        var _this = _super.call(this, hostElement, formService, _inputService, radioService, control, zone) || this;
        _this.select = 'single';
        return _this;
    }
    Object.defineProperty(MbscSegmentedGroup.prototype, "multiSelect", {
        get: function () {
            return this.select == 'multiple';
        },
        enumerable: true,
        configurable: true
    });
    MbscSegmentedGroup.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        this._radioService.multiSelect = this.multiSelect;
        if (this.color) {
            this._radioService.color = this.color;
        }
    };
    MbscSegmentedGroup.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: MbscInputService, decorators: [{ type: Optional },] },
        { type: MbscRadioService, },
        { type: NgControl, decorators: [{ type: Optional },] },
        { type: NgZone, },
    ]; };
    MbscSegmentedGroup.propDecorators = {
        'select': [{ type: Input$1 },],
    };
MbscSegmentedGroup.ɵfac = function MbscSegmentedGroup_Factory(t) { return new (t || MbscSegmentedGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscInputService, 8), ɵngcc0.ɵɵdirectiveInject(MbscRadioService), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscSegmentedGroup.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscSegmentedGroup, selectors: [["mbsc-segmented-group"]], inputs: { select: "select" }, features: [ɵngcc0.ɵɵProvidersFeature([MbscRadioService]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 2, vars: 0, consts: [[1, "mbsc-segmented", "mbsc-segmented-group", "mbsc-no-touch"]], template: function MbscSegmentedGroup_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscSegmentedGroup, [{
        type: Component,
        args: [{
                selector: 'mbsc-segmented-group',
                template: "<div class=\"mbsc-segmented mbsc-segmented-group mbsc-no-touch\"><ng-content></ng-content></div>",
                providers: [MbscRadioService]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: MbscInputService, decorators: [{
                type: Optional
            }] }, { type: MbscRadioService }, { type: ɵngcc1.NgControl, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.NgZone }]; }, { select: [{
            type: Input$1
        }] }); })();
    return MbscSegmentedGroup;
}(MbscRadioGroupBase));
var MbscSegmented = (function (_super) {
    __extends(MbscSegmented, _super);
    function MbscSegmented(hostElement, formService, _radioService, zone) {
        var _this = _super.call(this, hostElement, formService, zone) || this;
        _this._radioService = _radioService;
        _this.checkedChange = new EventEmitter();
        var v = _this._radioService.getLastValue;
        if (v !== null) {
            _this.modelValue = v;
        }
        _this.valueObserver = _this._radioService.onValueChanged().subscribe(function (v) {
            _this.modelValue = v;
        });
        return _this;
    }
    Object.defineProperty(MbscSegmented.prototype, "isChecked", {
        get: function () {
            if (this.multiSelect) {
                if (this.checked !== undefined) {
                    return this.checked;
                }
                else {
                    return this.modelValue && this.modelValue.includes(this.value);
                }
            }
            else {
                return this.value == this.modelValue;
            }
        },
        enumerable: true,
        configurable: true
    });
    MbscSegmented.prototype.clicked = function (e) {
        if (this.multiSelect && this.checked !== undefined) {
            this.checkedChange.emit(!(!!this.checked));
        }
        else {
            if (this.multiSelect) {
                if (this.modelValue.includes(this.value)) {
                    var i = this.modelValue.indexOf(this.value);
                    this.modelValue.splice(i, 1);
                }
                else {
                    this.modelValue.push(this.value);
                }
                this._radioService.changeValue(this.modelValue);
            }
            else {
                this._radioService.changeValue(this.value);
            }
        }
    };
    Object.defineProperty(MbscSegmented.prototype, "cssClass", {
        get: function () {
            var cl = 'mbsc-segmented-item';
            if (this.color) {
                cl += ' mbsc-segmented-' + this.color;
            }
            return cl;
        },
        enumerable: true,
        configurable: true
    });
    MbscSegmented.prototype.initControl = function () {
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new SegmentedItem(this._initElem.nativeElement, options);
    };
    MbscSegmented.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        this.name = this._radioService.name;
        this.multiSelect = this._radioService.multiSelect;
        this.color = this._radioService.color;
    };
    MbscSegmented.prototype.ngOnDestroy = function () {
        this._radioService.onValueChanged().unsubscribe(this.valueObserver);
        _super.prototype.ngOnDestroy.call(this);
    };
    MbscSegmented.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: MbscRadioService, },
        { type: NgZone, },
    ]; };
    MbscSegmented.propDecorators = {
        'icon': [{ type: Input$1 },],
        'value': [{ type: Input$1 },],
        'checked': [{ type: Input$1 },],
        'checkedChange': [{ type: Output },],
    };
MbscSegmented.ɵfac = function MbscSegmented_Factory(t) { return new (t || MbscSegmented)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(MbscRadioService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscSegmented.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscSegmented, selectors: [["mbsc-segmented"]], hostVars: 2, hostBindings: function MbscSegmented_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.cssClass);
    } }, inputs: { icon: "icon", value: "value", checked: "checked" }, outputs: { checkedChange: "checkedChange" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 8, consts: [[1, "mbsc-segmented-item-ready"], ["data-role", "segmented", 3, "type", "value", "checked", "disabled", "click"], ["initElement", ""], [1, "mbsc-segmented-content"], [3, "class", 4, "ngIf"]], template: function MbscSegmented_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵelementStart(1, "input", 1, 2);
        ɵngcc0.ɵɵlistener("click", function MbscSegmented_Template_input_click_1_listener($event) { return ctx.clicked($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(3, "span", 3);
        ɵngcc0.ɵɵtemplate(4, MbscSegmented_span_4_Template, 1, 3, "span", 4);
        ɵngcc0.ɵɵprojection(5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("type", ctx.multiSelect ? "checkbox" : "radio")("value", ctx.value)("checked", ctx.isChecked)("disabled", ctx.disabled);
        ɵngcc0.ɵɵattribute("name", ctx.name)("value", ctx.value)("data-icon", ctx.icon ? ctx.icon : null);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.icon);
    } }, directives: [ɵngcc2.NgIf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscSegmented, [{
        type: Component,
        args: [{
                selector: 'mbsc-segmented',
                host: { '[class]': 'cssClass' },
                template: "\n        <label class=\"mbsc-segmented-item-ready\">\n            <input #initElement \n                data-role=\"segmented\"\n                [type]=\"multiSelect ? 'checkbox' : 'radio'\" \n                [value]=\"value\" \n                [checked]=\"isChecked\"\n                [disabled]=\"disabled\"\n                [attr.name]=\"name\" \n                [attr.value]=\"value\"\n                [attr.data-icon]=\"icon ? icon : null\"\n                (click)=\"clicked($event)\" />\n            <span class=\"mbsc-segmented-content\">\n                <span *ngIf=\"icon\" class=\"{{'mbsc-ic mbsc-ic-' + icon }}\"></span>\n                <ng-content></ng-content>\n            </span>\n        </label>\n    "
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: MbscRadioService }, { type: ɵngcc0.NgZone }]; }, { icon: [{
            type: Input$1
        }], value: [{
            type: Input$1
        }], checked: [{
            type: Input$1
        }], checkedChange: [{
            type: Output
        }] }); })();
    return MbscSegmented;
}(MbscFormBase));
var MbscSlider = (function (_super) {
    __extends(MbscSlider, _super);
    function MbscSlider(hostElement, _formService, zone, control) {
        var _this = _super.call(this, hostElement, zone, control, null, null) || this;
        _this._formService = _formService;
        _this._dummy = undefined;
        _this._needsTimeout = false;
        _this.disabled = false;
        _this._colorClass = {};
        _this.onChangeEmitter = new EventEmitter();
        return _this;
    }
    Object.defineProperty(MbscSlider.prototype, "isMulti", {
        get: function () {
            return this._lastValue instanceof Array;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscSlider.prototype, "dummyArray", {
        get: function () {
            if (!this._dummy || (this.isMulti && this._lastValue && this._lastValue.length && this._dummy.length !== this._lastValue.length)) {
                this._dummy = Array(this.isMulti ? this._lastValue.length : 1).fill(0).map(function (x, i) { return i; });
            }
            return this._dummy;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscSlider.prototype, "dataStepLabels", {
        get: function () {
            if (typeof (this.stepLabels) === 'string') {
                return this.stepLabels;
            }
            else {
                return null;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscSlider.prototype, "value", {
        set: function (v) {
            this.setNewValueProxy(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscSlider.prototype, "colorClass", {
        get: function () {
            for (var k in this._colorClass) {
                delete this._colorClass[k];
            }
            if (this.color) {
                this._colorClass['mbsc-slider-' + this.color] = true;
            }
            return this._colorClass;
        },
        enumerable: true,
        configurable: true
    });
    MbscSlider.prototype.reInitialize = function () {
        var _this = this;
        this.instance.destroy();
        this.setElement();
        this.inputElements.forEach(function (input, index) {
            if (index) {
                _this.handleChange(input.nativeElement);
            }
        });
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new Slider(this.inputElements.first.nativeElement, options);
    };
    MbscSlider.prototype.setNewValue = function (v) {
        var _this = this;
        this._lastValue = v;
        if (this.instance) {
            var innerValue = this.instance.getVal();
            if (this.isMulti && (!innerValue || innerValue.length != v.length)) {
                setTimeout(function () {
                    _this.reInitialize();
                    _this.instance.setVal(_this._lastValue, true, false);
                });
            }
            else {
                var changed = (this.isMulti && !deepEqualsArray(innerValue, v)) || (!this.isMulti && innerValue !== v);
                if (changed) {
                    this.instance.setVal(v, true, false);
                }
            }
        }
    };
    MbscSlider.prototype.ngOnInit = function () {
        this._inheritedOptions = this._formService ? this._formService.options : {};
        _super.prototype.ngOnInit.call(this);
    };
    MbscSlider.prototype.initControl = function () {
        var _this = this;
        this.inputElements.forEach(function (input, index) {
            if (index) {
                _this.handleChange(input.nativeElement);
            }
        });
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new Slider(this.inputElements.first.nativeElement, options);
        if (this.initialValue !== undefined && this.initialValue !== null) {
            this.instance.setVal(this.initialValue, true, false);
        }
    };
    MbscSlider.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: NgZone, },
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    MbscSlider.propDecorators = {
        'options': [{ type: Input$1, args: ['options',] },],
        'name': [{ type: Input$1 },],
        'tooltip': [{ type: Input$1 },],
        'highlight': [{ type: Input$1 },],
        'live': [{ type: Input$1 },],
        'valueTemplate': [{ type: Input$1, args: ['value-template',] },],
        'icon': [{ type: Input$1 },],
        'val': [{ type: Input$1 },],
        'max': [{ type: Input$1 },],
        'min': [{ type: Input$1 },],
        'step': [{ type: Input$1 },],
        'disabled': [{ type: Input$1 },],
        'stepLabels': [{ type: Input$1, args: ['step-labels',] },],
        'value': [{ type: Input$1, args: ['value',] },],
        'color': [{ type: Input$1 },],
        'onChangeEmitter': [{ type: Output, args: ['valueChange',] },],
        'inputElements': [{ type: ViewChildren, args: ['inputElements',] },],
    };
MbscSlider.ɵfac = function MbscSlider_Factory(t) { return new (t || MbscSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8)); };
MbscSlider.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscSlider, selectors: [["mbsc-slider"]], viewQuery: function MbscSlider_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c3, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElements = _t);
    } }, hostAttrs: [1, "mbsc-control-ng"], inputs: { value: "value", options: "options", name: "name", tooltip: "tooltip", highlight: "highlight", live: "live", valueTemplate: ["value-template", "valueTemplate"], icon: "icon", val: "val", max: "max", min: "min", step: "step", disabled: "disabled", stepLabels: ["step-labels", "stepLabels"], color: "color" }, outputs: { onChangeEmitter: "valueChange" }, exportAs: ["mobiscroll"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 3, vars: 2, consts: [[3, "ngClass"], ["type", "range", 3, "disabled", "blur", 4, "ngFor", "ngForOf"], ["type", "range", 3, "disabled", "blur"], ["inputElements", ""]], template: function MbscSlider_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵtemplate(2, MbscSlider_input_2_Template, 2, 15, "input", 1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.colorClass);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.dummyArray);
    } }, directives: [ɵngcc2.NgClass, ɵngcc2.NgForOf], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscSlider, [{
        type: Component,
        args: [{
                selector: 'mbsc-slider',
                host: { 'class': 'mbsc-control-ng' },
                template: "\n        <label [ngClass]=\"colorClass\">\n            <ng-content></ng-content>\n            <input #inputElements *ngFor=\"let v of dummyArray\" \n                type=\"range\"\n                [disabled]=\"disabled\"\n                [attr.value]=\"dummyArray.length > 1 && initialValue ? initialValue[v]: initialValue\"\n                [attr.data-step-labels]=\"dataStepLabels\"\n                [attr.data-template]=\"valueTemplate\"\n                [attr.data-tooltip]=\"tooltip ? 'true' : null\"\n                [attr.data-highlight]=\"highlight\"\n                [attr.data-live]=\"live\"\n                [attr.data-icon]=\"icon ? icon : null\"\n                [attr.data-val]=\"val ? val : null\"\n                [attr.data-label-style]=\"labelStyle\"\n                [attr.data-input-style]=\"inputStyle\"\n                [attr.name]=\"name\"\n                [attr.max]=\"max !== undefined ? max : null\"\n                [attr.min]=\"min !== undefined ? min : null\"\n                [attr.step]=\"step !== undefined ? step : null\"\n                (blur)=\"onTouch($event)\" />\n        </label>\n    ",
                exportAs: 'mobiscroll'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.NgControl, decorators: [{
                type: Optional
            }] }]; }, { value: [{
            type: Input$1,
            args: ['value']
        }], options: [{
            type: Input$1,
            args: ['options']
        }], name: [{
            type: Input$1
        }], tooltip: [{
            type: Input$1
        }], highlight: [{
            type: Input$1
        }], live: [{
            type: Input$1
        }], valueTemplate: [{
            type: Input$1,
            args: ['value-template']
        }], icon: [{
            type: Input$1
        }], val: [{
            type: Input$1
        }], max: [{
            type: Input$1
        }], min: [{
            type: Input$1
        }], step: [{
            type: Input$1
        }], disabled: [{
            type: Input$1
        }], stepLabels: [{
            type: Input$1,
            args: ['step-labels']
        }], color: [{
            type: Input$1
        }], onChangeEmitter: [{
            type: Output,
            args: ['valueChange']
        }], inputElements: [{
            type: ViewChildren,
            args: ['inputElements']
        }] }); })();
    return MbscSlider;
}(MbscControlBase));
var MbscRating = (function (_super) {
    __extends(MbscRating, _super);
    function MbscRating(hostElem, zone, formService, control) {
        var _this = _super.call(this, hostElem, zone, control, null, null) || this;
        _this.formService = formService;
        _this.min = undefined;
        _this.max = undefined;
        _this.step = undefined;
        _this.disabled = false;
        _this.val = undefined;
        _this.onChangeEmitter = new EventEmitter();
        _this._colorClass = {};
        return _this;
    }
    Object.defineProperty(MbscRating.prototype, "readonly", {
        set: function (val) {
            this._readonly = emptyOrTrue(val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscRating.prototype, "value", {
        set: function (v) {
            this.setNewValueProxy(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MbscRating.prototype, "colorClass", {
        get: function () {
            for (var k in this._colorClass) {
                delete this._colorClass[k];
            }
            if (this.color) {
                this._colorClass['mbsc-rating-' + this.color] = true;
            }
            return this._colorClass;
        },
        enumerable: true,
        configurable: true
    });
    MbscRating.prototype.setNewValue = function (v) {
        if (this.instance) {
            if (this.instance.getVal() !== v) {
                this.instance.setVal(v, true, false);
            }
        }
    };
    MbscRating.prototype.ngOnInit = function () {
        this._inheritedOptions = this.formService ? this.formService.options : {};
        _super.prototype.ngOnInit.call(this);
    };
    MbscRating.prototype.initControl = function () {
        var options = extend$1({}, this._inheritedOptions, this.options, this.inlineOptionsObj);
        this.instance = new Rating(this.element, options);
        if (this.initialValue !== undefined) {
            this.instance.setVal(this.initialValue, true, false);
        }
    };
    MbscRating.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: NgZone, },
        { type: MbscOptionsService, decorators: [{ type: Optional },] },
        { type: NgControl, decorators: [{ type: Optional },] },
    ]; };
    MbscRating.propDecorators = {
        'options': [{ type: Input$1 },],
        'name': [{ type: Input$1 },],
        'min': [{ type: Input$1 },],
        'max': [{ type: Input$1 },],
        'step': [{ type: Input$1 },],
        'disabled': [{ type: Input$1 },],
        'empty': [{ type: Input$1 },],
        'filled': [{ type: Input$1 },],
        'readonly': [{ type: Input$1 },],
        'val': [{ type: Input$1 },],
        'template': [{ type: Input$1 },],
        'value': [{ type: Input$1, args: ['value',] },],
        'onChangeEmitter': [{ type: Output, args: ['valueChange',] },],
        'color': [{ type: Input$1 },],
    };
MbscRating.ɵfac = function MbscRating_Factory(t) { return new (t || MbscRating)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 8)); };
MbscRating.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscRating, selectors: [["mbsc-rating"]], hostAttrs: [1, "mbsc-control-ng"], inputs: { readonly: "readonly", value: "value", options: "options", name: "name", min: "min", max: "max", step: "step", disabled: "disabled", empty: "empty", filled: "filled", val: "val", template: "template", color: "color" }, outputs: { onChangeEmitter: "valueChange" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 3, vars: 13, consts: [[3, "ngClass"], ["type", "rating", "data-role", "rating", 3, "disabled", "readonly", "blur"]], template: function MbscRating_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "label", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementStart(2, "input", 1);
        ɵngcc0.ɵɵlistener("blur", function MbscRating_Template_input_blur_2_listener($event) { return ctx.onTouch($event); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.colorClass);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", ctx.disabled)("readonly", ctx._readonly);
        ɵngcc0.ɵɵattribute("name", ctx.name)("min", ctx.min !== undefined ? ctx.min : null)("max", ctx.max !== undefined ? ctx.max : null)("step", ctx.step !== undefined ? ctx.step : null)("data-val", ctx.val ? ctx.val : null)("data-template", ctx.template ? ctx.template : null)("data-empty", ctx.empty)("data-filled", ctx.filled)("data-label-style", ctx.labelStyle)("data-input-style", ctx.inputStyle);
    } }, directives: [ɵngcc2.NgClass], encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscRating, [{
        type: Component,
        args: [{
                selector: 'mbsc-rating',
                host: { 'class': 'mbsc-control-ng' },
                template: "<label [ngClass]=\"colorClass\">\n        <ng-content></ng-content>\n        <input type=\"rating\" data-role=\"rating\" \n            [attr.name]=\"name\"\n            [attr.min]=\"min !== undefined ? min : null\"\n            [attr.max]=\"max !== undefined ? max : null\"\n            [attr.step]=\"step !== undefined ? step : null\"\n            [attr.data-val]=\"val ? val : null\"\n            [attr.data-template]=\"template ? template : null\"\n            [attr.data-empty]=\"empty\"\n            [attr.data-filled]=\"filled\"\n            [attr.data-label-style]=\"labelStyle\"\n            [attr.data-input-style]=\"inputStyle\"\n            [disabled]=\"disabled\"\n            [readonly]=\"_readonly\"\n            (blur)=\"onTouch($event)\" />\n    </label>"
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc1.NgControl, decorators: [{
                type: Optional
            }] }]; }, { readonly: [{
            type: Input$1
        }], value: [{
            type: Input$1,
            args: ['value']
        }], options: [{
            type: Input$1
        }], name: [{
            type: Input$1
        }], min: [{
            type: Input$1
        }], max: [{
            type: Input$1
        }], step: [{
            type: Input$1
        }], disabled: [{
            type: Input$1
        }], empty: [{
            type: Input$1
        }], filled: [{
            type: Input$1
        }], val: [{
            type: Input$1
        }], template: [{
            type: Input$1
        }], onChangeEmitter: [{
            type: Output,
            args: ['valueChange']
        }], color: [{
            type: Input$1
        }] }); })();
    return MbscRating;
}(MbscControlBase));
var MbscFormGroup = (function () {
    function MbscFormGroup(initialElem) {
        this.initialElem = initialElem;
        this.collapsible = null;
        this._open = false;
        this.instance = null;
        this.element = null;
        this.element = initialElem;
    }
    Object.defineProperty(MbscFormGroup.prototype, "open", {
        set: function (v) {
            if (this._open != v && this.instance) {
                if (v) {
                    this.instance.show();
                }
                else {
                    this.instance.hide();
                }
            }
            this._open = v;
        },
        enumerable: true,
        configurable: true
    });
    MbscFormGroup.prototype.emptyOrTrue = function (v) {
        return emptyOrTrue(v);
    };
    MbscFormGroup.prototype.ngAfterViewInit = function () {
        if (this.collapsible !== null) {
            this.instance = new CollapsibleBase(this.element.nativeElement, { isOpen: this._open !== false });
        }
    };
    MbscFormGroup.prototype.ngOnDestroy = function () {
        if (this.instance) {
            this.instance.destroy();
        }
    };
    MbscFormGroup.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    MbscFormGroup.propDecorators = {
        'collapsible': [{ type: Input$1 },],
        'open': [{ type: Input$1 },],
        'inset': [{ type: Input$1 },],
    };
MbscFormGroup.ɵfac = function MbscFormGroup_Factory(t) { return new (t || MbscFormGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MbscFormGroup.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscFormGroup, selectors: [["mbsc-form-group"]], hostVars: 4, hostBindings: function MbscFormGroup_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("mbsc-form-group-inset", ctx.emptyOrTrue(ctx.inset))("mbsc-form-group", !ctx.emptyOrTrue(ctx.inset));
    } }, inputs: { collapsible: "collapsible", open: "open", inset: "inset" }, ngContentSelectors: _c1, decls: 1, vars: 0, template: function MbscFormGroup_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%] { display: block; }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscFormGroup, [{
        type: Component,
        args: [{
                selector: 'mbsc-form-group',
                template: '<ng-content></ng-content>',
                host: {
                    '[class.mbsc-form-group-inset]': 'emptyOrTrue(inset)',
                    '[class.mbsc-form-group]': '!emptyOrTrue(inset)'
                },
                styles: [':host { display: block; }']
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { collapsible: [{
            type: Input$1
        }], open: [{
            type: Input$1
        }], inset: [{
            type: Input$1
        }] }); })();
    return MbscFormGroup;
}());
var MbscFormGroupTitle = (function () {
    function MbscFormGroupTitle() {
    }
    MbscFormGroupTitle.ctorParameters = function () { return []; };
MbscFormGroupTitle.ɵfac = function MbscFormGroupTitle_Factory(t) { return new (t || MbscFormGroupTitle)(); };
MbscFormGroupTitle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscFormGroupTitle, selectors: [["mbsc-form-group-title"]], hostVars: 2, hostBindings: function MbscFormGroupTitle_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("mbsc-form-group-title", true);
    } }, ngContentSelectors: _c1, decls: 1, vars: 0, template: function MbscFormGroupTitle_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%] { display: block; }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscFormGroupTitle, [{
        type: Component,
        args: [{
                selector: 'mbsc-form-group-title',
                template: '<ng-content></ng-content>',
                host: {
                    '[class.mbsc-form-group-title]': 'true'
                },
                styles: [':host { display: block; }']
            }]
    }], function () { return []; }, null); })();
    return MbscFormGroupTitle;
}());
var MbscFormGroupContent = (function () {
    function MbscFormGroupContent() {
    }
    MbscFormGroupContent.ctorParameters = function () { return []; };
MbscFormGroupContent.ɵfac = function MbscFormGroupContent_Factory(t) { return new (t || MbscFormGroupContent)(); };
MbscFormGroupContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscFormGroupContent, selectors: [["mbsc-form-group-content"]], hostVars: 2, hostBindings: function MbscFormGroupContent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("mbsc-form-group-content", true);
    } }, ngContentSelectors: _c1, decls: 1, vars: 0, template: function MbscFormGroupContent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%] { display: block; }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscFormGroupContent, [{
        type: Component,
        args: [{
                selector: 'mbsc-form-group-content',
                template: '<ng-content></ng-content>',
                host: {
                    '[class.mbsc-form-group-content]': 'true'
                },
                styles: [':host { display: block; }']
            }]
    }], function () { return []; }, null); })();
    return MbscFormGroupContent;
}());
var MbscAccordion = (function () {
    function MbscAccordion() {
    }
    MbscAccordion.ctorParameters = function () { return []; };
MbscAccordion.ɵfac = function MbscAccordion_Factory(t) { return new (t || MbscAccordion)(); };
MbscAccordion.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscAccordion, selectors: [["mbsc-accordion"]], hostVars: 2, hostBindings: function MbscAccordion_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("mbsc-accordion", true);
    } }, ngContentSelectors: _c1, decls: 1, vars: 0, template: function MbscAccordion_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%] { display: block; }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscAccordion, [{
        type: Component,
        args: [{
                selector: 'mbsc-accordion',
                template: '<ng-content></ng-content>',
                host: {
                    '[class.mbsc-accordion]': 'true'
                },
                styles: [':host { display: block; }']
            }]
    }], function () { return []; }, null); })();
    return MbscAccordion;
}());
var comp = [
    MbscForm,
    MbscTextarea,
    MbscDropdown,
    MbscButton,
    MbscCheckbox,
    MbscSwitch,
    MbscStepper,
    MbscProgress,
    MbscRadioGroup,
    MbscRadioGroupBase,
    MbscRadio,
    MbscSegmentedGroup,
    MbscSegmented,
    MbscSlider,
    MbscRating,
    MbscFormGroup,
    MbscFormGroupTitle,
    MbscFormGroupContent,
    MbscAccordion
];
var MbscFormsModule = (function () {
    function MbscFormsModule() {
    }
    MbscFormsModule.ctorParameters = function () { return []; };
MbscFormsModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MbscFormsModule });
MbscFormsModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MbscFormsModule_Factory(t) { return new (t || MbscFormsModule)(); }, imports: [[FormsModule, CommonModule, MbscBaseModule, MbscInputModule], MbscInputModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscFormsModule, { declarations: function () { return [MbscForm, MbscTextarea, MbscDropdown, MbscButton, MbscCheckbox, MbscSwitch, MbscStepper, MbscProgress, MbscRadioGroup, MbscRadioGroupBase, MbscRadio, MbscSegmentedGroup, MbscSegmented, MbscSlider, MbscRating, MbscFormGroup, MbscFormGroupTitle, MbscFormGroupContent, MbscAccordion]; }, imports: function () { return [FormsModule, CommonModule, MbscBaseModule, MbscInputModule]; }, exports: function () { return [MbscForm, MbscTextarea, MbscDropdown, MbscButton, MbscCheckbox, MbscSwitch, MbscStepper, MbscProgress, MbscRadioGroup, MbscRadioGroupBase, MbscRadio, MbscSegmentedGroup, MbscSegmented, MbscSlider, MbscRating, MbscFormGroup, MbscFormGroupTitle, MbscFormGroupContent, MbscAccordion, MbscInputModule, MbscInput]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscFormsModule, [{
        type: NgModule,
        args: [{
                imports: [FormsModule, CommonModule, MbscBaseModule, MbscInputModule],
                declarations: comp,
                exports: [comp, MbscInputModule, MbscInput]
            }]
    }], function () { return []; }, null); })();
    return MbscFormsModule;
}());

// ---

var Page = function Page(el, settings) {
  var cssClass = '',
      $elm = $$1(el),
      that = this,
      s = that.settings; // Call the parent constructor

  Base.call(this, el, settings, true);
  /**
   * Page initialization.
   */

  that._init = function () {
    var ctx = s.context,
        $ctx = $$1(ctx),
        $topMenu = $ctx.find('.mbsc-ms-top .mbsc-ms'),
        $bottomMenu = $ctx.find('.mbsc-ms-bottom .mbsc-ms'),
        css = {};

    if (ctx == 'body') {
      $$1('body,html').addClass('mbsc-page-ctx');
    } else {
      $ctx.addClass('mbsc-page-ctx');
    }

    if (cssClass) {
      $elm.removeClass(cssClass);
    }

    if ($topMenu.length) {
      css.paddingTop = $topMenu[0].offsetHeight;
    }

    if ($bottomMenu.length) {
      css.paddingBottom = $bottomMenu[0].offsetHeight;
    }

    cssClass = 'mbsc-page mbsc-' + s.theme + (s.baseTheme ? ' mbsc-' + s.baseTheme : '') + (s.rtl ? ' mbsc-rtl' : ' mbsc-ltr');
    $elm.addClass(cssClass).removeClass('mbsc-cloak').css(css);
  };
  /**
   * Destroys the mobiscroll instance.
   */


  that._destroy = function () {
    $elm.removeClass(cssClass);
  }; // Constructor


  s = that.settings;
  that.init();
}; // Extend defaults

Page.prototype = {
  _hasDef: true,
  _hasTheme: true,
  _hasLang: true,
  _class: 'page',
  _defaults: {
    context: 'body'
  }
};
classes.Page = Page;
mobiscroll.themes.page.mobiscroll = {}; // ---
// Page end
// Init mbsc-page elements on page load or when mbsc-enhance event is triggeres

autoInit('[mbsc-page]', Page);

var MbscPage = (function (_super) {
    __extends(MbscPage, _super);
    function MbscPage(hostElement, optionsService, zone) {
        var _this = _super.call(this, hostElement, zone) || this;
        _this.optionsService = optionsService;
        return _this;
    }
    MbscPage.prototype.ngOnInit = function () {
        var optionsObj = extend$1({}, this.options, this.inlineOptionsObj);
        this.optionsService.options = optionsObj;
    };
    MbscPage.prototype.initControl = function () {
        var options = extend$1({}, this.options, this.inlineOptionsObj);
        this.instance = new Page(this.initElem.nativeElement, options);
    };
    MbscPage.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: MbscOptionsService, },
        { type: NgZone, },
    ]; };
    MbscPage.propDecorators = {
        'options': [{ type: Input$1 },],
        'context': [{ type: Input$1 },],
        'initElem': [{ type: ViewChild, args: ['initElement', { static: false },] },],
    };
MbscPage.ɵfac = function MbscPage_Factory(t) { return new (t || MbscPage)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscPage.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscPage, selectors: [["mbsc-page"]], viewQuery: function MbscPage_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.initElem = _t.first);
    } }, inputs: { options: "options", context: "context" }, exportAs: ["mobiscroll"], features: [ɵngcc0.ɵɵProvidersFeature([MbscOptionsService]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 3, vars: 0, consts: [["initElement", ""]], template: function MbscPage_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", null, 0);
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementEnd();
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscPage, [{
        type: Component,
        args: [{
                selector: 'mbsc-page',
                template: '<div #initElement><ng-content></ng-content></div>',
                providers: [MbscOptionsService],
                exportAs: 'mobiscroll'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService }, { type: ɵngcc0.NgZone }]; }, { options: [{
            type: Input$1
        }], context: [{
            type: Input$1
        }], initElem: [{
            type: ViewChild,
            args: ['initElement', { static: false }]
        }] }); })();
    return MbscPage;
}(MbscBase));
var MbscNote = (function () {
    function MbscNote(initialElem) {
        this.initialElem = initialElem;
        this.color = 'primary';
    }
    Object.defineProperty(MbscNote.prototype, "classNames", {
        get: function () {
            return 'mbsc-note mbsc-note-' + this.color;
        },
        enumerable: true,
        configurable: true
    });
    MbscNote.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    MbscNote.propDecorators = {
        'color': [{ type: Input$1 },],
    };
MbscNote.ɵfac = function MbscNote_Factory(t) { return new (t || MbscNote)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
MbscNote.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscNote, selectors: [["mbsc-note"]], hostVars: 2, hostBindings: function MbscNote_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassMap(ctx.classNames);
    } }, inputs: { color: "color" }, ngContentSelectors: _c1, decls: 1, vars: 0, template: function MbscNote_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%] { display: block; }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscNote, [{
        type: Component,
        args: [{
                selector: 'mbsc-note',
                template: '<ng-content></ng-content>',
                host: {
                    '[class]': 'classNames'
                },
                styles: [':host { display: block; }']
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { color: [{
            type: Input$1
        }] }); })();
    return MbscNote;
}());
var MbscAvatar = (function () {
    function MbscAvatar() {
        this.draggable = false;
    }
    MbscAvatar.ctorParameters = function () { return []; };
    MbscAvatar.propDecorators = {
        'draggable': [{ type: Input$1 },],
        'src': [{ type: Input$1 },],
        'alt': [{ type: Input$1 },],
    };
MbscAvatar.ɵfac = function MbscAvatar_Factory(t) { return new (t || MbscAvatar)(); };
MbscAvatar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscAvatar, selectors: [["mbsc-avatar"]], inputs: { draggable: "draggable", src: "src", alt: "alt" }, decls: 1, vars: 3, consts: [[1, "mbsc-avatar", 3, "src", "alt", "draggable"]], template: function MbscAvatar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "img", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("src", ctx.src, ɵngcc0.ɵɵsanitizeUrl)("alt", ctx.alt)("draggable", ctx.draggable);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscAvatar, [{
        type: Component,
        args: [{
                selector: 'mbsc-avatar',
                template: '<img class="mbsc-avatar" [src]="src" [alt]="alt" [draggable]="draggable" />'
            }]
    }], function () { return []; }, { draggable: [{
            type: Input$1
        }], src: [{
            type: Input$1
        }], alt: [{
            type: Input$1
        }] }); })();
    return MbscAvatar;
}());
var MbscPageModule = (function () {
    function MbscPageModule() {
    }
    MbscPageModule.ctorParameters = function () { return []; };
MbscPageModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MbscPageModule });
MbscPageModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MbscPageModule_Factory(t) { return new (t || MbscPageModule)(); }, imports: [[MbscBaseModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscPageModule, { declarations: [MbscPage, MbscNote, MbscAvatar], imports: [MbscBaseModule], exports: [MbscPage, MbscNote, MbscAvatar] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscPageModule, [{
        type: NgModule,
        args: [{
                imports: [MbscBaseModule],
                declarations: [MbscPage, MbscNote, MbscAvatar],
                exports: [MbscPage, MbscNote, MbscAvatar]
            }]
    }], function () { return []; }, null); })();
    return MbscPageModule;
}());

var MbscCommercialComponent = function (_super) {
  __extends(MbscCommercialComponent, _super);

  function MbscCommercialComponent(hostElement, optionsService, zone) {
    var _this = _super.call(this, hostElement, zone) || this;

    _this.optionsService = optionsService;
    _this.mbscOptions = {};
    _this.options = {};
    return _this;
  }

  MbscCommercialComponent.prototype.ngAfterViewInit = function () {
    if (!mobiscroll.alerted) {
      mobiscroll.confirm({
        title: 'Mobiscroll Lite doesn\'t support this functionality.',
        message: 'You can try the full toolset with a free trial. If you\'re having trouble, <a href="mailto:support@mobiscroll.com" target="_top">let us know</a>.',
        okText: 'Start Trial',
        cancelText: 'Ok',
        callback: function callback(startTrial) {
          if (startTrial) {
            window.open("//mobiscroll.com/", '_blank');
          }
        }
      });
      mobiscroll.alerted = true;
    }
  };

  MbscCommercialComponent.ctorParameters = function () {
    return [{
      type: ElementRef
    }, {
      type: MbscOptionsService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: NgZone
    }];
  };

  MbscCommercialComponent.propDecorators = {
    'mbscOptions': [{
      type: Input$1,
      args: ['mbsc-options']
    }],
    'options': [{
      type: Input$1
    }],
    'data': [{
      type: Input$1
    }],
    'mbscData': [{
      type: Input$1,
      args: ['mbsc-data']
    }],
    'initElem': [{
      type: ViewChild,
      args: ['initElement', {
        static: false
      }]
    }]
  };
MbscCommercialComponent.ɵfac = function MbscCommercialComponent_Factory(t) { return new (t || MbscCommercialComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MbscOptionsService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
MbscCommercialComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MbscCommercialComponent, selectors: [["mbsc-calendar"], ["", "mbsc-calendar", ""], ["mbsc-date"], ["", "mbsc-date", ""], ["mbsc-time"], ["", "mbsc-time", ""], ["mbsc-datetime"], ["", "mbsc-datetime", ""], ["mbsc-eventcalendar"], ["", "mbsc-eventcalendar", ""], ["mbsc-card"], ["", "mbsc-card", ""], ["mbsc-card-header"], ["mbsc-card-content"], ["mbsc-card-footer"], ["mbsc-card-title"], ["mbsc-card-subtitle"], ["mbsc-color"], ["", "mbsc-color", ""], ["mbsc-image"], ["", "mbsc-image", ""], ["mbsc-listview"], ["mbsc-listview-item"], ["mbsc-listview-header"], ["mbsc-listview-sublist"], ["mbsc-measurement"], ["", "mbsc-measurement", ""], ["mbsc-temperature"], ["", "mbsc-temperature", ""], ["mbsc-distance"], ["", "mbsc-distance", ""], ["mbsc-speed"], ["", "mbsc-speed", ""], ["mbsc-force"], ["", "mbsc-force", ""], ["mbsc-mass"], ["", "mbsc-mass", ""], ["mbsc-nav-item"], ["mbsc-bottom-nav"], ["mbsc-hamburger-nav"], ["mbsc-tab-nav"], ["mbsc-number"], ["", "mbsc-number", ""], ["mbsc-numpad"], ["", "mbsc-numpad", ""], ["mbsc-numpad-decimal"], ["", "mbsc-numpad-decimal", ""], ["mbsc-numpad-date"], ["", "mbsc-numpad-date", ""], ["mbsc-numpad-time"], ["", "mbsc-numpad-time", ""], ["mbsc-numpad-timespan"], ["", "mbsc-numpad-timespan", ""], ["mbsc-optionlist"], ["mbsc-option-item"], ["mbsc-range"], ["", "mbsc-range", ""], ["mbsc-scroller"], ["", "mbsc-scroller", ""], ["mbsc-scrollview"], ["", "mbsc-scrollview", ""], ["mbsc-scrollview-item"], ["", "mbsc-scrollview-item", ""], ["mbsc-select"], ["", "mbsc-select", ""], ["mbsc-timer"], ["", "mbsc-timer", ""], ["mbsc-timespan"], ["", "mbsc-timespan", ""], ["mbsc-treelist"], ["", "mbsc-treelist", ""], ["mbsc-widget"]], viewQuery: function MbscCommercialComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.initElem = _t.first);
    } }, inputs: { mbscOptions: ["mbsc-options", "mbscOptions"], options: "options", data: "data", mbscData: ["mbsc-data", "mbscData"] }, exportAs: ["mobiscroll"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, template: function MbscCommercialComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, styles: ["[_nghost-%COMP%] { display: block }"] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscCommercialComponent, [{
        type: Component,
        args: [{
                selector: "\n    mbsc-calendar, [mbsc-calendar],\n    mbsc-date, [mbsc-date],\n    mbsc-time, [mbsc-time],\n    mbsc-datetime, [mbsc-datetime],\n    mbsc-eventcalendar, [mbsc-eventcalendar],\n    mbsc-card, [mbsc-card], mbsc-card-header, mbsc-card-content, mbsc-card-footer, mbsc-card-title, mbsc-card-subtitle,\n    mbsc-color, [mbsc-color],\n    mbsc-image, [mbsc-image],\n    mbsc-listview, mbsc-listview-item, mbsc-listview-header, mbsc-listview-sublist,\n    mbsc-measurement, [mbsc-measurement], mbsc-temperature, [mbsc-temperature], mbsc-distance, [mbsc-distance], mbsc-speed, [mbsc-speed], mbsc-force, [mbsc-force], mbsc-mass, [mbsc-mass],\n    mbsc-nav-item, mbsc-bottom-nav, mbsc-hamburger-nav, mbsc-tab-nav,\n    mbsc-number, [mbsc-number],\n    mbsc-numpad, [mbsc-numpad], mbsc-numpad-decimal, [mbsc-numpad-decimal], mbsc-numpad-date, [mbsc-numpad-date], mbsc-numpad-time, [mbsc-numpad-time], mbsc-numpad-timespan, [mbsc-numpad-timespan],\n    mbsc-optionlist, mbsc-option-item,\n    mbsc-range, [mbsc-range],\n    mbsc-scroller, [mbsc-scroller],\n    mbsc-scrollview, [mbsc-scrollview], mbsc-scrollview-item, [mbsc-scrollview-item],\n    mbsc-select, [mbsc-select],\n    mbsc-timer, [mbsc-timer],\n    mbsc-timespan, [mbsc-timespan],\n    mbsc-treelist, [mbsc-treelist],\n    mbsc-widget\n    ",
                template: '<ng-content></ng-content>',
                exportAs: 'mobiscroll',
                styles: [':host { display: block }']
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: MbscOptionsService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.NgZone }]; }, { mbscOptions: [{
            type: Input$1,
            args: ['mbsc-options']
        }], options: [{
            type: Input$1
        }], data: [{
            type: Input$1
        }], mbscData: [{
            type: Input$1,
            args: ['mbsc-data']
        }], initElem: [{
            type: ViewChild,
            args: ['initElement', {
                    static: false
                }]
        }] }); })();
  return MbscCommercialComponent;
}(MbscBase);

var directives = [MbscForm, MbscRating, MbscPage, MbscNote, MbscAvatar, MbscInput, MbscDropdown, MbscTextarea, MbscButton, MbscCheckbox, MbscSwitch, MbscStepper, MbscProgress, MbscSlider, MbscRadio, MbscRadioGroup, MbscSegmentedGroup, MbscSegmented, MbscCommercialComponent, MbscFormGroup, MbscFormGroupTitle, MbscFormGroupContent];

var MbscModule = function () {
  function MbscModule() {}

  MbscModule.ctorParameters = function () {
    return [];
  };
MbscModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MbscModule });
MbscModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MbscModule_Factory(t) { return new (t || MbscModule)(); }, imports: [[FormsModule, CommonModule, MbscFormsModule, MbscPageModule], MbscFormsModule, MbscPageModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MbscModule, { declarations: function () { return [MbscCommercialComponent]; }, imports: function () { return [FormsModule, CommonModule, MbscFormsModule, MbscPageModule]; }, exports: function () { return [MbscForm, MbscRating, MbscPage, MbscNote, MbscAvatar, MbscInput, MbscDropdown, MbscTextarea, MbscButton, MbscCheckbox, MbscSwitch, MbscStepper, MbscProgress, MbscSlider, MbscRadio, MbscRadioGroup, MbscSegmentedGroup, MbscSegmented, MbscCommercialComponent, MbscFormGroup, MbscFormGroupTitle, MbscFormGroupContent, MbscCommercialComponent, MbscFormsModule, MbscPageModule]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MbscModule, [{
        type: NgModule,
        args: [{
                imports: [FormsModule, CommonModule, MbscFormsModule, MbscPageModule],
                declarations: [MbscCommercialComponent],
                exports: [directives, MbscCommercialComponent, MbscFormsModule, MbscPageModule]
            }]
    }], function () { return []; }, null); })();

  return MbscModule;
}();

// Arabic
mobiscroll.i18n.ar = {
  // Core
  rtl: true,
  // Right to left mode
  setText: 'تعيين',
  cancelText: 'إلغاء',
  clearText: 'مسح',
  selectedText: '{count} المحدد',
  // Datetime component
  dateFormat: 'dd/mm/yy',
  dayNames: ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت'],
  dayNamesShort: ['أحد', 'اثنين', 'ثلاثاء', 'أربعاء', 'خميس', 'جمعة', 'سبت'],
  dayNamesMin: ['ح', 'ن', 'ث', 'ر', 'خ', 'ج', 'س'],
  dayText: 'يوم',
  hourText: 'ساعات',
  minuteText: 'الدقائق',
  monthNames: ['يناير', 'فبراير', 'مارس', 'ابريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'],
  monthNamesShort: ['يناير', 'فبراير', 'مارس', 'ابريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'],
  monthText: 'شهر',
  secText: 'ثواني',
  amText: 'ص',
  pmText: 'م',
  timeFormat: 'hh:ii A',
  yearText: 'عام',
  nowText: 'الآن',
  // Calendar component
  firstDay: 0,
  dateText: 'تاريخ',
  timeText: 'وقت',
  closeText: 'إغلاق',
  todayText: 'اليوم',
  prevMonthText: 'الشهر السابق',
  nextMonthText: 'الشهر القادم',
  prevYearText: 'السنه السابقة',
  nextYearText: 'العام القادم',
  allDayText: 'اليوم كله',
  noEventsText: 'لا توجد احداث',
  // Event calendar
  eventText: 'الحدث',
  eventsText: 'أحداث',
  moreEventsText: 'واحد آخر',
  moreEventsPluralText: 'اثنان آخران {count}',
  // Daterange component
  fromText: 'يبدا',
  toText: 'ينتهي',
  // Measurement components
  wholeText: 'كامل',
  fractionText: 'جزء',
  unitText: 'وحدة',
  // Numpad date
  delimiter: '/',
  // Numpad decimal
  decimalSeparator: '.',
  thousandsSeparator: ',',
  // Timer / Timespan component
  labels: ['سنوات', 'أشهر', 'أيام', 'ساعة', 'دقائق', 'ثواني', ''],
  labelsShort: ['سنوات', 'أشهر', 'أيام', 'ساعة', 'دقائق', 'ثواني', ''],
  // Timer component
  startText: 'بدء',
  stopText: 'إيقاف',
  resetText: 'إعادة ضبط',
  lapText: 'الدورة',
  hideText: 'إخفاء',
  // Forms
  offText: 'إيقاف',
  onText: 'تشغيل',
  // Listview
  backText: 'رجوع',
  undoText: 'تراجع'
};

// Bulgarian
mobiscroll.i18n.bg = {
  // Core
  setText: 'Задаване',
  cancelText: 'Отмяна',
  clearText: 'Изчистване',
  selectedText: '{count} подбран',
  // Datetime component
  dateFormat: 'dd.mm.yy',
  dayNames: ['Неделя', 'Понеделник', 'Вторник', 'Сряда', 'Четвъртък', 'Петък', 'Събота'],
  dayNamesShort: ['Нед', 'Пон', 'Вто', 'Сря', 'Чет', 'Пет', 'Съб'],
  dayNamesMin: ['Не', 'По', 'Вт', 'Ср', 'Че', 'Пе', 'Съ'],
  dayText: 'ден',
  delimiter: '.',
  hourText: 'час',
  minuteText: 'минута',
  monthNames: ['Януари', 'Февруари', 'Март', 'Април', 'Май', 'Юни', 'Юли', 'Август', 'Септември', 'Октомври', 'Ноември', 'Декември'],
  monthNamesShort: ['Яну', 'Фев', 'Мар', 'Апр', 'Май', 'Юни', 'Юли', 'Авг', 'Сеп', 'Окт', 'Нов', 'Дек'],
  monthText: 'месец',
  secText: 'секунди',
  timeFormat: 'H:ii',
  yearText: 'година',
  nowText: 'Сега',
  pmText: 'pm',
  amText: 'am',
  // Calendar component
  firstDay: 1,
  dateText: 'Дата',
  timeText: 'път',
  todayText: 'днес',
  prevMonthText: 'Предишния месец',
  nextMonthText: 'Следващият месец',
  prevYearText: 'Предходната година',
  nextYearText: 'Следващата година',
  closeText: 'затвори',
  eventText: 'Събитие',
  eventsText: 'Събития',
  allDayText: 'Цял ден',
  noEventsText: 'Няма събития',
  moreEventsText: 'Още {count}',
  // Daterange component
  fromText: 'ОТ',
  toText: 'ДО',
  // Measurement components
  wholeText: 'цяло',
  fractionText: 'фракция',
  unitText: 'единица',
  // Time / Timespan component
  labels: ['Години', 'месеца', 'дни', 'часа', 'минути', 'секунди', ''],
  labelsShort: ['Години', 'месеца', 'дни', 'часа', 'минути', 'секунди', ''],
  // Timer component
  startText: 'Старт',
  stopText: 'Стоп',
  resetText: 'Нулиране',
  lapText: 'Обиколка',
  hideText: 'крия',
  // Listview
  backText: 'връщане',
  undoText: 'ОТМЯНА',
  // Form
  offText: 'ИЗКЛ',
  onText: 'ВКЛ',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Català
mobiscroll.i18n.ca = {
  // Core
  setText: 'Acceptar',
  cancelText: 'Cancel·lar',
  clearText: 'Esborrar',
  selectedText: '{count} seleccionat',
  selectedPluralText: '{count} seleccionats',
  // Datetime component
  dateFormat: 'dd/mm/yy',
  dayNames: ['Diumenge', 'Dilluns', 'Dimarts', 'Dimecres', 'Dijous', 'Divendres', 'Dissabte'],
  dayNamesShort: ['Dg', 'Dl', 'Dt', 'Dc', 'Dj', 'Dv', 'Ds'],
  dayNamesMin: ['Dg', 'Dl', 'Dt', 'Dc', 'Dj', 'Dv', 'Ds'],
  dayText: 'Dia',
  hourText: 'Hores',
  minuteText: 'Minuts',
  monthNames: ['Gener', 'Febrer', 'Març', 'Abril', 'Maig', 'Juny', 'Juliol', 'Agost', 'Setembre', 'Octubre', 'Novembre', 'Desembre'],
  monthNamesShort: ['Gen', 'Feb', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Oct', 'Nov', 'Des'],
  monthText: 'Mes',
  secText: 'Segons',
  timeFormat: 'HH:ii',
  yearText: 'Any',
  nowText: 'Ara',
  pmText: 'pm',
  amText: 'am',
  todayText: 'Avui',
  // Calendar component
  firstDay: 1,
  dateText: 'Data',
  timeText: 'Temps',
  closeText: 'Tancar',
  allDayText: 'Tot el dia',
  noEventsText: 'Cap esdeveniment',
  eventText: 'Esdeveniments',
  eventsText: 'Esdeveniments',
  moreEventsText: '{count} més',
  // Daterange component
  fromText: 'Iniciar',
  toText: 'Final',
  // Measurement components
  wholeText: 'Sencer',
  fractionText: 'Fracció',
  unitText: 'Unitat',
  // Time / Timespan component
  labels: ['Anys', 'Mesos', 'Dies', 'Hores', 'Minuts', 'Segons', ''],
  labelsShort: ['Anys', 'Mesos', 'Dies', 'Hrs', 'Mins', 'Secs', ''],
  // Timer component
  startText: 'Iniciar',
  stopText: 'Aturar',
  resetText: 'Reiniciar',
  lapText: 'Volta',
  hideText: 'Amagar',
  // Listview
  backText: 'Enrere',
  undoText: 'Desfés',
  // Form
  offText: 'No',
  onText: 'Si'
};

// Cestina
mobiscroll.i18n.cs = {
  // Core
  setText: 'Zadej',
  cancelText: 'Storno',
  clearText: 'Vymazat',
  selectedText: 'Označený: {count}',
  // Datetime component
  dateFormat: 'dd.mm.yy',
  dayNames: ['Neděle', 'Pondělí', 'Úterý', 'Středa', 'Čtvrtek', 'Pátek', 'Sobota'],
  dayNamesShort: ['Ne', 'Po', 'Út', 'St', 'Čt', 'Pá', 'So'],
  dayNamesMin: ['N', 'P', 'Ú', 'S', 'Č', 'P', 'S'],
  dayText: 'Den',
  hourText: 'Hodiny',
  minuteText: 'Minuty',
  monthNames: ['Leden', 'Únor', 'Březen', 'Duben', 'Květen', 'Červen', 'Červenec', 'Srpen', 'Září', 'Říjen', 'Listopad', 'Prosinec'],
  monthNamesShort: ['Led', 'Úno', 'Bře', 'Dub', 'Kvě', 'Čer', 'Čvc', 'Spr', 'Zář', 'Říj', 'Lis', 'Pro'],
  monthText: 'Měsíc',
  secText: 'Sekundy',
  timeFormat: 'HH:ii',
  yearText: 'Rok',
  nowText: 'Teď',
  amText: 'am',
  pmText: 'pm',
  todayText: 'Dnes',
  // Calendar component
  firstDay: 1,
  dateText: 'Datum',
  timeText: 'Čas',
  closeText: 'Zavřít',
  allDayText: 'Celý den',
  noEventsText: 'Žádné události',
  eventText: 'Událostí',
  eventsText: 'Události',
  moreEventsText: '{count} další',
  // Daterange component
  fromText: 'Začátek',
  toText: 'Konec',
  // Measurement components
  wholeText: 'Celý',
  fractionText: 'Část',
  unitText: 'Jednotka',
  // Time / Timespan component
  labels: ['Roky', 'Měsíce', 'Dny', 'Hodiny', 'Minuty', 'Sekundy', ''],
  labelsShort: ['Rok', 'Měs', 'Dny', 'Hod', 'Min', 'Sec', ''],
  // Timer component
  startText: 'Start',
  stopText: 'Stop',
  resetText: 'Resetovat',
  lapText: 'Etapa',
  hideText: 'Schovat',
  // Listview
  backText: 'Zpět',
  undoText: 'Zpět',
  // Form
  offText: 'O',
  onText: 'I',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Dansk
mobiscroll.i18n.da = {
  // Core
  setText: 'Sæt',
  cancelText: 'Annuller',
  clearText: 'Ryd',
  selectedText: '{count} valgt',
  selectedPluralText: '{count} valgt',
  // Datetime component
  dateFormat: 'dd/mm/yy',
  dayNames: ['Søndag', 'Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lørdag'],
  dayNamesShort: ['Søn', 'Man', 'Tir', 'Ons', 'Tor', 'Fre', 'Lør'],
  dayNamesMin: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  dayText: 'Dag',
  hourText: 'Timer',
  minuteText: 'Minutter',
  monthNames: ['Januar', 'Februar', 'Marts', 'April', 'Maj', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'December'],
  monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'],
  monthText: 'Måned',
  secText: 'Sekunder',
  amText: 'am',
  pmText: 'pm',
  timeFormat: 'HH.ii',
  yearText: 'År',
  nowText: 'Nu',
  todayText: 'I dag',
  // Calendar component
  firstDay: 1,
  dateText: 'Dato',
  timeText: 'Tid',
  closeText: 'Luk',
  allDayText: 'Hele dagen',
  noEventsText: 'Ingen begivenheder',
  eventText: 'Begivenheder',
  eventsText: 'Begivenheder',
  moreEventsText: '{count} mere',
  // Daterange component
  fromText: 'Start',
  toText: 'Slut',
  // Measurement components
  wholeText: 'Hele',
  fractionText: 'Dele',
  unitText: 'Enhed',
  // Time / Timespan component
  labels: ['År', 'Måneder', 'Dage', 'Timer', 'Minutter', 'Sekunder', ''],
  labelsShort: ['År', 'Mdr', 'Dg', 'Timer', 'Min', 'Sek', ''],
  // Timer component
  startText: 'Start',
  stopText: 'Stop',
  resetText: 'Nulstil',
  lapText: 'Omgang',
  hideText: 'Skjul',
  // Forms
  offText: 'Fra',
  onText: 'Til',
  // Listview
  backText: 'Tilbage',
  undoText: 'Fortryd'
};

// Deutsch
mobiscroll.i18n.de = {
  // Core
  setText: 'OK',
  cancelText: 'Abbrechen',
  clearText: 'Löschen',
  selectedText: '{count} ausgewählt',
  // Datetime component
  dateFormat: 'dd.mm.yy',
  dayNames: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'],
  dayNamesShort: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],
  dayNamesMin: ['S', 'M', 'D', 'M', 'D', 'F', 'S'],
  dayText: 'Tag',
  delimiter: '.',
  hourText: 'Stunde',
  minuteText: 'Minuten',
  monthNames: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],
  monthNamesShort: ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
  monthText: 'Monat',
  secText: 'Sekunden',
  timeFormat: 'HH:ii',
  yearText: 'Jahr',
  nowText: 'Jetzt',
  pmText: 'pm',
  amText: 'am',
  todayText: 'Heute',
  // Calendar component
  firstDay: 1,
  dateText: 'Datum',
  timeText: 'Zeit',
  closeText: 'Schließen',
  allDayText: 'Ganztägig',
  noEventsText: 'Keine Ereignisse',
  eventText: 'Ereignis',
  eventsText: 'Ereignisse',
  moreEventsText: '{count} weiteres Element',
  moreEventsPluralText: '{count} weitere Elemente',
  // Daterange component
  fromText: 'Von',
  toText: 'Bis',
  // Measurement components
  wholeText: 'Ganze Zahl',
  fractionText: 'Bruchzahl',
  unitText: 'Maßeinheit',
  // Time / Timespan component
  labels: ['Jahre', 'Monate', 'Tage', 'Stunden', 'Minuten', 'Sekunden', ''],
  labelsShort: ['Jahr.', 'Mon.', 'Tag.', 'Std.', 'Min.', 'Sek.', ''],
  // Timer component
  startText: 'Starten',
  stopText: 'Stoppen',
  resetText: 'Zurücksetzen',
  lapText: 'Lap',
  hideText: 'Ausblenden',
  // Listview
  backText: 'Zurück',
  undoText: 'Rückgängig machen',
  // Form
  offText: 'Aus',
  onText: 'Ein',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Greek
mobiscroll.i18n.el = {
  // Core
  setText: 'Ορισμος',
  cancelText: 'Ακυρωση',
  clearText: 'Διαγραφη',
  selectedText: '{count} επιλεγμένα',
  // Datetime component
  dateFormat: 'dd/mm/yy',
  dayNames: ['Κυριακή', 'Δευτέρα', 'Τρίτη', 'Τετάρτη', 'Πέμπτη', 'Παρασκευή', 'Σάββατο'],
  dayNamesShort: ['Κυρ', 'Δευ', 'Τρι', 'Τετ', 'Πεμ', 'Παρ', 'Σαβ'],
  dayNamesMin: ['Κυ', 'Δε', 'Τρ', 'Τε', 'Πε', 'Πα', 'Σα'],
  dayText: 'ημέρα',
  delimiter: '/',
  hourText: 'ώρα',
  minuteText: 'λεπτό',
  monthNames: ['Ιανουάριος', 'Φεβρουάριος', 'Μάρτιος', 'Απρίλιος', 'Μάιος', 'Ιούνιος', 'Ιούλιος', 'Αύγουστος', 'Σεπτέμβριος', 'Οκτώβριος', 'Νοέμβριος', 'Δεκέμβριος'],
  monthNamesShort: ['Ιαν', 'Φεβ', 'Μαρ', 'Απρ', 'Μαι', 'Ιουν', 'Ιουλ', 'Αυγ', 'Σεπ', 'Οκτ', 'Νοε', 'Δεκ'],
  monthText: 'Μήνας',
  secText: 'δευτερόλεπτα',
  timeFormat: 'H:ii',
  yearText: 'έτος',
  nowText: 'τώρα',
  pmText: 'μμ',
  amText: 'πμ',
  // Calendar component
  firstDay: 1,
  dateText: 'Ημερομηνία',
  timeText: 'φορά',
  todayText: 'Σήμερα',
  prevMonthText: 'Προηγούμενο μήνα',
  nextMonthText: 'Επόμενο μήνα',
  prevYearText: 'Προηγούμενο έτος',
  nextYearText: 'Επόμενο έτος',
  closeText: 'Κλείσιμο',
  eventText: 'Γεγονότα',
  eventsText: 'Γεγονότα',
  allDayText: 'Ολοήμερο',
  noEventsText: 'Δεν υπάρχουν γεγονότα',
  moreEventsText: '{count} ακόμη',
  // Daterange component
  fromText: 'Αρχή',
  toText: 'Τέλος',
  // Measurement components
  wholeText: 'Ολόκληρος',
  fractionText: 'κλάσμα',
  unitText: 'Μονάδα',
  // Time / Timespan component
  labels: ['Χρόνια', 'Μήνες', 'Ημέρες', 'Ωρες', 'Λεπτά', 'δευτερόλεπτα', ''],
  labelsShort: ['Χρόνια', 'Μήνες', 'Ημέρες', 'Ωρες', 'Λεπτά', 'δευτ', ''],
  // Timer component
  startText: '΄Εναρξη',
  stopText: 'Διακοπή',
  resetText: 'Επαναφορά',
  lapText: 'Γύρος',
  hideText: 'κρύβω',
  // Listview
  backText: 'Πίσω',
  undoText: 'Αναιρεση',
  // Form
  offText: 'Ανενεργό',
  onText: 'Ενεργό',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// English (UK)
mobiscroll.i18n['en-GB'] = mobiscroll.i18n['en-UK'] = {
  dateFormat: 'dd/mm/yy',
  timeFormat: 'HH:ii'
};

// Español
mobiscroll.i18n.es = {
  // Core
  setText: 'Aceptar',
  cancelText: 'Cancelar',
  clearText: 'Borrar',
  selectedText: '{count} seleccionado',
  selectedPluralText: '{count} seleccionados',
  // Datetime component
  dateFormat: 'dd/mm/yy',
  dayNames: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
  dayNamesShort: ['Do', 'Lu', 'Ma', 'Mi', 'Ju', 'Vi', 'Sá'],
  dayNamesMin: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
  dayText: 'Día',
  hourText: 'Horas',
  minuteText: 'Minutos',
  monthNames: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto', 'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'],
  monthNamesShort: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
  monthText: 'Mes',
  secText: 'Segundos',
  timeFormat: 'HH:ii',
  yearText: 'A&ntilde;o',
  nowText: 'Ahora',
  pmText: 'pm',
  amText: 'am',
  todayText: 'Hoy',
  // Calendar component
  firstDay: 1,
  dateText: 'Fecha',
  timeText: 'Tiempo',
  closeText: 'Cerrar',
  allDayText: 'Todo el día',
  noEventsText: 'No hay eventos',
  eventText: 'Evento',
  eventsText: 'Eventos',
  moreEventsText: '{count} más',
  // Daterange component
  fromText: 'Iniciar',
  toText: 'Final',
  // Measurement components
  wholeText: 'Entero',
  fractionText: 'Fracción',
  unitText: 'Unidad',
  // Time / Timespan component
  labels: ['Años', 'Meses', 'Días', 'Horas', 'Minutos', 'Segundos', ''],
  labelsShort: ['Año', 'Mes', 'Día', 'Hora', 'Min', 'Seg', ''],
  // Timer component
  startText: 'Iniciar',
  stopText: 'Deténgase',
  resetText: 'Reinicializar',
  lapText: 'Lap',
  hideText: 'Esconder',
  // Listview
  backText: 'Atrás',
  undoText: 'Deshacer',
  // Form
  offText: 'No',
  onText: 'Sí',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// فارسی
mobiscroll.i18n.fa = {
  // Core
  setText: 'تاييد',
  cancelText: 'انصراف',
  clearText: 'واضح ',
  selectedText: '{count} منتخب',
  // Datetime component
  calendarSystem: 'jalali',
  dateFormat: 'yy/mm/dd',
  dayNames: ['يکشنبه', 'دوشنبه', 'سه‌شنبه', 'چهارشنبه', 'پنج‌شنبه', 'جمعه', 'شنبه'],
  dayNamesShort: ['ی', 'د', 'س', 'چ', 'پ', 'ج', 'ش'],
  dayNamesMin: ['ی', 'د', 'س', 'چ', 'پ', 'ج', 'ش'],
  dayText: 'روز',
  hourText: 'ساعت',
  minuteText: 'دقيقه',
  monthNames: ['فروردين', 'ارديبهشت', 'خرداد', 'تير', 'مرداد', 'شهريور', 'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'],
  monthNamesShort: ['فروردين', 'ارديبهشت', 'خرداد', 'تير', 'مرداد', 'شهريور', 'مهر', 'آبان', 'آذر', 'دی', 'بهمن', 'اسفند'],
  monthText: 'ماه',
  secText: 'ثانيه',
  timeFormat: 'HH:ii',
  timeWheels: 'iiHH',
  // Need this for correct RTL display
  yearText: 'سال',
  nowText: 'اکنون',
  amText: 'ب',
  pmText: 'ص',
  todayText: 'امروز',
  //getNumber: function (n) {
  //    var i,
  //        nums = ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"],
  //        res = '';
  //    n = n + '';
  //    for (i = 0; i < n.length; i++) {
  //        res += nums[+n[i]];
  //    }
  //    return res;
  //},
  // Calendar component
  firstDay: 6,
  rtl: true,
  dateText: 'تاریخ ',
  timeText: 'زمان ',
  closeText: 'نزدیک',
  allDayText: 'تمام روز',
  noEventsText: 'هیچ رویداد',
  eventText: 'رویداد',
  eventsText: 'رویدادها',
  moreEventsText: '{count} مورد دیگر',
  // Daterange component
  fromText: 'شروع ',
  toText: 'پایان',
  // Measurement components
  wholeText: 'تمام',
  fractionText: 'کسر',
  unitText: 'واحد',
  // Time / Timespan component
  labels: ['سال', 'ماه', 'روز', 'ساعت', 'دقیقه', 'ثانیه', ''],
  labelsShort: ['سال', 'ماه', 'روز', 'ساعت', 'دقیقه', 'ثانیه', ''],
  // Timer component
  startText: 'شروع',
  stopText: 'پايان',
  resetText: 'تنظیم مجدد',
  lapText: 'Lap',
  hideText: 'پنهان کردن',
  // Listview
  backText: 'پشت',
  undoText: 'واچیدن'
};

// Suomi
mobiscroll.i18n.fi = {
  // Core
  setText: 'Aseta',
  cancelText: 'Peruuta',
  clearText: 'Tyhjennä',
  selectedText: '{count} valita',
  // Datetime component
  dateFormat: 'd. MM yy',
  dayNames: ['Sunnuntai', 'Maanantai', 'Tiistai', 'Keskiviiko', 'Torstai', 'Perjantai', 'Lauantai'],
  dayNamesShort: ['Su', 'Ma', 'Ti', 'Ke', 'To', 'Pe', 'La'],
  dayNamesMin: ['S', 'M', 'T', 'K', 'T', 'P', 'L'],
  dayText: 'Päivä',
  delimiter: '.',
  hourText: 'Tuntia',
  minuteText: 'Minuutti',
  monthNames: ['Tammikuu', 'Helmikuu', 'Maaliskuu', 'Huhtikuu', 'Toukokuu', 'Kesäkuu', 'Heinäkuu', 'Elokuu', 'Syyskuu', 'Lokakuu', 'Marraskuu', 'Joulukuu'],
  monthNamesShort: ['Tam', 'Hel', 'Maa', 'Huh', 'Tou', 'Kes', 'Hei', 'Elo', 'Syy', 'Lok', 'Mar', 'Jou'],
  monthText: 'Kuukausi',
  secText: 'Sekunda',
  timeFormat: 'H:ii',
  yearText: 'Vuosi',
  nowText: 'Nyt',
  pmText: 'pm',
  amText: 'am',
  // Calendar component
  firstDay: 1,
  dateText: 'Päiväys',
  timeText: 'Aika',
  todayText: 'Tänään',
  prevMonthText: 'Edellinen kuukausi',
  nextMonthText: 'Ensi kuussa',
  prevYearText: 'Edellinen vuosi',
  nextYearText: 'Ensi vuosi',
  closeText: 'Sulje',
  eventText: 'Tapahtumia',
  eventsText: 'Tapahtumia',
  allDayText: 'Koko päivä',
  noEventsText: 'Ei tapahtumia',
  moreEventsText: '{count} muu',
  moreEventsPluralText: '{count} muuta',
  // Daterange component
  fromText: 'Alkaa',
  toText: 'Päättyy',
  // Measurement components
  wholeText: 'Kokonainen',
  fractionText: 'Murtoluku',
  unitText: 'Yksikkö',
  // Time / Timespan component
  labels: ['Vuosi', 'Kuukausi', 'Päivä', 'Tunnin', 'Minuutti', 'sekuntia', ''],
  labelsShort: ['Vuo', 'Kuu', 'Päi', 'Tun', 'Min', 'Sek', ''],
  // Timer component
  startText: 'Käynnistys',
  stopText: 'Seis',
  resetText: 'Aseta uudelleen',
  lapText: 'Kierros',
  hideText: 'Vuota',
  // Listview
  backText: 'Edellinen',
  undoText: 'Kumoa',
  // Form
  offText: 'Pois',
  onText: 'Päällä',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Français
mobiscroll.i18n.fr = {
  // Core
  setText: 'Terminer',
  cancelText: 'Annuler',
  clearText: 'Effacer',
  selectedText: '{count} sélectionné',
  selectedPluralText: '{count} sélectionnés',
  // Datetime component
  dateFormat: 'dd/mm/yy',
  dayNames: ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'],
  dayNamesShort: ['Dim.', 'Lun.', 'Mar.', 'Mer.', 'Jeu.', 'Ven.', 'Sam.'],
  dayNamesMin: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
  dayText: 'Jour',
  monthText: 'Mois',
  monthNames: ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'],
  monthNamesShort: ['Janv.', 'Févr.', 'Mars', 'Avril', 'Mai', 'Juin', 'Juil.', 'Août', 'Sept.', 'Oct.', 'Nov.', 'Déc.'],
  hourText: 'Heures',
  minuteText: 'Minutes',
  secText: 'Secondes',
  timeFormat: 'HH:ii',
  yearText: 'Année',
  nowText: 'Maintenant',
  pmText: 'pm',
  amText: 'am',
  todayText: "Aujourd'hui",
  // Calendar component
  firstDay: 1,
  dateText: 'Date',
  timeText: 'Heure',
  closeText: 'Fermer',
  allDayText: 'Toute la journée',
  noEventsText: 'Aucun événement',
  eventText: 'Événement',
  eventsText: 'Événements',
  moreEventsText: '{count} autre',
  moreEventsPluralText: '{count} autres',
  // Daterange component
  fromText: 'Démarrer',
  toText: 'Fin',
  // Measurement components
  wholeText: 'Entier',
  fractionText: 'Fraction',
  unitText: 'Unité',
  // Time / Timespan component
  labels: ['Ans', 'Mois', 'Jours', 'Heures', 'Minutes', 'Secondes', ''],
  labelsShort: ['Ans', 'Mois', 'Jours', 'Hrs', 'Min', 'Sec', ''],
  // Timer component
  startText: 'Démarrer',
  stopText: 'Arrêter',
  resetText: 'Réinitialiser',
  lapText: 'Lap',
  hideText: 'Cachez',
  // Listview
  backText: 'Retour',
  undoText: 'Annuler',
  // Form
  offText: 'Non',
  onText: 'Oui',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Hebrew
mobiscroll.i18n.he = {
  // Core
  rtl: true,
  // Right to left mode
  setText: 'שמירה',
  cancelText: 'ביטול',
  clearText: 'נקה',
  selectedText: '{count} נבחר',
  selectedPluralText: '{count} נבחרו',
  // Datetime component
  dateFormat: 'dd/mm/yy',
  dayNames: ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת'],
  dayNamesShort: ["א'", "ב'", "ג'", "ד'", "ה'", "ו'", "ש'"],
  dayNamesMin: ['א', 'ב', 'ג', 'ד', 'ה', 'ו', 'ש'],
  dayText: 'יום',
  hourText: 'שעות',
  minuteText: 'דקות',
  monthNames: ['ינואר', 'פברואר', 'מרץ', 'אפריל', 'מאי', 'יוני', 'יולי', 'אוגוסט', 'ספטמבר', 'אוקטובר', 'נובמבר', 'דצמבר'],
  monthNamesShort: ["ינו", "פבר", "מרץ", "אפר", "מאי", "יונ", "יול", "אוג", "ספט", "אוק", "נוב", "דצמ"],
  monthText: 'חודש',
  secText: 'שניות',
  amText: 'am',
  pmText: 'pm',
  timeFormat: 'HH:ii',
  timeWheels: 'iiHH',
  // Need this for correct RTL display
  yearText: 'שנה',
  nowText: 'עכשיו',
  // Calendar component
  firstDay: 0,
  dateText: 'תאריך',
  timeText: 'זמן',
  closeText: 'סגירה',
  todayText: 'היום',
  allDayText: 'כל היום',
  noEventsText: 'אין אירועים',
  // Event calendar
  eventText: 'מִקרֶה',
  eventsText: 'מִקרֶה',
  moreEventsText: 'אירוע אחד נוסף',
  moreEventsPluralText: '{count} אירועים נוספים',
  // Daterange component
  fromText: 'התחלה',
  toText: 'סיום',
  // Measurement components
  wholeText: 'כֹּל',
  fractionText: 'שבריר',
  unitText: 'יחידה',
  // Time / Timespan component
  labels: ['שנים', 'חודשים', 'ימים', 'שעות', 'דקות', 'שניים', ''],
  labelsShort: ['שנים', 'חודשים', 'ימים', 'שעות', 'דקות', 'שניים', ''],
  // Timer component
  startText: 'התחל',
  stopText: 'עצור',
  resetText: 'אתחול',
  lapText: 'הקפה',
  hideText: 'הסתר',
  // Forms
  offText: 'כיבוי',
  onText: 'הפעלה',
  // Listview
  backText: 'חזור',
  undoText: 'ביטול פעולה'
};

// Hindi
mobiscroll.i18n.hi = {
  // Core
  setText: 'सैट करें',
  cancelText: 'रद्द करें',
  clearText: 'साफ़ को',
  selectedText: '{count} चयनित',
  // Datetime component
  dateFormat: 'dd/mm/yy',
  dayNames: ['रविवार', 'सोमवार', 'मंगलवार', 'बुधवार', 'गुरुवार', 'शुक्रवार', 'शनिवार'],
  dayNamesShort: ['रवि', 'सोम', 'मंगल', 'बुध', 'गुरु', 'शुक्र', 'शनि'],
  dayNamesMin: ['रवि', 'सोम', 'मंगल', 'बुध', 'गुरु', 'शुक्र', 'शनि'],
  dayText: 'दिन',
  delimiter: '.',
  hourText: 'घंटा',
  minuteText: 'मिनट',
  monthNames: ['जनवरी ', 'फरवरी', 'मार्च', 'अप्रेल', 'मई', 'जून', 'जूलाई', 'अगस्त ', 'सितम्बर', 'अक्टूबर', 'नवम्बर', 'दिसम्बर'],
  monthNamesShort: ['जन', 'फर', 'मार्च', 'अप्रेल', 'मई', 'जून', 'जूलाई', 'अग', 'सित', 'अक्ट', 'नव', 'दि'],
  monthText: 'महीना',
  secText: 'सेकंड',
  timeFormat: 'H:ii',
  yearText: 'साल',
  nowText: 'अब',
  pmText: 'अपराह्न',
  amText: 'पूर्वाह्न',
  // Calendar component
  firstDay: 1,
  dateText: 'तिथि',
  timeText: 'समय',
  todayText: 'आज',
  prevMonthText: 'पिछ्ला महिना',
  nextMonthText: 'अगले महीने',
  prevYearText: 'पिछला साल',
  nextYearText: 'अगले वर्ष',
  closeText: 'बंद',
  eventText: 'इवेट३',
  eventsText: 'इवेट३',
  allDayText: 'पूरे दिन',
  noEventsText: 'Ei tapahtumia',
  moreEventsText: '{count} और',
  // Daterange component
  fromText: 'से',
  toText: 'तक',
  // Measurement components
  wholeText: 'समूचा',
  fractionText: 'अंश',
  unitText: 'इकाई',
  // Time / Timespan component
  labels: ['साल', 'महीने', 'दिन', 'घंटे', 'मिनट', 'सेकंड', ''],
  labelsShort: ['साल', 'महीने', 'दिन', 'घंटे', 'मिनट', 'सेकंड', ''],
  // Timer component
  startText: 'प्रारंभ',
  stopText: 'रोकें',
  resetText: 'रीसेट करें',
  lapText: 'लैप',
  hideText: 'छिपाना',
  // Listview
  backText: 'वापस',
  // check
  undoText: 'वापस लाएं',
  // Form
  offText: 'बंद',
  onText: 'चालू',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Croatian
mobiscroll.i18n.hr = {
  // Core
  setText: 'Postavi',
  cancelText: 'Izlaz',
  clearText: 'Izbriši',
  selectedText: '{count} odabran',
  // Datetime component
  dateFormat: 'dd.mm.yy',
  dayNames: ['Nedjelja', 'Ponedjeljak', 'Utorak', 'Srijeda', 'Četvrtak', 'Petak', 'Subota'],
  dayNamesShort: ['Ned', 'Pon', 'Uto', 'Sri', 'Čet', 'Pet', 'Sub'],
  dayNamesMin: ['Ne', 'Po', 'Ut', 'Sr', 'Če', 'Pe', 'Su'],
  dayText: 'Dan',
  delimiter: '.',
  hourText: 'Sat',
  minuteText: 'Minuta',
  monthNames: ['Siječanj', 'Veljača', 'Ožujak', 'Travanj', 'Svibanj', 'Lipanj', 'Srpanj', 'Kolovoz', 'Rujan', 'Listopad', 'Studeni', 'Prosinac'],
  monthNamesShort: ['Sij', 'Velj', 'Ožu', 'Tra', 'Svi', 'Lip', 'Srp', 'Kol', 'Ruj', 'Lis', 'Stu', 'Pro'],
  monthText: 'Mjesec',
  secText: 'Sekunda',
  timeFormat: 'H:ii',
  yearText: 'Godina',
  nowText: 'Sada',
  pmText: 'pm',
  amText: 'am',
  // Calendar component
  firstDay: 1,
  dateText: 'Datum',
  timeText: 'Vrijeme',
  todayText: 'Danas',
  prevMonthText: 'Prethodni mjesec',
  nextMonthText: 'Sljedeći mjesec',
  prevYearText: 'Prethodni godina',
  nextYearText: 'Slijedeće godine',
  closeText: 'Zatvori',
  eventText: 'Događaj',
  eventsText: 'događaja',
  allDayText: 'Cijeli dan',
  noEventsText: 'Bez događaja',
  moreEventsText: 'Još {count}',
  // Daterange component
  fromText: 'Počinje',
  toText: 'Završava',
  // Measurement components
  wholeText: 'Cjelina',
  fractionText: 'Frakcija',
  unitText: 'Jedinica',
  // Time / Timespan component
  labels: ['godina', 'mjesec', 'dan', 'sat', 'minuta', 'sekunda', ''],
  labelsShort: ['god', 'mje', 'dan', 'sat', 'min', 'sec', ''],
  // Timer component
  startText: 'Početak',
  stopText: 'Prekid',
  resetText: 'Resetiraj',
  lapText: 'Ciklus',
  hideText: 'Sakriti',
  // Listview
  backText: 'Natrag',
  undoText: 'Poništavanje',
  // Form
  offText: 'Uklj.',
  onText: 'Isklj.',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Magyar
mobiscroll.i18n.hu = {
  // Core
  setText: 'OK',
  cancelText: 'Mégse',
  clearText: 'Törlés',
  selectedText: '{count} kiválasztva',
  // Datetime component
  dateFormat: 'yy.mm.dd.',
  dayNames: ['Vasárnap', 'Hétfő', 'Kedd', 'Szerda', 'Csütörtök', 'Péntek', 'Szombat'],
  dayNamesShort: ['Va', 'Hé', 'Ke', 'Sze', 'Csü', 'Pé', 'Szo'],
  dayNamesMin: ['V', 'H', 'K', 'Sz', 'Cs', 'P', 'Sz'],
  dayText: 'Nap',
  delimiter: '.',
  hourText: 'Óra',
  minuteText: 'Perc',
  monthNames: ['Január', 'Február', 'Március', 'Április', 'Május', 'Június', 'Július', 'Augusztus', 'Szeptember', 'Október', 'November', 'December'],
  monthNamesShort: ['Jan', 'Feb', 'Már', 'Ápr', 'Máj', 'Jún', 'Júl', 'Aug', 'Szep', 'Okt', 'Nov', 'Dec'],
  monthText: 'Hónap',
  secText: 'Másodperc',
  timeFormat: 'H:ii',
  yearText: 'Év',
  nowText: 'Most',
  pmText: 'pm',
  amText: 'am',
  // Calendar component
  firstDay: 1,
  dateText: 'Dátum',
  timeText: 'Idő',
  todayText: 'Ma',
  prevMonthText: 'Előző hónap',
  nextMonthText: 'Következő hónap',
  prevYearText: 'Előző év',
  nextYearText: 'Következő év',
  closeText: 'Bezár',
  eventText: 'esemény',
  eventsText: 'esemény',
  allDayText: 'Egész nap',
  noEventsText: 'Nincs esemény',
  moreEventsText: '{count} további',
  // Daterange component
  fromText: 'Eleje',
  toText: 'Vége',
  // Measurement components
  wholeText: 'Egész',
  fractionText: 'Tört',
  unitText: 'Egység',
  // Time / Timespan component
  labels: ['Év', 'Hónap', 'Nap', 'Óra', 'Perc', 'Másodperc', ''],
  labelsShort: ['Év', 'Hó.', 'Nap', 'Óra', 'Perc', 'Mp.', ''],
  // Timer component
  startText: 'Indít',
  stopText: 'Megállít',
  resetText: 'Visszaállít',
  lapText: 'Lap',
  hideText: 'Elrejt',
  // Listview
  backText: 'Vissza',
  undoText: 'Visszavon',
  // Form
  offText: 'Ki',
  onText: 'Be',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Italiano 
mobiscroll.i18n.it = {
  // Core
  setText: 'OK',
  cancelText: 'Annulla',
  clearText: 'Chiarire',
  selectedText: '{count} selezionato',
  selectedPluralText: '{count} selezionati',
  // Datetime component
  dateFormat: 'dd/mm/yy',
  dayNames: ['Domenica', 'Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato'],
  dayNamesShort: ['Do', 'Lu', 'Ma', 'Me', 'Gi', 'Ve', 'Sa'],
  dayNamesMin: ['D', 'L', 'M', 'M', 'G', 'V', 'S'],
  dayText: 'Giorno',
  hourText: 'Ore',
  minuteText: 'Minuti',
  monthNames: ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'],
  monthNamesShort: ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu', 'Lug', 'Ago', 'Set', 'Ott', 'Nov', 'Dic'],
  monthText: 'Mese',
  secText: 'Secondi',
  timeFormat: 'HH:ii',
  yearText: 'Anno',
  nowText: 'Ora',
  pmText: 'pm',
  amText: 'am',
  todayText: 'Oggi',
  // Calendar component
  firstDay: 1,
  dateText: 'Data',
  timeText: 'Volta',
  closeText: 'Chiudere',
  allDayText: 'Tutto il giorno',
  noEventsText: 'Nessun evento',
  eventText: 'Evento',
  eventsText: 'Eventi',
  moreEventsText: '{count} altro',
  moreEventsPluralText: 'altri {count}',
  // Daterange component
  fromText: 'Inizio',
  toText: 'Fine',
  // Measurement components
  wholeText: 'Intero',
  fractionText: 'Frazione',
  unitText: 'Unità',
  // Time / Timespan component
  labels: ['Anni', 'Mesi', 'Giorni', 'Ore', 'Minuti', 'Secondi', ''],
  labelsShort: ['Anni', 'Mesi', 'Gio', 'Ore', 'Min', 'Sec', ''],
  // Timer component
  startText: 'Inizio',
  stopText: 'Arresto',
  resetText: 'Ripristina',
  lapText: 'Lap',
  hideText: 'Nascondi',
  // Listview
  backText: 'Indietro',
  undoText: 'Annulla',
  // Form
  offText: 'Via',
  onText: 'Su',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// 日本語 - Japanese
mobiscroll.i18n.ja = {
  // Core
  setText: 'セット',
  cancelText: 'キャンセル',
  clearText: 'クリア',
  selectedText: '{count} 選択',
  // Datetime component
  dateFormat: 'yy年mm月dd日',
  dayNames: ['日', '月', '火', '水', '木', '金', '土'],
  dayNamesShort: ['日', '月', '火', '水', '木', '金', '土'],
  dayNamesMin: ['日', '月', '火', '水', '木', '金', '土'],
  dayText: '日',
  hourText: '時',
  minuteText: '分',
  monthNames: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
  monthNamesShort: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
  monthText: '月',
  secText: '秒',
  timeFormat: 'HH:ii',
  yearText: '年',
  nowText: '今',
  pmText: '午後',
  amText: '午前',
  yearSuffix: '年',
  monthSuffix: '月',
  daySuffix: '日',
  todayText: '今日',
  // Calendar component
  dateText: '日付',
  timeText: '時間',
  closeText: 'クローズ',
  allDayText: '終日',
  noEventsText: 'イベントはありません',
  eventText: 'イベント',
  eventsText: 'イベント',
  moreEventsText: '他 {count} 件',
  // Daterange component
  fromText: '開始',
  toText: '終わり',
  // Measurement components
  wholeText: '全数',
  fractionText: '分数',
  unitText: '単位',
  // Time / Timespan component
  labels: ['年間', '月間', '日間', '時間', '分', '秒', ''],
  labelsShort: ['年間', '月間', '日間', '時間', '分', '秒', ''],
  // Timer component
  startText: '開始',
  stopText: '停止',
  resetText: 'リセット',
  lapText: 'ラップ',
  hideText: '隠す',
  // Listview
  backText: 'バック',
  undoText: 'アンドゥ'
};

// Korean
mobiscroll.i18n.ko = {
  // Core
  setText: '설정',
  cancelText: '취소',
  clearText: '삭제',
  selectedText: '{count} 선택된',
  // Datetime component
  dateFormat: 'yy년mm월dd일',
  dayNames: ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'],
  dayNamesShort: ['일', '월', '화', '수', '목', '금', '토'],
  dayNamesMin: ['일', '월', '화', '수', '목', '금', '토'],
  dayText: '일',
  delimiter: '-',
  hourText: '시간',
  minuteText: '분',
  monthNames: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
  monthNamesShort: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],
  monthText: '달',
  secText: '초',
  timeFormat: 'H:ii',
  yearText: '년',
  nowText: '지금',
  pmText: '오후',
  amText: '오전',
  yearSuffix: '년',
  monthSuffix: '월',
  daySuffix: '일',
  // Calendar component
  firstDay: 0,
  dateText: '날짜',
  timeText: '시간',
  todayText: '오늘',
  prevMonthText: '이전 달',
  nextMonthText: '다음 달',
  prevYearText: '이전 년',
  nextYearText: '다음 년',
  closeText: '닫기',
  eventText: '이벤트',
  eventsText: '이벤트',
  allDayText: '종일',
  noEventsText: '이벤트 없음',
  moreEventsText: '{count}개 더보기',
  // Daterange component
  fromText: '시작',
  toText: '종료',
  // Measurement components
  wholeText: '정수',
  fractionText: '분수',
  unitText: '단위',
  // Time / Timespan component
  labels: ['년', '달', '일', '시간', '분', '초', ''],
  labelsShort: ['년', '달', '일', '시간', '분', '초', ''],
  // Timer component
  startText: '시작',
  stopText: '중지 ',
  resetText: '초기화',
  lapText: '기록',
  hideText: '숨는 장소',
  // Listview
  backText: '뒤로',
  undoText: '실행취소',
  // Form
  offText: '끔',
  onText: '켬',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Lietuvių
mobiscroll.i18n.lt = {
  // Core
  setText: 'OK',
  cancelText: 'Atšaukti',
  clearText: 'Išvalyti',
  selectedText: 'Pasirinktas {count}',
  selectedPluralText: 'Pasirinkti {count}',
  // Datetime component
  dateFormat: 'yy-mm-dd',
  dayNames: ['Sekmadienis', 'Pirmadienis', 'Antradienis', 'Trečiadienis', 'Ketvirtadienis', 'Penktadienis', 'Šeštadienis'],
  dayNamesShort: ['S', 'Pr', 'A', 'T', 'K', 'Pn', 'Š'],
  dayNamesMin: ['S', 'Pr', 'A', 'T', 'K', 'Pn', 'Š'],
  dayText: 'Diena',
  hourText: 'Valanda',
  minuteText: 'Minutes',
  monthNames: ['Sausis', 'Vasaris', 'Kovas', 'Balandis', 'Gegužė', 'Birželis', 'Liepa', 'Rugpjūtis', 'Rugsėjis', 'Spalis', 'Lapkritis', 'Gruodis'],
  monthNamesShort: ['Sau', 'Vas', 'Kov', 'Bal', 'Geg', 'Bir', 'Lie', 'Rugp', 'Rugs', 'Spa', 'Lap', 'Gruo'],
  monthText: 'Mėnuo',
  secText: 'Sekundes',
  amText: 'am',
  pmText: 'pm',
  timeFormat: 'HH:ii',
  yearText: 'Metai',
  nowText: 'Dabar',
  todayText: 'Šiandien',
  // Calendar component
  firstDay: 1,
  dateText: 'Data',
  timeText: 'Laikas',
  closeText: 'Uždaryti',
  allDayText: 'Visą dieną',
  noEventsText: 'Nėra įvykių',
  eventText: 'Įvykių',
  eventsText: 'Įvykiai',
  moreEventsText: 'Dar {count}',
  // Daterange component
  fromText: 'Nuo',
  toText: 'Iki',
  // Measurement components
  wholeText: 'Visas',
  fractionText: 'Frakcija',
  unitText: 'Vienetas',
  // Time / Timespan component
  labels: ['Metai', 'Mėnesiai', 'Dienos', 'Valandos', 'Minutes', 'Sekundes', ''],
  labelsShort: ['m', 'mėn.', 'd', 'h', 'min', 's', ''],
  // Timer component
  startText: 'Pradėti',
  stopText: 'Sustabdyti',
  resetText: 'Išnaujo',
  lapText: 'Ratas',
  hideText: 'Slėpti',
  // Listview
  backText: 'Atgal',
  undoText: 'Anuliuoti',
  // Form
  offText: 'Išj.',
  onText: 'Įj.',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Nederlands
mobiscroll.i18n.nl = {
  // Core
  setText: 'Instellen',
  cancelText: 'Annuleren',
  clearText: 'Leegmaken',
  selectedText: '{count} gekozen',
  // Datetime component
  dateFormat: 'dd-mm-yy',
  dayNames: ['Zondag', 'Maandag', 'Dinsdag', 'Woensdag', 'Donderdag', 'Vrijdag', 'Zaterdag'],
  dayNamesShort: ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'],
  dayNamesMin: ['z', 'm', 'd', 'w', 'd', 'v', 'z'],
  dayText: 'Dag',
  hourText: 'Uur',
  minuteText: 'Minuten',
  monthNames: ['januari', 'februari', 'maart', 'april', 'mei', 'juni', 'juli', 'augustus', 'september', 'oktober', 'november', 'december'],
  monthNamesShort: ['jan', 'feb', 'mrt', 'apr', 'mei', 'jun', 'jul', 'aug', 'sep', 'okt', 'nov', 'dec'],
  monthText: 'Maand',
  secText: 'Seconden',
  timeFormat: 'HH:ii',
  yearText: 'Jaar',
  nowText: 'Nu',
  pmText: 'pm',
  amText: 'am',
  todayText: 'Vandaag',
  // Calendar component
  firstDay: 1,
  dateText: 'Datum',
  timeText: 'Tijd',
  closeText: 'Sluiten',
  allDayText: 'Hele dag',
  noEventsText: 'Geen activiteiten',
  eventText: 'Activiteit',
  eventsText: 'Activiteiten',
  moreEventsText: 'nog {count}',
  // Daterange component
  fromText: 'Start',
  toText: 'Einde',
  // Measurement components
  wholeText: 'geheel',
  fractionText: 'fractie',
  unitText: 'eenheid',
  // Time / Timespan component
  labels: ['Jaren', 'Maanden', 'Dagen', 'Uren', 'Minuten', 'Seconden', ''],
  labelsShort: ['j', 'm', 'd', 'u', 'min', 'sec', ''],
  // Timer component
  startText: 'Start',
  stopText: 'Stop',
  resetText: 'Reset',
  lapText: 'Ronde',
  hideText: 'Verbergen',
  // Listview
  backText: 'Terug',
  undoText: 'Onged. maken',
  // Form
  offText: 'Uit',
  onText: 'Aan',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Norsk
mobiscroll.i18n.no = {
  // Core
  setText: 'OK',
  cancelText: 'Avbryt',
  clearText: 'Tømme',
  selectedText: '{count} valgt',
  // Datetime component
  dateFormat: 'dd.mm.yy',
  dayNames: ['Søndag', 'Mandag', 'Tirsdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lørdag'],
  dayNamesShort: ['Sø', 'Ma', 'Ti', 'On', 'To', 'Fr', 'Lø'],
  dayNamesMin: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  dayText: 'Dag',
  delimiter: '.',
  hourText: 'Time',
  minuteText: 'Minutt',
  monthNames: ['Januar', 'Februar', 'Mars', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Desember'],
  monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Des'],
  monthText: 'Måned',
  secText: 'Sekund',
  timeFormat: 'HH:ii',
  yearText: 'År',
  nowText: 'Nå',
  pmText: 'pm',
  amText: 'am',
  todayText: 'I dag',
  // Calendar component
  firstDay: 1,
  dateText: 'Dato',
  timeText: 'Tid',
  closeText: 'Lukk',
  allDayText: 'Hele dagen',
  noEventsText: 'Ingen hendelser',
  eventText: 'Hendelse',
  eventsText: 'Hendelser',
  moreEventsText: '{count} mere',
  // Daterange component
  fromText: 'Start',
  toText: 'End',
  // Measurement components
  wholeText: 'Hele',
  fractionText: 'Fraksjon',
  unitText: 'Enhet',
  // Time / Timespan component
  labels: ['År', 'Måneder', 'Dager', 'Timer', 'Minutter', 'Sekunder', ''],
  labelsShort: ['År', 'Mån', 'Dag', 'Time', 'Min', 'Sek', ''],
  // Timer component
  startText: 'Start',
  stopText: 'Stopp',
  resetText: 'Tilbakestille',
  lapText: 'Runde',
  hideText: 'Skjul',
  // Listview
  backText: 'Tilbake',
  undoText: 'Angre',
  // Form
  offText: 'Av',
  onText: 'På',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Polski
mobiscroll.i18n.pl = {
  // Core
  setText: 'Zestaw',
  cancelText: 'Anuluj',
  clearText: 'Oczyścić',
  selectedText: 'Wybór: {count}',
  // Datetime component
  dateFormat: 'yy-mm-dd',
  dayNames: ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota'],
  dayNamesShort: ['Niedz.', 'Pon.', 'Wt.', 'Śr.', 'Czw.', 'Pt.', 'Sob.'],
  dayNamesMin: ['N', 'P', 'W', 'Ś', 'C', 'P', 'S'],
  dayText: 'Dzień',
  hourText: 'Godziny',
  minuteText: 'Minuty',
  monthNames: ['Styczeń', 'Luty', 'Marzec', 'Kwiecień', 'Maj', 'Czerwiec', 'Lipiec', 'Sierpień', 'Wrzesień', 'Październik', 'Listopad', 'Grudzień'],
  monthNamesShort: ['Sty', 'Lut', 'Mar', 'Kwi', 'Maj', 'Cze', 'Lip', 'Sie', 'Wrz', 'Paź', 'Lis', 'Gru'],
  monthText: 'Miesiąc',
  secText: 'Sekundy',
  timeFormat: 'HH:ii',
  yearText: 'Rok',
  nowText: 'Teraz',
  amText: 'am',
  pmText: 'pm',
  todayText: 'Dzisiaj',
  // Calendar component
  firstDay: 1,
  dateText: 'Data',
  timeText: 'Czas',
  closeText: 'Zakończenie',
  allDayText: 'Cały dzień',
  noEventsText: 'Brak wydarzeń',
  eventText: 'Wydarzeń',
  eventsText: 'Wydarzenia',
  moreEventsText: 'Jeszcze {count}',
  // Daterange component
  fromText: 'Rozpoczęcie',
  toText: 'Koniec',
  // Measurement components
  wholeText: 'Cały',
  fractionText: 'Ułamek',
  unitText: 'Jednostka',
  // Time / Timespan component
  labels: ['Lata', 'Miesiąc', 'Dni', 'Godziny', 'Minuty', 'Sekundy', ''],
  labelsShort: ['R', 'M', 'Dz', 'Godz', 'Min', 'Sek', ''],
  // Timer component
  startText: 'Rozpoczęcie',
  stopText: 'Zatrzymać',
  resetText: 'Zresetować',
  lapText: 'Zakładka',
  hideText: 'Ukryć',
  // Listview
  backText: 'Wróć',
  undoText: 'Cofnij',
  // Form
  offText: 'Wył',
  onText: 'Wł',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Português Brasileiro
mobiscroll.i18n['pt-BR'] = {
  // Core
  setText: 'Selecionar',
  cancelText: 'Cancelar',
  clearText: 'Claro',
  selectedText: '{count} selecionado',
  selectedPluralText: '{count} selecionados',
  // Datetime component
  dateFormat: 'dd/mm/yy',
  dayNames: ['Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'],
  dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'],
  dayNamesMin: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'],
  dayText: 'Dia',
  hourText: 'Hora',
  minuteText: 'Minutos',
  monthNames: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
  monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
  monthText: 'Mês',
  secText: 'Segundo',
  timeFormat: 'HH:ii',
  yearText: 'Ano',
  nowText: 'Agora',
  pmText: 'pm',
  amText: 'am',
  todayText: 'Hoje',
  // Calendar component
  dateText: 'Data',
  timeText: 'Tempo',
  closeText: 'Fechar',
  allDayText: 'Dia inteiro',
  noEventsText: 'Nenhum evento',
  eventText: 'Evento',
  eventsText: 'Eventos',
  moreEventsText: 'Mais {count}',
  // Daterange component
  fromText: 'In&iacute;cio',
  toText: 'Fim',
  // Measurement components
  wholeText: 'Inteiro',
  fractionText: 'Fração',
  unitText: 'Unidade',
  // Time / Timespan component
  labels: ['Anos', 'Meses', 'Dias', 'Horas', 'Minutos', 'Segundos', ''],
  labelsShort: ['Ano', 'M&ecirc;s', 'Dia', 'Hora', 'Min', 'Seg', ''],
  // Timer component
  startText: 'Começar',
  stopText: 'Pare',
  resetText: 'Reinicializar',
  lapText: 'Lap',
  hideText: 'Esconder',
  // Listview
  backText: 'Anterior',
  undoText: 'Desfazer',
  // Form
  offText: 'Desl',
  onText: 'Lig',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Português Europeu
mobiscroll.i18n['pt-PT'] = {
  // Core
  setText: 'Seleccionar',
  cancelText: 'Cancelar',
  clearText: 'Claro',
  selectedText: '{count} selecionado',
  selectedPluralText: '{count} selecionados',
  // Datetime component
  dateFormat: 'dd-mm-yy',
  dayNames: ['Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'],
  dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'],
  dayNamesMin: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S'],
  dayText: 'Dia',
  hourText: 'Horas',
  minuteText: 'Minutos',
  monthNames: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],
  monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],
  monthText: 'Mês',
  secText: 'Segundo',
  timeFormat: 'HH:ii',
  yearText: 'Ano',
  nowText: 'Actualizar',
  pmText: 'pm',
  amText: 'am',
  todayText: 'Hoy',
  // Calendar component
  firstDay: 1,
  dateText: 'Data',
  timeText: 'Tempo',
  closeText: 'Fechar',
  allDayText: 'Todo o dia',
  noEventsText: 'Nenhum evento',
  eventText: 'Evento',
  eventsText: 'Eventos',
  moreEventsText: 'mais {count}',
  // Daterange component
  fromText: 'Início',
  toText: 'Fim',
  // Measurement components
  wholeText: 'Inteiro',
  fractionText: 'Fracção',
  unitText: 'Unidade',
  // Time / Timespan component
  labels: ['Anos', 'Meses', 'Dias', 'Horas', 'Minutos', 'Segundos', ''],
  labelsShort: ['Ano', 'Mês', 'Dia', 'Hora', 'Min', 'Seg', ''],
  // Timer component
  startText: 'Começar',
  stopText: 'Parar',
  resetText: 'Reinicializar',
  lapText: 'Lap',
  hideText: 'Esconder',
  // Listview
  backText: 'Anterior',
  undoText: 'Anular',
  // Form
  offText: 'Desl',
  onText: 'Lig',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Română
mobiscroll.i18n.ro = {
  // Core
  setText: 'Setare',
  cancelText: 'Anulare',
  clearText: 'Ştergere',
  selectedText: '{count} selectat',
  selectedPluralText: '{count} selectate',
  // Datetime component
  dateFormat: 'dd.mm.yy',
  dayNames: ['Duminică', 'Luni', 'Marți', 'Miercuri', 'Joi', 'Vineri', 'Sâmbătă'],
  dayNamesShort: ['Du', 'Lu', 'Ma', 'Mi', 'Jo', 'Vi', 'Sâ'],
  dayNamesMin: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
  dayText: ' Ziua',
  delimiter: '.',
  hourText: ' Ore ',
  minuteText: 'Minute',
  monthNames: ['Ianuarie', 'Februarie', 'Martie', 'Aprilie', 'Mai', 'Iunie', 'Iulie', 'August', 'Septembrie', 'Octombrie', 'Noiembrie', 'Decembrie'],
  monthNamesShort: ['Ian.', 'Feb.', 'Mar.', 'Apr.', 'Mai', 'Iun.', 'Iul.', 'Aug.', 'Sept.', 'Oct.', 'Nov.', 'Dec.'],
  monthText: 'Luna',
  secText: 'Secunde',
  timeFormat: 'HH:ii',
  yearText: 'Anul',
  nowText: 'Acum',
  amText: 'am',
  pmText: 'pm',
  todayText: 'Astăzi',
  prevMonthText: 'Luna anterioară',
  nextMonthText: 'Luna următoare',
  prevYearText: 'Anul anterior',
  nextYearText: 'Anul următor',
  eventText: 'Eveniment',
  eventsText: 'Evenimente',
  allDayText: 'Toată ziua',
  noEventsText: 'Niciun eveniment',
  moreEventsText: 'Încă unul',
  moreEventsPluralText: 'Încă {count}',
  // Calendar component
  firstDay: 1,
  dateText: 'Data',
  timeText: 'Ora',
  closeText: 'Închidere',
  // Daterange component
  fromText: 'Start',
  toText: 'Final',
  // Measurement components
  wholeText: 'Complet',
  fractionText: 'Parţial',
  unitText: 'Unitate',
  // Time / Timespan component
  labels: ['Ani', 'Luni', 'Zile', 'Ore', 'Minute', 'Secunde', ''],
  labelsShort: ['Ani', 'Luni', 'Zile', 'Ore', 'Min.', 'Sec.', ''],
  // Timer component
  startText: 'Start',
  stopText: 'Stop',
  resetText: 'Resetare',
  lapText: 'Tură',
  hideText: 'Ascundere',
  // Listview
  backText: 'Înapoi',
  undoText: 'Anulează',
  // Form
  offText: 'Nu',
  onText: 'Da',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Русский (UA)
mobiscroll.i18n['ru-UA'] = {
  // Core
  setText: 'Установить',
  cancelText: 'Отменить',
  clearText: 'Очиститьr',
  selectedText: '{count} Вібрать',
  // Datetime component
  dateFormat: 'dd.mm.yy',
  dayNames: ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'],
  dayNamesShort: ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
  dayNamesMin: ['в', 'п', 'в', 'с', 'ч', 'п', 'с'],
  dayText: 'День',
  delimiter: '.',
  hourText: 'Часы',
  minuteText: 'Минуты',
  monthNames: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
  monthNamesShort: ['Янв.', 'Февр.', 'Март', 'Апр.', 'Май', 'Июнь', 'Июль', 'Авг.', 'Сент.', 'Окт.', 'Нояб.', 'Дек.'],
  monthText: 'Месяцы',
  secText: 'Сикунды',
  timeFormat: 'HH:ii',
  yearText: 'Год',
  nowText: 'Сейчас',
  amText: 'am',
  pmText: 'pm',
  todayText: 'Cегодня',
  // Calendar component
  firstDay: 1,
  dateText: 'Дата',
  timeText: 'Время',
  closeText: 'Закрыть',
  allDayText: 'Весь день',
  noEventsText: 'Нет событий',
  eventText: 'Мероприятия',
  eventsText: 'Мероприятия',
  moreEventsText: 'Ещё {count}',
  // Daterange component
  fromText: 'Начало',
  toText: 'Конец',
  // Measurement components
  wholeText: 'Весь',
  fractionText: 'Часть',
  unitText: 'Единица',
  // Time / Timespan component
  labels: ['Годы', ' Месяцы ', ' Дни ', ' Часы ', ' Минуты ', ' Секунды', ''],
  labelsShort: ['Год', 'Мес.', 'Дн.', 'Ч.', 'Мин.', 'Сек.', ''],
  // Timer component
  startText: 'Старт',
  stopText: 'Стоп',
  resetText: ' Сброс ',
  lapText: ' Этап ',
  hideText: ' Скрыть ',
  // Listview
  backText: 'назад',
  undoText: 'ОтменитЬ',
  // Form
  offText: 'O',
  onText: 'I',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Русский
mobiscroll.i18n['ru-RU'] = mobiscroll.i18n.ru = {
  // Core
  setText: 'Установить',
  cancelText: 'Отмена',
  clearText: 'Очистить',
  selectedText: '{count} Выбрать',
  // Datetime component
  dateFormat: 'dd.mm.yy',
  dayNames: ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'],
  dayNamesShort: ['вс', 'пн', 'вт', 'ср', 'чт', 'пт', 'сб'],
  dayNamesMin: ['в', 'п', 'в', 'с', 'ч', 'п', 'с'],
  dayText: 'День',
  delimiter: '.',
  hourText: 'Час',
  minuteText: 'Минут',
  monthNames: ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'],
  monthNamesShort: ['Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн', 'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек'],
  monthText: 'Месяц',
  secText: 'Секунд',
  timeFormat: 'HH:ii',
  yearText: 'Год',
  nowText: 'Сейчас',
  amText: 'am',
  pmText: 'pm',
  todayText: 'Cегодня',
  // Calendar component
  firstDay: 1,
  dateText: 'Дата',
  timeText: 'Время',
  closeText: 'Закрыть',
  allDayText: 'Весь день',
  noEventsText: 'Нет событий',
  eventText: 'Мероприятия',
  eventsText: 'Мероприятия',
  moreEventsText: 'Ещё {count}',
  // Daterange component
  fromText: 'Начало',
  toText: 'Конец',
  // Measurement components
  wholeText: 'Целое',
  fractionText: 'Дробное',
  unitText: 'Единица',
  // Time / Timespan component
  labels: ['Лет', 'Месяцев', 'Дней', 'Часов', 'Минут', 'Секунд', ''],
  labelsShort: ['Лет', 'Мес', 'Дн', 'Час', 'Мин', 'Сек', ''],
  // Timer component
  startText: 'Старт',
  stopText: 'Стоп',
  resetText: 'Сбросить',
  lapText: 'Круг',
  hideText: 'Скрыть',
  // Listview
  backText: 'назад',
  undoText: 'ОтменитЬ',
  // Form
  offText: 'O',
  onText: 'I',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Slovencina
mobiscroll.i18n.sk = {
  // Core
  setText: 'Zadaj',
  cancelText: 'Zrušiť',
  clearText: 'Vymazať',
  selectedText: 'Označený: {count}',
  // Datetime component
  dateFormat: 'd.m.yy',
  dayNames: ['Nedeľa', 'Pondelok', 'Utorok', 'Streda', 'Štvrtok', 'Piatok', 'Sobota'],
  dayNamesShort: ['Ne', 'Po', 'Ut', 'St', 'Št', 'Pi', 'So'],
  dayNamesMin: ['N', 'P', 'U', 'S', 'Š', 'P', 'S'],
  dayText: 'Ďeň',
  hourText: 'Hodiny',
  minuteText: 'Minúty',
  monthNames: ['Január', 'Február', 'Marec', 'Apríl', 'Máj', 'Jún', 'Júl', 'August', 'September', 'Október', 'November', 'December'],
  monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'Máj', 'Jún', 'Júl', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'],
  monthText: 'Mesiac',
  secText: 'Sekundy',
  timeFormat: 'H:ii',
  yearText: 'Rok',
  nowText: 'Teraz',
  amText: 'am',
  pmText: 'pm',
  todayText: 'Dnes',
  // Calendar component
  firstDay: 1,
  dateText: 'Datum',
  timeText: 'Čas',
  closeText: 'Zavrieť',
  allDayText: 'Celý deň',
  noEventsText: 'Žiadne udalosti',
  eventText: 'Udalostí',
  eventsText: 'Udalosti',
  moreEventsText: '{count} ďalšia',
  moreEventsPluralText: '{count} ďalšie',
  // Daterange component
  fromText: 'Začiatok',
  toText: 'Koniec',
  // Measurement components
  wholeText: 'Celý',
  fractionText: 'Časť',
  unitText: 'Jednotka',
  // Time / Timespan component
  labels: ['Roky', 'Mesiace', 'Dni', 'Hodiny', 'Minúty', 'Sekundy', ''],
  labelsShort: ['Rok', 'Mes', 'Dni', 'Hod', 'Min', 'Sec', ''],
  // Timer component
  startText: 'Start',
  stopText: 'Stop',
  resetText: 'Resetovať',
  lapText: 'Etapa',
  hideText: 'Schovať',
  // Listview
  backText: 'Späť',
  undoText: 'Späť',
  // Form
  offText: 'O',
  onText: 'I',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Serbian
mobiscroll.i18n.sr = {
  // Core
  setText: 'Постави',
  cancelText: 'Откажи',
  clearText: 'Обриши',
  selectedText: '{count} изабрана',
  // Datetime component
  dateFormat: 'dd.mm.yy',
  dayNames: ['Недеља', 'Понедељак', 'Уторак', 'Среда', 'Четвртак', 'Петак', 'Субота'],
  dayNamesShort: ['Нед', 'Пон', 'Уто', 'Сре', 'Чет', 'Пет', 'Суб'],
  dayNamesMin: ['Не', 'По', 'Ут', 'Ср', 'Че', 'Пе', 'Су'],
  dayText: 'Дан',
  delimiter: '.',
  hourText: 'Час',
  minuteText: 'Минут',
  monthNames: ['Јануар', 'Фебруар', 'Март', 'Април', 'Мај', 'Јун', 'Јул', 'Август', 'Септембар', 'Октобар', 'Новембар', 'Децембар'],
  monthNamesShort: ['Јан', 'Феб', 'Мар', 'Апр', 'Мај', 'Јун', 'Јул', 'Авг', 'Сеп', 'Окт', 'Нов', 'Дец'],
  monthText: 'месец',
  secText: 'Секунд',
  timeFormat: 'H:ii',
  yearText: 'година',
  nowText: 'сада',
  pmText: 'pm',
  amText: 'am',
  // Calendar component
  firstDay: 1,
  dateText: 'Датум',
  timeText: 'време',
  todayText: 'Данас',
  prevMonthText: 'Претходни мјесец',
  nextMonthText: 'Следећег месеца',
  prevYearText: 'Претходна године',
  nextYearText: 'Следеће године',
  closeText: 'Затвори',
  eventText: 'Догађај',
  eventsText: 'Догађаји',
  allDayText: 'Цео дан',
  noEventsText: 'Нема догађаја',
  moreEventsText: 'Још {count}',
  // Daterange component
  fromText: 'Од',
  toText: 'До',
  // Measurement components
  wholeText: 'цео',
  fractionText: 'Фракција',
  unitText: 'единица',
  // Time / Timespan component
  labels: ['Године', 'Месеци', 'Дана', 'Сати', 'Минута', 'Секунди', ''],
  labelsShort: ['Год', 'Мес', 'Дана', 'Сати', 'Мину', 'Секу', ''],
  // Timer component
  startText: 'Започни',
  stopText: 'Стоп',
  resetText: 'Ресетуј',
  lapText: 'Круг',
  hideText: 'Сакрити',
  // Listview
  backText: 'Повратак',
  undoText: 'Опозови',
  // Form
  offText: 'нe',
  onText: 'да',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Svenska
mobiscroll.i18n.sv = {
  // Core
  setText: 'OK',
  cancelText: 'Avbryt',
  clearText: 'Klara',
  selectedText: '{count} vald',
  // Datetime component
  dateFormat: 'yy-mm-dd',
  dayNames: ['Söndag', 'Måndag', 'Tisdag', 'Onsdag', 'Torsdag', 'Fredag', 'Lördag'],
  dayNamesShort: ['Sö', 'Må', 'Ti', 'On', 'To', 'Fr', 'Lö'],
  dayNamesMin: ['S', 'M', 'T', 'O', 'T', 'F', 'L'],
  dayText: 'Dag',
  hourText: 'Timme',
  minuteText: 'Minut',
  monthNames: ['Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni', 'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December'],
  monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'],
  monthText: 'Månad',
  secText: 'Sekund',
  timeFormat: 'HH:ii',
  yearText: 'År',
  nowText: 'Nu',
  pmText: 'pm',
  amText: 'am',
  todayText: 'I dag',
  // Calendar component
  firstDay: 1,
  dateText: 'Datum',
  timeText: 'Tid',
  closeText: 'Stäng',
  allDayText: 'Heldag',
  noEventsText: 'Inga aktiviteter',
  eventText: 'Händelse',
  eventsText: 'Händelser',
  moreEventsText: '{count} till',
  // Daterange component
  fromText: 'Start',
  toText: 'Slut',
  // Measurement components
  wholeText: 'Hela',
  fractionText: 'Bråk',
  unitText: 'Enhet',
  // Time / Timespan component
  labels: ['År', 'Månader', 'Dagar', 'Timmar', 'Minuter', 'Sekunder', ''],
  labelsShort: ['År', 'Mån', 'Dag', 'Tim', 'Min', 'Sek', ''],
  // Timer component
  startText: 'Start',
  stopText: 'Stopp',
  resetText: 'Återställ',
  lapText: 'Varv',
  hideText: 'Dölj',
  // Listview
  backText: 'Tillbaka',
  undoText: 'Ångra',
  // Form
  offText: 'Av',
  onText: 'På'
};

// Türkçe
mobiscroll.i18n.tr = {
  // Core
  setText: 'Seç',
  cancelText: 'İptal',
  clearText: 'Temizleyin',
  selectedText: '{count} seçilmiş',
  // Datetime component
  dateFormat: 'dd.mm.yy',
  dayNames: ['Pazar', 'Pazartesi', 'Salı', 'Çarşamba', 'Perşembe', 'Cuma', 'Cumartesi'],
  dayNamesShort: ['Paz', 'Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt'],
  dayNamesMin: ['P', 'P', 'S', 'Ç', 'P', 'C', 'C'],
  dayText: 'Gün',
  delimiter: '.',
  hourText: 'Saat',
  minuteText: 'Dakika',
  monthNames: ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', 'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'],
  monthNamesShort: ['Oca', 'Şub', 'Mar', 'Nis', 'May', 'Haz', 'Tem', 'Ağu', 'Eyl', 'Eki', 'Kas', 'Ara'],
  monthText: 'Ay',
  secText: 'Saniye',
  timeFormat: 'HH:ii',
  yearText: 'Yıl',
  nowText: 'Şimdi',
  pmText: 'pm',
  amText: 'am',
  todayText: 'Bugün',
  // Calendar component
  firstDay: 1,
  dateText: 'Tarih',
  timeText: 'Zaman',
  closeText: 'Kapatmak',
  allDayText: 'Tüm gün',
  noEventsText: 'Etkinlik Yok',
  eventText: 'Etkinlik',
  eventsText: 'Etkinlikler',
  moreEventsText: '{count} tane daha',
  // Daterange component
  fromText: 'Başla',
  toText: 'Son',
  // Measurement components
  wholeText: 'Tam',
  fractionText: 'Kesir',
  unitText: 'Birim',
  // Time / Timespan component
  labels: ['Yıl', 'Ay', 'Gün', 'Saat', 'Dakika', 'Saniye', ''],
  labelsShort: ['Yıl', 'Ay', 'Gün', 'Sa', 'Dak', 'Sn', ''],
  // Timer component
  startText: 'Başla',
  stopText: 'Durdur',
  resetText: 'Sıfırla',
  lapText: 'Tur',
  hideText: 'Gizle',
  // Listview
  backText: 'Geri',
  undoText: 'Geri Al',
  // Form
  offText: 'O',
  onText: 'I',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: '.'
};

// Vietnamese 
mobiscroll.i18n.vi = {
  // Core
  setText: 'Đặt',
  cancelText: 'Hủy bò',
  clearText: 'Xóa',
  selectedText: '{count} chọn',
  // Datetime component
  dateFormat: 'dd/mm/yy',
  dayNames: ['Chủ Nhật', 'Thứ Hai', 'Thứ Ba', 'Thứ Tư', 'Thứ Năm', 'Thứ Sáu', 'Thứ Bảy'],
  dayNamesShort: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
  dayNamesMin: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
  dayText: '',
  delimiter: '/',
  hourText: 'Giờ',
  minuteText: 'Phút',
  monthNames: ['Tháng Một', 'Tháng Hai', 'Tháng Ba', 'Tháng Tư', 'Tháng Năm', 'Tháng Sáu', 'Tháng Bảy', 'Tháng Tám', 'Tháng Chín', 'Tháng Mười', 'Tháng Mười Một', 'Tháng Mười Hai'],
  monthNamesShort: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'],
  monthText: 'Tháng',
  secText: 'Giây',
  timeFormat: 'H:ii',
  yearText: 'Năm',
  nowText: 'Bây giờ',
  pmText: 'pm',
  amText: 'am',
  // Calendar component
  firstDay: 0,
  dateText: 'Ngày',
  timeText: 'Hồi',
  todayText: 'Hôm nay',
  prevMonthText: 'Tháng trước',
  nextMonthText: 'Tháng tới',
  prevYearText: 'Măm trước',
  nextYearText: 'Năm tới',
  closeText: 'Đóng',
  eventText: 'Sự kiện',
  eventsText: 'Sự kiện',
  allDayText: 'Cả ngày',
  noEventsText: 'Không có sự kiện',
  moreEventsText: '{count} thẻ khác',
  // Daterange component
  fromText: 'Từ',
  toText: 'Tới',
  // Measurement components
  wholeText: 'Toàn thể',
  fractionText: 'Phân số',
  unitText: 'đơn vị',
  // Time / Timespan component
  labels: ['Năm', 'Tháng', 'Ngày', 'Giờ', 'Phút', 'Giây', ''],
  labelsShort: ['Năm', 'Tháng', 'Ngày', 'Giờ', 'Phút', 'Giây', ''],
  // Timer component
  startText: 'Bắt đầu',
  stopText: 'Dừng',
  resetText: 'Đặt lại',
  lapText: 'Vòng',
  hideText: 'Giấu',
  // Listview
  backText: 'Quay lại',
  undoText: 'Hoàn tác',
  // Form
  offText: 'Tất',
  onText: 'Bật',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

// Chinese
mobiscroll.i18n.zh = {
  // Core
  setText: '确定',
  cancelText: '取消',
  clearText: '明确',
  selectedText: '{count} 选',
  // Datetime component
  dateFormat: 'yy年mm月d日',
  dayNames: ['周日', '周一', '周二', '周三', '周四', '周五', '周六'],
  dayNamesShort: ['日', '一', '二', '三', '四', '五', '六'],
  dayNamesMin: ['日', '一', '二', '三', '四', '五', '六'],
  dayText: '日',
  hourText: '时',
  minuteText: '分',
  monthNames: ['1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'],
  monthNamesShort: ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
  monthText: '月',
  secText: '秒',
  timeFormat: 'HH:ii',
  yearText: '年',
  nowText: '当前',
  pmText: '下午',
  amText: '上午',
  yearSuffix: '年',
  monthSuffix: '月',
  daySuffix: '日',
  todayText: '今天',
  // Calendar component
  dateText: '日',
  timeText: '时间',
  closeText: '关闭',
  allDayText: '全天',
  noEventsText: '无事件',
  eventText: '活动',
  eventsText: '活动',
  moreEventsText: '他 {count} 件',
  // Daterange component
  fromText: '开始时间',
  toText: '结束时间',
  // Measurement components
  wholeText: '合计',
  fractionText: '分数',
  unitText: '单位',
  // Time / Timespan component
  labels: ['年', '月', '日', '小时', '分钟', '秒', ''],
  labelsShort: ['年', '月', '日', '点', '分', '秒', ''],
  // Timer component
  startText: '开始',
  stopText: '停止',
  resetText: '重置',
  lapText: '圈',
  hideText: '隐藏',
  // Listview
  backText: '返回',
  undoText: '复原',
  // Form
  offText: '关闭',
  onText: '开启',
  // Numpad
  decimalSeparator: ',',
  thousandsSeparator: ' '
};

var themes$1 = mobiscroll.themes;
themes$1.frame.ios = {
  display: 'bottom',
  // frame
  headerText: false,
  // frame
  btnWidth: false,
  // frame
  deleteIcon: 'ios-backspace',
  // numpad
  scroll3d: os != 'wp' && (os != 'android' || majorVersion > 7)
};
themes$1.scroller.ios = extend$1({}, themes$1.frame.ios, {
  rows: 5,
  // scroller
  height: 34,
  // scroller
  minWidth: 55,
  // scroller
  selectedLineHeight: true,
  // scroller
  selectedLineBorder: 1,
  // scroller
  showLabel: false,
  // scroller
  useShortLabels: true,
  // timespan/timer
  btnPlusClass: 'mbsc-ic mbsc-ic-arrow-down5',
  // scroller
  btnMinusClass: 'mbsc-ic mbsc-ic-arrow-up5',
  // scroller
  checkIcon: 'ion-ios7-checkmark-empty',
  // select
  filterClearIcon: 'ion-close-circled',
  // select
  dateDisplay: 'MMdyy',
  // date
  btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left5',
  // calendar
  btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right5' // calendar

});
themes$1.listview.ios = {
  leftArrowClass: 'mbsc-ic-ion-ios7-arrow-back',
  rightArrowClass: 'mbsc-ic-ion-ios7-arrow-forward'
};
themes$1.form.ios = {};

function _addRipple($control, ev) {
  var x = getCoord(ev, 'X', true),
      y = getCoord(ev, 'Y', true),
      control = $control[0],
      rect = $control.offset(),
      left = x - rect.left,
      top = y - rect.top,
      width = Math.max(left, control.offsetWidth - left),
      height = Math.max(top, control.offsetHeight - top),
      size = 2 * Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));

  _removeRipple($ripple);

  $ripple = $$1('<span class="mbsc-ripple"></span>').css({
    backgroundColor: getComputedStyle(control).color,
    width: size,
    height: size,
    top: y - rect.top - size / 2,
    left: x - rect.left - size / 2
  }).appendTo($control);
  setTimeout(function () {
    $ripple.addClass('mbsc-ripple-scaled mbsc-ripple-visible');
  }, 10);
}

function _removeRipple($r) {
  setTimeout(function () {
    if ($r) {
      $r.removeClass('mbsc-ripple-visible');
      setTimeout(function () {
        $r.remove();
      }, 2000);
    }
  }, 100);
}

function initRipple($markup, selector, disabled, nohl) {
  var startX,
      startY,
      markup = $markup[0];

  function onStart(ev) {
    var target = closest(markup, ev.target, selector);

    if (target && testTouch(ev, target)) {
      startX = getCoord(ev, 'X');
      startY = getCoord(ev, 'Y');
      $active$1 = $$1(target);

      if (!$active$1.hasClass(disabled) && !$active$1.hasClass(nohl)) {
        _addRipple($active$1, ev);
      } else {
        $active$1 = null;
      }
    }
  }

  function onMove(ev) {
    if ($active$1 && Math.abs(getCoord(ev, 'X') - startX) > 9 || Math.abs(getCoord(ev, 'Y') - startY) > 9) {
      _removeRipple($ripple);

      $active$1 = null;
    }
  }

  function onEnd() {
    if ($active$1) {
      setTimeout(function () {
        _removeRipple($ripple);
      }, 100);
      $active$1 = null;
    }
  }

  if (markup) {
    if (markup.__mbscRippleOff) {
      markup.__mbscRippleOff();
    }

    listen(markup, 'touchstart', onStart, {
      passive: true
    });
    listen(markup, 'mousedown', onStart);
    listen(markup, 'touchmove', onMove, {
      passive: true
    });
    listen(markup, 'mousemove', onMove);
    listen(markup, 'touchend', onEnd);
    listen(markup, 'touchcancel', onEnd);
    listen(markup, 'mouseleave', onEnd);
    listen(markup, 'mouseup', onEnd);

    markup.__mbscRippleOff = function () {
      unlisten(markup, 'touchstart', onStart, {
        passive: true
      });
      unlisten(markup, 'mousedown', onStart);
      unlisten(markup, 'touchmove', onMove, {
        passive: true
      });
      unlisten(markup, 'mousemove', onMove);
      unlisten(markup, 'touchend', onEnd);
      unlisten(markup, 'touchcancel', onEnd);
      unlisten(markup, 'mouseleave', onEnd);
      unlisten(markup, 'mouseup', onEnd);
      delete markup.__mbscRippleOff;
    };
  }
}

var $active$1,
    $ripple,
    themes$2 = mobiscroll.themes;
themes$2.frame.material = {
  headerText: false,
  btnWidth: false,
  deleteIcon: 'material-backspace',
  onMarkupReady: function onMarkupReady(ev) {
    initRipple($$1(ev.target), '.mbsc-fr-btn-e', 'mbsc-disabled', 'mbsc-fr-btn-nhl');
  }
};
themes$2.scroller.material = extend$1({}, themes$2.frame.material, {
  showLabel: false,
  selectedLineBorder: 2,
  weekDays: 'min',
  icon: {
    filled: 'material-star',
    empty: 'material-star-outline'
  },
  checkIcon: 'material-check',
  btnPlusClass: 'mbsc-ic mbsc-ic-material-keyboard-arrow-down',
  btnMinusClass: 'mbsc-ic mbsc-ic-material-keyboard-arrow-up',
  btnCalPrevClass: 'mbsc-ic mbsc-ic-material-keyboard-arrow-left',
  btnCalNextClass: 'mbsc-ic mbsc-ic-material-keyboard-arrow-right'
});
themes$2.listview.material = {
  leftArrowClass: 'mbsc-ic-material-keyboard-arrow-left',
  rightArrowClass: 'mbsc-ic-material-keyboard-arrow-right',
  onItemActivate: function onItemActivate(ev) {
    _addRipple($$1(ev.target), ev.domEvent);
  },
  onItemDeactivate: function onItemDeactivate() {
    _removeRipple($ripple);
  },
  onSlideStart: function onSlideStart(ev) {
    $$1('.mbsc-ripple', ev.target).remove();
  },
  onSortStart: function onSortStart(ev) {
    $$1('.mbsc-ripple', ev.target).remove();
  }
};
themes$2.navigation.material = {
  onInit: function onInit() {
    initRipple($$1(this), '.mbsc-ms-item.mbsc-btn-e', 'mbsc-disabled', 'mbsc-btn-nhl');
  },
  onMarkupInit: function onMarkupInit() {
    $$1('.mbsc-ripple', this).remove();
  },
  onDestroy: function onDestroy() {
    if (this.__mbscRippleOff) {
      this.__mbscRippleOff();
    }
  }
};
themes$2.form.material = {
  addRipple: function addRipple(elm, ev) {
    _addRipple(elm, ev);
  },
  removeRipple: function removeRipple() {
    _removeRipple($ripple);
  }
};

var themes$3 = mobiscroll.themes;
themes$3.frame.windows = {
  headerText: false,
  deleteIcon: 'backspace4',
  //setIcon: 'material-check',
  //cancelIcon: 'material-close',
  //closeIcon: 'material-close',
  //clearIcon: 'material-close',
  //okIcon: 'material-check',
  //nowIcon: 'loop2',
  //startIcon: 'play3',
  //stopIcon: 'pause2',
  //resetIcon: 'stop2',
  //lapIcon: 'loop2',
  //btnWidth: false,
  btnReverse: true
};
themes$3.scroller.windows = extend$1({}, themes$3.frame.windows, {
  rows: 6,
  // scroller
  minWidth: 88,
  height: 44,
  btnPlusClass: 'mbsc-ic mbsc-ic-arrow-down5',
  btnMinusClass: 'mbsc-ic mbsc-ic-arrow-up5',
  checkIcon: 'material-check',
  dateDisplay: 'MMdyy',
  // date
  showLabel: false,
  showScrollArrows: true,
  btnCalPrevClass: 'mbsc-ic mbsc-ic-arrow-left5',
  // calendar
  btnCalNextClass: 'mbsc-ic mbsc-ic-arrow-right5',
  // calendar
  dayNamesShort: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
  useShortLabels: true // timespan/timer

});
themes$3.form.windows = {};

mobiscroll.customTheme('ios-dark', 'ios');

mobiscroll.customTheme('material-dark', 'material');

mobiscroll.customTheme('mobiscroll-dark', 'mobiscroll');

mobiscroll.customTheme('windows-dark', 'windows');

var themes$4 = mobiscroll.themes;
var theme = 'mobiscroll';

if (os == 'android') {
  theme = 'material';
} else if (os == 'ios') {
  theme = 'ios';
} else if (os == 'wp') {
  theme = 'windows';
}

$$1.each(themes$4.frame, function (key, settings) {
  // Stop at the first custom theme with the OS base theme
  if (theme && settings.baseTheme == theme && key != theme + '-dark') {
    mobiscroll.autoTheme = key;
    return false;
  } else if (key == theme) {
    mobiscroll.autoTheme = key;
  }
});

export { MbscAvatar, MbscButton, MbscCheckbox, MbscCommercialComponent, MbscDropdown, MbscForm, MbscFormsModule, MbscInput, MbscInputModule, MbscModule, MbscNote, MbscPage, MbscPageModule, MbscProgress, MbscRadio, MbscRadioGroup, MbscRating, MbscSegmented, MbscSegmentedGroup, MbscSlider, MbscStepper, MbscSwitch, MbscTextarea, mobiscroll, MbscOptionsService as ɵa, MbscInputService as ɵb, MbscBase as ɵc, MbscValueBase as ɵd, MbscCloneBase as ɵe, MbscControlBase as ɵf, MbscBaseModule as ɵg, MbscFormBase as ɵh, MbscFormValueBase as ɵi, MbscInputBase as ɵj, MbscRadioService as ɵk, MbscRadioGroupBase as ɵl, MbscFormGroup as ɵm, MbscFormGroupTitle as ɵn, MbscFormGroupContent as ɵo, MbscAccordion as ɵp };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9iaXNjcm9sbC5hbmd1bGFyLm1pbi5qcyIsInNvdXJjZXMiOlsibW9iaXNjcm9sbC5hbmd1bGFyLm1pbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BR007QUFDTjs7Ozs7Z0RBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUdNO0FBQ047Ozs7O2dEQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BR007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUdNO0FBQ047QUFDQTtBQUNBO0FBQ0E7Ozs7OztvR0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFHTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7b0dBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BR007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUdNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBR007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FNTTtBQUNOOzs7Ozs7Ozs7O2dEQUErRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BR007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFHTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBR007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQVdNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQU9NO0FBQ047Ozs7Ozs7Ozs7O2dEQUFnRTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFRTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQVFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFRTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFPTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQVFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQVNNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BU007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQVNNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FHTTtBQUNOOzs7OztnREFBaUU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BR007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FPTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkRBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BT007QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQU9NO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQU9NO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFRTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFPTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFXTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBVU07QUFDTjs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dEQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBVU07QUFDTjs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dEQUFxRTtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBVU07QUFDTjs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dEQUE4RDtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBT007QUFDTjs7Ozs7Ozs7Ozs7Z0RBQWdFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFRTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQVVNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQU1NO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQU9NO0FBQ047Ozs7Ozs7Ozs7O2dEQUErRDtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQVVLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFTSztBQUNMO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztnREFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIE5nWm9uZSwgSW5wdXQgYXMgSW5wdXQkMSwgT3V0cHV0LCBWaWV3Q29udGFpbmVyUmVmLCBFdmVudEVtaXR0ZXIsIE5nTW9kdWxlLCBWaWV3Q2hpbGQsIE9wdGlvbmFsLCBDb21wb25lbnQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgVmlld0NoaWxkcmVuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdDb250cm9sLCBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cblxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCB7XG4gICAgX19wcm90b19fOiBbXVxuICB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBkLl9fcHJvdG9fXyA9IGI7XG4gIH0gfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgfTtcblxuICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbn07XG5cbmZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XG4gIGV4dGVuZFN0YXRpY3MoZCwgYik7XG5cbiAgZnVuY3Rpb24gX18oKSB7XG4gICAgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7XG4gIH1cblxuICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59XG5cbnZhciBtb2Jpc2Nyb2xsID0gbW9iaXNjcm9sbCB8fCB7fSxcbiAgICB1dGlsID0ge307XG5cbnZhciBvcyxcbiAgICB2ZXJzLFxuICAgIG1ham9yVmVyc2lvbixcbiAgICBtaW5vclZlcnNpb24sXG4gICAgdmVyc2lvbiA9IFtdLFxuICAgIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnLFxuICAgIGlzRGFyayA9IGlzQnJvd3NlciAmJiB3aW5kb3cubWF0Y2hNZWRpYSAmJiB3aW5kb3cubWF0Y2hNZWRpYSgnKHByZWZlcnMtY29sb3Itc2NoZW1lOmRhcmspJykubWF0Y2hlcyxcbiAgICB1c2VyQWdlbnQgPSBpc0Jyb3dzZXIgPyBuYXZpZ2F0b3IudXNlckFnZW50IDogJycsXG4gICAgcGxhdGZvcm0gPSBpc0Jyb3dzZXIgPyBuYXZpZ2F0b3IucGxhdGZvcm0gOiAnJyxcbiAgICBtYXhUb3VjaFBvaW50cyA9IGlzQnJvd3NlciA/IG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cyA6IDAsXG4gICAgaXNTYWZhcmkgPSAvU2FmYXJpLy50ZXN0KHVzZXJBZ2VudCksXG4gICAgZGV2aWNlID0gdXNlckFnZW50Lm1hdGNoKC9BbmRyb2lkfGlQaG9uZXxpUGFkfGlQb2R8V2luZG93cyBQaG9uZXxXaW5kb3dzfE1TSUUvaSksXG4gICAgcmFmID0gaXNCcm93c2VyICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgZnVuY3Rpb24gKGZ1bmMpIHtcbiAgcmV0dXJuIHNldFRpbWVvdXQoZnVuYywgMjApO1xufTtcblxuaWYgKC9BbmRyb2lkL2kudGVzdChkZXZpY2UpKSB7XG4gIG9zID0gJ2FuZHJvaWQnO1xuICB2ZXJzID0gdXNlckFnZW50Lm1hdGNoKC9BbmRyb2lkXFxzKyhbXFxkLl0rKS9pKTtcblxuICBpZiAodmVycykge1xuICAgIHZlcnNpb24gPSB2ZXJzWzBdLnJlcGxhY2UoJ0FuZHJvaWQgJywgJycpLnNwbGl0KCcuJyk7XG4gIH1cbn0gZWxzZSBpZiAoL2lQaG9uZXxpUGFkfGlQb2QvaS50ZXN0KGRldmljZSkgfHwgL2lQaG9uZXxpUGFkfGlQb2QvaS50ZXN0KHBsYXRmb3JtKSB8fCBwbGF0Zm9ybSA9PT0gJ01hY0ludGVsJyAmJiBtYXhUb3VjaFBvaW50cyA+IDEpIHtcbiAgLy8gT24gaVBhZCB3aXRoIGlPUyAxMyBkZXNrdG9wIHNpdGUgcmVxdWVzdCBpcyBhdXRvbWF0aWNhbGx5IGVuYWJsZWQgaW4gU2FmYXJpLFxuICAvLyBzbyAnaVBhZCcgaXMgbm8gbG9uZ2VyIHByZXNlbnQgaW4gdGhlIHVzZXIgYWdlbnQgc3RyaW5nLlxuICAvLyBJbiB0aGlzIGNhc2Ugd2UgY2hlY2sgYG5hdmlnYXRvci5wbGF0Zm9ybWAgYW5kIGBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHNgLlxuICAvLyBtYXhUb3VjaFBvaW50cyBpcyBuZWVkZWQgdG8gZXhjbHVkZSBkZXNrdG9wIE1hYyBPUyBYLlxuICBvcyA9ICdpb3MnO1xuICB2ZXJzID0gdXNlckFnZW50Lm1hdGNoKC9PU1xccysoW1xcZF9dKykvaSk7XG5cbiAgaWYgKHZlcnMpIHtcbiAgICB2ZXJzaW9uID0gdmVyc1swXS5yZXBsYWNlKC9fL2csICcuJykucmVwbGFjZSgnT1MgJywgJycpLnNwbGl0KCcuJyk7XG4gIH1cbn0gZWxzZSBpZiAoL1dpbmRvd3MgUGhvbmUvaS50ZXN0KGRldmljZSkpIHtcbiAgb3MgPSAnd3AnO1xufSBlbHNlIGlmICgvV2luZG93c3xNU0lFL2kudGVzdChkZXZpY2UpKSB7XG4gIG9zID0gJ3dpbmRvd3MnO1xufVxuXG5tYWpvclZlcnNpb24gPSB2ZXJzaW9uWzBdO1xubWlub3JWZXJzaW9uID0gdmVyc2lvblsxXTtcblxuZnVuY3Rpb24gdGVzdFByb3BzKHByb3BzKSB7XG4gIHZhciBpO1xuXG4gIGZvciAoaSBpbiBwcm9wcykge1xuICAgIGlmIChtb2RbcHJvcHNbaV1dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gdGVzdFByZWZpeCgpIHtcbiAgdmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnTW96JywgJ08nLCAnbXMnXSxcbiAgICAgIHA7XG5cbiAgZm9yIChwIGluIHByZWZpeGVzKSB7XG4gICAgaWYgKHRlc3RQcm9wcyhbcHJlZml4ZXNbcF0gKyAnVHJhbnNmb3JtJ10pKSB7XG4gICAgICByZXR1cm4gJy0nICsgcHJlZml4ZXNbcF0udG9Mb3dlckNhc2UoKSArICctJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIHRlc3RUb3VjaChlLCBlbG0pIHtcbiAgaWYgKGUudHlwZSA9PSAndG91Y2hzdGFydCcpIHtcbiAgICBlbG0uX19tYnNjVG91Y2hlZCA9IDE7XG4gIH0gZWxzZSBpZiAoZWxtLl9fbWJzY1RvdWNoZWQpIHtcbiAgICBkZWxldGUgZWxtLl9fbWJzY1RvdWNoZWQ7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGxpc3RlbihlbCwgZXZlbnQsIGhhbmRsZXIsIG9wdCkge1xuICBpZiAoZWwpIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVubGlzdGVuKGVsLCBldmVudCwgaGFuZGxlciwgb3B0KSB7XG4gIGlmIChlbCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIsIG9wdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICBpZiAoIXNlbGVjdG9yIHx8ICFlbGVtZW50IHx8IGVsZW1lbnQubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbWF0Y2hlc1NlbGVjdG9yID0gZWxlbWVudC5tYXRjaGVzIHx8IGVsZW1lbnQubWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnQubW96TWF0Y2hlc1NlbGVjdG9yIHx8IGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3I7XG4gIHJldHVybiBtYXRjaGVzU2VsZWN0b3IuY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7XG59XG5cbmZ1bmN0aW9uIGNsb3Nlc3QoZWwsIHRhcmdldCwgc2VsZWN0b3IpIHtcbiAgd2hpbGUgKHRhcmdldCkge1xuICAgIGlmIChtYXRjaGVzKHRhcmdldCwgc2VsZWN0b3IpKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHRhcmdldCA9IHRhcmdldCAhPT0gZWwgPyB0YXJnZXQucGFyZW50Tm9kZSA6IG51bGw7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlcihlbG0sIG5hbWUsIGRhdGEpIHtcbiAgdmFyIGV2dDtcblxuICB0cnkge1xuICAgIGV2dCA9IG5ldyBDdXN0b21FdmVudChuYW1lLCB7XG4gICAgICBkZXRhaWw6IGRhdGEsXG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgZXZ0LmluaXRFdmVudChuYW1lLCB0cnVlLCB0cnVlKTtcbiAgICBldnQuZGV0YWlsID0gZGF0YTtcbiAgfVxuXG4gIGVsbS5kaXNwYXRjaEV2ZW50KGV2dCk7XG59XG5cbnZhciBhbmltRW5kLFxuICAgIGNhbnZhcyxcbiAgICBtb2QsXG4gICAgY3NzUHJlZml4LFxuICAgIGhhc0dob3N0Q2xpY2ssXG4gICAgaGFzVHJhbnNpdGlvbixcbiAgICBpc1dlYlZpZXcsXG4gICAgaXNXa1dlYlZpZXcsXG4gICAganNQcmVmaXgsXG4gICAgd2luO1xuXG5pZiAoaXNCcm93c2VyKSB7XG4gIHdpbiA9IHdpbmRvdztcbiAgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIG1vZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ21vZGVybml6cicpLnN0eWxlO1xuICBjc3NQcmVmaXggPSB0ZXN0UHJlZml4KCk7XG4gIGpzUHJlZml4ID0gY3NzUHJlZml4LnJlcGxhY2UoL14tLywgJycpLnJlcGxhY2UoLy0kLywgJycpLnJlcGxhY2UoJ21veicsICdNb3onKTtcbiAgYW5pbUVuZCA9IG1vZC5hbmltYXRpb24gIT09IHVuZGVmaW5lZCA/ICdhbmltYXRpb25lbmQnIDogJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIGhhc1RyYW5zaXRpb24gPSBtb2QudHJhbnNpdGlvbiAhPT0gdW5kZWZpbmVkOyAvLyBVSVdlYlZpZXcgb24gaU9TIHN0aWxsIGhhcyB0aGUgZ2hvc3QgY2xpY2ssIFxuICAvLyBXa1dlYlZpZXcgZG9lcyBub3QgaGF2ZSBhIGdob3N0IGNsaWNrLCBidXQgaXQncyBoYXJkIHRvIHRlbGwgaWYgaXQncyBVSVdlYlZpZXcgb3IgV2tXZWJWaWV3XG4gIC8vIEluIGFkZGl0aW9uIGluIGlPUyAxMi4yIGlmIHdlIGVuYWJsZSB0YXAgaGFuZGxpbmcsIGl0IGJyYWtlcyB0aGUgZm9ybSBpbnB1dHNcbiAgLy8gKGtleWJvYXJkIGFwcGVhcnMsIGJ1dCB0aGUgY3Vyc29yIGlzIG5vdCBpbiB0aGUgaW5wdXQpLlxuXG4gIGlzV2ViVmlldyA9IG9zID09PSAnaW9zJyAmJiAhaXNTYWZhcmk7XG4gIGlzV2tXZWJWaWV3ID0gaXNXZWJWaWV3ICYmIHdpbi53ZWJraXQgJiYgd2luLndlYmtpdC5tZXNzYWdlSGFuZGxlcnM7XG4gIGhhc0dob3N0Q2xpY2sgPSBtb2QudG91Y2hBY3Rpb24gPT09IHVuZGVmaW5lZCB8fCBpc1dlYlZpZXcgJiYgIWlzV2tXZWJWaWV3O1xufVxuXG52YXIgY3NzTnVtYmVyID0ge1xuICAnY29sdW1uLWNvdW50JzogMSxcbiAgJ2NvbHVtbnMnOiAxLFxuICAnZm9udC13ZWlnaHQnOiAxLFxuICAnbGluZS1oZWlnaHQnOiAxLFxuICAnb3BhY2l0eSc6IDEsXG4gICd6LWluZGV4JzogMSxcbiAgJ3pvb20nOiAxXG59LFxuICAgIHByb3BNYXAgPSB7XG4gICdyZWFkb25seSc6ICdyZWFkT25seSdcbn0sXG4gICAgZW1wdHlBcnJheSA9IFtdLFxuICAgIF9zbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCI7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIjtcbn1cblxuZnVuY3Rpb24gbGlrZUFycmF5KG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5sZW5ndGggPT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGNhbWVsaXplKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLy0rKC4pPy9nLCBmdW5jdGlvbiAobWF0Y2gsIGNocikge1xuICAgIHJldHVybiBjaHIgPyBjaHIudG9VcHBlckNhc2UoKSA6ICcnO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCwgc291cmNlLCBkZWVwKSB7XG4gIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoZGVlcCAmJiAoJC5pc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAkLmlzQXJyYXkoc291cmNlW2tleV0pKSkge1xuICAgICAgaWYgKCQuaXNQbGFpbk9iamVjdChzb3VyY2Vba2V5XSkgJiYgISQuaXNQbGFpbk9iamVjdCh0YXJnZXRba2V5XSkgfHwgJC5pc0FycmF5KHNvdXJjZVtrZXldKSAmJiAhJC5pc0FycmF5KHRhcmdldFtrZXldKSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHt9O1xuICAgICAgfVxuXG4gICAgICBleHRlbmQodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBkZWVwKTtcbiAgICB9IGVsc2UgaWYgKHNvdXJjZVtrZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRhc2hlcml6ZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC86Oi9nLCAnLycpLnJlcGxhY2UoLyhbQS1aXSspKFtBLVpdW2Etel0pL2csICckMV8kMicpLnJlcGxhY2UoLyhbYS16XFxkXSkoW0EtWl0pL2csICckMV8kMicpLnJlcGxhY2UoL18vZywgJy0nKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5mdW5jdGlvbiBtYXliZUFkZFB4KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIiAmJiAhY3NzTnVtYmVyW2Rhc2hlcml6ZShuYW1lKV0gPyB2YWx1ZSArIFwicHhcIiA6IHZhbHVlO1xufVxuXG52YXIgRG9tID0gZnVuY3Rpb24gKCkge1xuICB2YXIgRG9tID0gZnVuY3Rpb24gRG9tKGFycikge1xuICAgIHZhciBfdGhpcyA9IHRoaXMsXG4gICAgICAgIGkgPSAwOyAvLyBDcmVhdGUgYXJyYXktbGlrZSBvYmplY3RcblxuXG4gICAgZm9yIChpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgX3RoaXNbaV0gPSBhcnJbaV07XG4gICAgfVxuXG4gICAgX3RoaXMubGVuZ3RoID0gYXJyLmxlbmd0aDsgLy8gUmV0dXJuIGNvbGxlY3Rpb24gd2l0aCBtZXRob2RzXG5cbiAgICByZXR1cm4gJCh0aGlzKTtcbiAgfTtcblxuICB2YXIgJCA9IGZ1bmN0aW9uICQoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICB2YXIgYXJyID0gW10sXG4gICAgICAgIGkgPSAwO1xuXG4gICAgaWYgKHNlbGVjdG9yICYmICFjb250ZXh0KSB7XG4gICAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBEb20pIHtcbiAgICAgICAgcmV0dXJuIHNlbGVjdG9yO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKHNlbGVjdG9yKSkge1xuICAgICAgcmV0dXJuICQoZG9jdW1lbnQpLnJlYWR5KHNlbGVjdG9yKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIC8vIFN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIGVscywgdGVtcFBhcmVudCwgaHRtbDtcbiAgICAgICAgc2VsZWN0b3IgPSBodG1sID0gc2VsZWN0b3IudHJpbSgpO1xuXG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzwnKSA+PSAwICYmIGh0bWwuaW5kZXhPZignPicpID49IDApIHtcbiAgICAgICAgICB2YXIgdG9DcmVhdGUgPSAnZGl2JztcblxuICAgICAgICAgIGlmIChodG1sLmluZGV4T2YoJzxsaScpID09PSAwKSB7XG4gICAgICAgICAgICB0b0NyZWF0ZSA9ICd1bCc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRyJykgPT09IDApIHtcbiAgICAgICAgICAgIHRvQ3JlYXRlID0gJ3Rib2R5JztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dGQnKSA9PT0gMCB8fCBodG1sLmluZGV4T2YoJzx0aCcpID09PSAwKSB7XG4gICAgICAgICAgICB0b0NyZWF0ZSA9ICd0cic7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGh0bWwuaW5kZXhPZignPHRib2R5JykgPT09IDApIHtcbiAgICAgICAgICAgIHRvQ3JlYXRlID0gJ3RhYmxlJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8b3B0aW9uJykgPT09IDApIHtcbiAgICAgICAgICAgIHRvQ3JlYXRlID0gJ3NlbGVjdCc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGVtcFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodG9DcmVhdGUpO1xuICAgICAgICAgIHRlbXBQYXJlbnQuaW5uZXJIVE1MID0gaHRtbDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0ZW1wUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyci5wdXNoKHRlbXBQYXJlbnQuY2hpbGROb2Rlc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY29udGV4dCAmJiBzZWxlY3RvclswXSA9PT0gJyMnICYmICFzZWxlY3Rvci5tYXRjaCgvWyAuPD46fl0vKSkge1xuICAgICAgICAgICAgLy8gUHVyZSBJRCBzZWxlY3RvclxuICAgICAgICAgICAgZWxzID0gW2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdG9yLnNwbGl0KCcjJylbMV0pXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNvbnRleHQgaW5zdGFuY2VvZiBEb20pIHtcbiAgICAgICAgICAgICAgY29udGV4dCA9IGNvbnRleHRbMF07XG4gICAgICAgICAgICB9IC8vIE90aGVyIHNlbGVjdG9yc1xuXG5cbiAgICAgICAgICAgIGVscyA9IChjb250ZXh0IHx8IGRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZWxzW2ldKSB7XG4gICAgICAgICAgICAgIGFyci5wdXNoKGVsc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IC8vIE5vZGUvZWxlbWVudFxuICAgICAgZWxzZSBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgPT09IHdpbmRvdyB8fCBzZWxlY3RvciA9PT0gZG9jdW1lbnQpIHtcbiAgICAgICAgICBhcnIucHVzaChzZWxlY3Rvcik7XG4gICAgICAgIH0gLy9BcnJheSBvZiBlbGVtZW50cyBvciBpbnN0YW5jZSBvZiBEb21cbiAgICAgICAgZWxzZSBpZiAoc2VsZWN0b3IubGVuZ3RoID4gMCAmJiBzZWxlY3RvclswXS5ub2RlVHlwZSkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNlbGVjdG9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGFyci5wdXNoKHNlbGVjdG9yW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCQuaXNBcnJheShzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIGFyciA9IHNlbGVjdG9yO1xuICAgICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IERvbShhcnIpO1xuICB9O1xuXG4gIERvbS5wcm90b3R5cGUgPSB7XG4gICAgcmVhZHk6IGZ1bmN0aW9uIHJlYWR5KGNhbGxiYWNrKSB7XG4gICAgICBpZiAoZG9jdW1lbnQuYXR0YWNoRXZlbnQgPyBkb2N1bWVudC5yZWFkeVN0YXRlID09ICdjb21wbGV0ZScgOiBkb2N1bWVudC5yZWFkeVN0YXRlICE9ICdsb2FkaW5nJykge1xuICAgICAgICBjYWxsYmFjaygkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY2FsbGJhY2soJCk7XG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBjb25jYXQ6IGVtcHR5QXJyYXkuY29uY2F0LFxuICAgIGVtcHR5OiBmdW5jdGlvbiBlbXB0eSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9ICcnO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChmbikge1xuICAgICAgcmV0dXJuICQoJC5tYXAodGhpcywgZnVuY3Rpb24gKGVsLCBpKSB7XG4gICAgICAgIHJldHVybiBmbi5jYWxsKGVsLCBpLCBlbCk7XG4gICAgICB9KSk7XG4gICAgfSxcbiAgICBzbGljZTogZnVuY3Rpb24gc2xpY2UoKSB7XG4gICAgICByZXR1cm4gJChfc2xpY2UuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gICAgfSxcbiAgICAvLyBDbGFzc2VzIGFuZCBhdHRyaXV0ZXNcbiAgICAvLyBOT1RFOiBlbGVtZW50LmNsYXNzTGlzdCBhdHRyaWJ1cmUgaXMgbm90IHN1cHBvcnRlZCBvbiBhbmRyb2lkIDIuMyEhIVxuICAgIGFkZENsYXNzOiBmdW5jdGlvbiBhZGRDbGFzcyhjbGFzc05hbWUpIHtcbiAgICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIGNsYXNzZXMgPSBjbGFzc05hbWUuc3BsaXQoJyAnKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGlmICh0eXBlb2YgdGhpc1tqXS5jbGFzc0xpc3QgIT09ICd1bmRlZmluZWQnICYmIGNsYXNzZXNbaV0gIT09ICcnKSB7XG4gICAgICAgICAgICB0aGlzW2pdLmNsYXNzTGlzdC5hZGQoY2xhc3Nlc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGNsYXNzTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiBjbGFzc05hbWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzW2pdLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcgJiYgY2xhc3Nlc1tpXSAhPT0gJycpIHtcbiAgICAgICAgICAgIHRoaXNbal0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc2VzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBoYXNDbGFzczogZnVuY3Rpb24gaGFzQ2xhc3MoY2xhc3NOYW1lKSB7XG4gICAgICByZXR1cm4gdGhpc1swXSA/IHRoaXNbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkgOiBmYWxzZTtcbiAgICB9LFxuICAgIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiB0b2dnbGVDbGFzcyhjbGFzc05hbWUpIHtcbiAgICAgIHZhciBjbGFzc2VzID0gY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3Nlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHRoaXNbal0uY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhpc1tqXS5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzZXNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGNsb3Nlc3Q6IGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IsIGNvbnRleHQpIHtcbiAgICAgIHZhciBub2RlID0gdGhpc1swXSxcbiAgICAgICAgICBjb2xsZWN0aW9uID0gZmFsc2U7XG5cbiAgICAgIGlmIChpc09iamVjdChzZWxlY3RvcikpIHtcbiAgICAgICAgY29sbGVjdGlvbiA9ICQoc2VsZWN0b3IpO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAobm9kZSAmJiAhKGNvbGxlY3Rpb24gPyBjb2xsZWN0aW9uLmluZGV4T2Yobm9kZSkgPj0gMCA6IG1hdGNoZXMobm9kZSwgc2VsZWN0b3IpKSkge1xuICAgICAgICBub2RlID0gbm9kZSAhPT0gY29udGV4dCAmJiBub2RlLm5vZGVUeXBlICE9PSBub2RlLkRPQ1VNRU5UX05PREUgJiYgbm9kZS5wYXJlbnROb2RlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChub2RlKTtcbiAgICB9LFxuICAgIGF0dHI6IGZ1bmN0aW9uIGF0dHIoYXR0cnMsIHZhbHVlKSB7XG4gICAgICB2YXIgYXR0cjtcblxuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGF0dHJzID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBHZXQgYXR0clxuICAgICAgICBpZiAodGhpcy5sZW5ndGgpIHtcbiAgICAgICAgICBhdHRyID0gdGhpc1swXS5nZXRBdHRyaWJ1dGUoYXR0cnMpO1xuICAgICAgICAgIHJldHVybiBhdHRyIHx8IGF0dHIgPT09ICcnID8gYXR0ciA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2V0IGF0dHJzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAvLyBTdHJpbmdcbiAgICAgICAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJzLCB2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE9iamVjdFxuICAgICAgICAgICAgZm9yICh2YXIgYXR0ck5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgICAgICAgdGhpc1tpXVthdHRyTmFtZV0gPSBhdHRyc1thdHRyTmFtZV07XG4gICAgICAgICAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24gcmVtb3ZlQXR0cihhdHRyKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpc1tpXS5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcHJvcDogZnVuY3Rpb24gcHJvcChwcm9wcywgdmFsdWUpIHtcbiAgICAgIHByb3BzID0gcHJvcE1hcFtwcm9wc10gfHwgcHJvcHM7XG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gR2V0IHByb3BcbiAgICAgICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdW3Byb3BzXSA6IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNldCBwcm9wc1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzW2ldW3Byb3BzXSA9IHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgfSxcbiAgICB2YWw6IGZ1bmN0aW9uIHZhbCh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHRoaXMubGVuZ3RoICYmIHRoaXNbMF0ubXVsdGlwbGUpIHtcbiAgICAgICAgICByZXR1cm4gJC5tYXAodGhpcy5maW5kKCdvcHRpb246Y2hlY2tlZCcpLCBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgcmV0dXJuIHYudmFsdWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpc1swXSA/IHRoaXNbMF0udmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmxlbmd0aCAmJiB0aGlzWzBdLm11bHRpcGxlKSB7XG4gICAgICAgICQuZWFjaCh0aGlzWzBdLm9wdGlvbnMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkID0gdmFsdWUuaW5kZXhPZih0aGlzLnZhbHVlKSAhPSAtMTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzW2ldLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICAvL0V2ZW50c1xuICAgIG9uOiBmdW5jdGlvbiBvbihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBsaXN0ZW5lciwgY2FwdHVyZSkge1xuICAgICAgdmFyIGJvdW5kTGlzdGVuZXIsXG4gICAgICAgICAgZWxtLFxuICAgICAgICAgIGV2ZW50LFxuICAgICAgICAgIGV2ZW50cyA9IGV2ZW50TmFtZS5zcGxpdCgnICcpLFxuICAgICAgICAgIGksXG4gICAgICAgICAgajtcblxuICAgICAgZnVuY3Rpb24gaGFuZGxlTGl2ZUV2ZW50KGUpIHtcbiAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuXG4gICAgICAgIHdoaWxlICh0YXJnZXQpIHtcbiAgICAgICAgICBpZiAoJCh0YXJnZXQpLmlzKHRhcmdldFNlbGVjdG9yKSkge1xuICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0YXJnZXQsIGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRhcmdldCA9IHRhcmdldCAhPT0gdGhpcyA/IHRhcmdldC5wYXJlbnROb2RlIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVOYW1lc3BhY2VzKGVsLCBuYW1lLCBsaXN0ZW5lciwgY2FwdHVyZSkge1xuICAgICAgICB2YXIgbmFtZXNwYWNlID0gbmFtZS5zcGxpdCgnLicpO1xuXG4gICAgICAgIGlmICghZWwuRG9tTmFtZVNwYWNlcykge1xuICAgICAgICAgIGVsLkRvbU5hbWVTcGFjZXMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsLkRvbU5hbWVTcGFjZXMucHVzaCh7XG4gICAgICAgICAgbmFtZXNwYWNlOiBuYW1lc3BhY2VbMV0sXG4gICAgICAgICAgZXZlbnQ6IG5hbWVzcGFjZVswXSxcbiAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgY2FwdHVyZTogY2FwdHVyZVxuICAgICAgICB9KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihuYW1lc3BhY2VbMF0sIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZWxtID0gdGhpc1tpXTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbih0YXJnZXRTZWxlY3RvcikgfHwgdGFyZ2V0U2VsZWN0b3IgPT09IGZhbHNlKSB7XG4gICAgICAgICAgLy8gVXN1YWwgZXZlbnRzXG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24odGFyZ2V0U2VsZWN0b3IpKSB7XG4gICAgICAgICAgICBjYXB0dXJlID0gbGlzdGVuZXIgfHwgZmFsc2U7XG4gICAgICAgICAgICBsaXN0ZW5lciA9IHRhcmdldFNlbGVjdG9yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGV2ZW50ID0gZXZlbnRzW2pdOyAvLyBjaGVjayBmb3IgbmFtZXNwYWNlc1xuXG4gICAgICAgICAgICBpZiAoZXZlbnQuaW5kZXhPZignLicpICE9IC0xKSB7XG4gICAgICAgICAgICAgIGhhbmRsZU5hbWVzcGFjZXMoZWxtLCBldmVudCwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZWxtLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTGl2ZSBldmVudHNcbiAgICAgICAgICBib3VuZExpc3RlbmVyID0gaGFuZGxlTGl2ZUV2ZW50LmJpbmQoZWxtKTtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBldmVudHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGV2ZW50ID0gZXZlbnRzW2pdO1xuXG4gICAgICAgICAgICBpZiAoIWVsbS5Eb21MaXZlTGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgIGVsbS5Eb21MaXZlTGlzdGVuZXJzID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsbS5Eb21MaXZlTGlzdGVuZXJzLnB1c2goe1xuICAgICAgICAgICAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgICAgICAgICAgIGxpdmVMaXN0ZW5lcjogYm91bmRMaXN0ZW5lclxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChldmVudC5pbmRleE9mKCcuJykgIT0gLTEpIHtcbiAgICAgICAgICAgICAgaGFuZGxlTmFtZXNwYWNlcyhlbG0sIGV2ZW50LCBib3VuZExpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVsbS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBib3VuZExpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBsaXN0ZW5lciwgY2FwdHVyZSkge1xuICAgICAgdmFyIGVsbSxcbiAgICAgICAgICBldmVudCxcbiAgICAgICAgICBldmVudHMsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqLFxuICAgICAgICAgIGssXG4gICAgICAgICAgbGl2ZUxpc3RlbmVycyxcbiAgICAgICAgICB0aGF0ID0gdGhpcztcblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlRXZlbnRzKGV2ZW50KSB7XG4gICAgICAgIHZhciBlbCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgIG5hbWVTcGFjZXMsXG4gICAgICAgICAgICBwYXJ0cyA9IGV2ZW50LnNwbGl0KCcuJyksXG4gICAgICAgICAgICBuYW1lID0gcGFydHNbMF0sXG4gICAgICAgICAgICBucyA9IHBhcnRzWzFdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGF0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgZWwgPSB0aGF0W2ldO1xuICAgICAgICAgIG5hbWVTcGFjZXMgPSBlbC5Eb21OYW1lU3BhY2VzO1xuXG4gICAgICAgICAgaWYgKG5hbWVTcGFjZXMpIHtcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBuYW1lU3BhY2VzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICAgIGl0ZW0gPSBuYW1lU3BhY2VzW2pdO1xuXG4gICAgICAgICAgICAgIGlmIChpdGVtLm5hbWVzcGFjZSA9PSBucyAmJiAoaXRlbS5ldmVudCA9PSBuYW1lIHx8ICFuYW1lKSkge1xuICAgICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoaXRlbS5ldmVudCwgaXRlbS5saXN0ZW5lciwgaXRlbS5jYXB0dXJlKTtcbiAgICAgICAgICAgICAgICBpdGVtLnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IC8vIHJlbW92ZSB0aGUgZXZlbnRzIGZyb20gdGhlIERvbU5hbWVTcGFjZXMgYXJyYXlcblxuXG4gICAgICAgICAgICBmb3IgKGogPSBuYW1lU3BhY2VzLmxlbmd0aCAtIDE7IGogPj0gMDsgLS1qKSB7XG4gICAgICAgICAgICAgIGlmIChuYW1lU3BhY2VzW2pdLnJlbW92ZWQpIHtcbiAgICAgICAgICAgICAgICBuYW1lU3BhY2VzLnNwbGljZShqLCAxKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBldmVudHMgPSBldmVudE5hbWUuc3BsaXQoJyAnKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBldmVudCA9IGV2ZW50c1tpXTtcblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGVsbSA9IHRoaXNbal07XG4gICAgICAgICAgbGl2ZUxpc3RlbmVycyA9IGVsbS5Eb21MaXZlTGlzdGVuZXJzO1xuXG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24odGFyZ2V0U2VsZWN0b3IpIHx8IHRhcmdldFNlbGVjdG9yID09PSBmYWxzZSkge1xuICAgICAgICAgICAgLy8gVXN1YWwgZXZlbnRzXG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih0YXJnZXRTZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgY2FwdHVyZSA9IGxpc3RlbmVyIHx8IGZhbHNlO1xuICAgICAgICAgICAgICBsaXN0ZW5lciA9IHRhcmdldFNlbGVjdG9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXZlbnQuaW5kZXhPZignLicpID09PSAwKSB7XG4gICAgICAgICAgICAgIC8vIHJlbW92ZSBuYW1lc3BhY2UgZXZlbnRzXG4gICAgICAgICAgICAgIHJlbW92ZUV2ZW50cyhldmVudC5zdWJzdHIoMSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZWxtLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gTGl2ZSBldmVudFxuICAgICAgICAgICAgaWYgKGxpdmVMaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGxpdmVMaXN0ZW5lcnMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgICAgICBpZiAobGl2ZUxpc3RlbmVyc1trXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgICAgICAgIGVsbS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXZlTGlzdGVuZXJzW2tdLmxpdmVMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlbG0uRG9tTmFtZVNwYWNlcyAmJiBlbG0uRG9tTmFtZVNwYWNlcy5sZW5ndGggJiYgZXZlbnQpIHtcbiAgICAgICAgICAgICAgcmVtb3ZlRXZlbnRzKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB0cmlnZ2VyOiBmdW5jdGlvbiB0cmlnZ2VyJDEoZXZlbnROYW1lLCBldmVudERhdGEpIHtcbiAgICAgIHZhciBldmVudHMgPSBldmVudE5hbWUuc3BsaXQoJyAnKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgdHJpZ2dlcih0aGlzW2pdLCBldmVudHNbaV0sIGV2ZW50RGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICAvLyBTaXppbmcvU3R5bGVzXG4gICAgd2lkdGg6IGZ1bmN0aW9uIHdpZHRoKGRpbSkge1xuICAgICAgaWYgKGRpbSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNzcygnd2lkdGgnLCBkaW0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpc1swXSA9PT0gd2luZG93KSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIH0gZWxzZSBpZiAodGhpc1swXSA9PT0gZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxlbmd0aCA+IDAgPyBwYXJzZUZsb2F0KHRoaXMuY3NzKCd3aWR0aCcpKSA6IG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICBoZWlnaHQ6IGZ1bmN0aW9uIGhlaWdodChkaW0pIHtcbiAgICAgIGlmIChkaW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jc3MoJ2hlaWdodCcsIGRpbSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzWzBdID09PSB3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIH0gZWxzZSBpZiAodGhpc1swXSA9PT0gZG9jdW1lbnQpIHtcbiAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5LFxuICAgICAgICAgICAgaHRtbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KGJvZHkuc2Nyb2xsSGVpZ2h0LCBib2R5Lm9mZnNldEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGh0bWwuc2Nyb2xsSGVpZ2h0LCBodG1sLm9mZnNldEhlaWdodCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5sZW5ndGggPiAwID8gcGFyc2VGbG9hdCh0aGlzLmNzcygnaGVpZ2h0JykpIDogbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGlubmVyV2lkdGg6IGZ1bmN0aW9uIGlubmVyV2lkdGgoKSB7XG4gICAgICB2YXIgZWxtID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAodGhpc1swXS5pbm5lcldpZHRoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNbMF0uaW5uZXJXaWR0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXNbMF0ub2Zmc2V0V2lkdGgsXG4gICAgICAgICAgICAgIHNpZGVzID0gWydsZWZ0JywgJ3JpZ2h0J107XG4gICAgICAgICAgc2lkZXMuZm9yRWFjaChmdW5jdGlvbiAoc2lkZSkge1xuICAgICAgICAgICAgc2l6ZSAtPSBwYXJzZUludChlbG0uY3NzKGNhbWVsaXplKCdib3JkZXItJyArIHNpZGUgKyAnLXdpZHRoJykpIHx8IDAsIDEwKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgaW5uZXJIZWlnaHQ6IGZ1bmN0aW9uIGlubmVySGVpZ2h0KCkge1xuICAgICAgdmFyIGVsbSA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKHRoaXNbMF0uaW5uZXJIZWlnaHQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1swXS5pbm5lckhlaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXNbMF0ub2Zmc2V0SGVpZ2h0LFxuICAgICAgICAgICAgICBzaWRlcyA9IFsndG9wJywgJ2JvdHRvbSddO1xuICAgICAgICAgIHNpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNpZGUpIHtcbiAgICAgICAgICAgIHNpemUgLT0gcGFyc2VJbnQoZWxtLmNzcyhjYW1lbGl6ZSgnYm9yZGVyLScgKyBzaWRlICsgJy13aWR0aCcpKSB8fCAwLCAxMCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHNpemU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG9mZnNldDogZnVuY3Rpb24gb2Zmc2V0KCkge1xuICAgICAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgZWwgPSB0aGlzWzBdLFxuICAgICAgICAgICAgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICBkb2MgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdG9wOiBib3gudG9wICsgd2luZG93LnBhZ2VZT2Zmc2V0IC0gZG9jLmNsaWVudFRvcCxcbiAgICAgICAgICBsZWZ0OiBib3gubGVmdCArIHdpbmRvdy5wYWdlWE9mZnNldCAtIGRvYy5jbGllbnRMZWZ0XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSxcbiAgICBoaWRlOiBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXNbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBzaG93OiBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzW2ldLnN0eWxlLmRpc3BsYXkgPT0gXCJub25lXCIpIHtcbiAgICAgICAgICB0aGlzW2ldLnN0eWxlLmRpc3BsYXkgPSAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKHRoaXNbaV0sICcnKS5nZXRQcm9wZXJ0eVZhbHVlKFwiZGlzcGxheVwiKSA9PSBcIm5vbmVcIikge1xuICAgICAgICAgIHRoaXNbaV0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIHN0eWxlczogZnVuY3Rpb24gc3R5bGVzKCkge1xuICAgICAgcmV0dXJuIHRoaXNbMF0gPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzWzBdLCBudWxsKSA6IHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIGNzczogZnVuY3Rpb24gY3NzKHByb3BlcnR5LCB2YWx1ZSkge1xuICAgICAgdmFyIGksXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIGVsZW1lbnQgPSB0aGlzWzBdLFxuICAgICAgICAgIGNzcyA9ICcnO1xuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudC5zdHlsZVtwcm9wZXJ0eV0gfHwgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCAnJykuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkge1xuICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KGRhc2hlcml6ZShwcm9wZXJ0eSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNzcyA9IGRhc2hlcml6ZShwcm9wZXJ0eSkgKyBcIjpcIiArIG1heWJlQWRkUHgocHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChrZXkgaW4gcHJvcGVydHkpIHtcbiAgICAgICAgICBpZiAoIXByb3BlcnR5W2tleV0gJiYgcHJvcGVydHlba2V5XSAhPT0gMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdGhpc1tpXS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShkYXNoZXJpemUoa2V5KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNzcyArPSBkYXNoZXJpemUoa2V5KSArICc6JyArIG1heWJlQWRkUHgoa2V5LCBwcm9wZXJ0eVtrZXldKSArICc7JztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3R5bGUuY3NzVGV4dCArPSAnOycgKyBjc3M7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGVhY2g6IGZ1bmN0aW9uIGVhY2goY2FsbGJhY2spIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoY2FsbGJhY2suYXBwbHkodGhpc1tpXSwgW2ksIHRoaXNbaV1dKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgbWF0Y2hlZEl0ZW1zID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzW2ldLCBpLCB0aGlzW2ldKSkge1xuICAgICAgICAgICAgbWF0Y2hlZEl0ZW1zLnB1c2godGhpc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG1hdGNoZXModGhpc1tpXSwgY2FsbGJhY2spKSB7XG4gICAgICAgICAgbWF0Y2hlZEl0ZW1zLnB1c2godGhpc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBEb20obWF0Y2hlZEl0ZW1zKTtcbiAgICB9LFxuICAgIGh0bWw6IGZ1bmN0aW9uIGh0bWwoX2h0bWwpIHtcbiAgICAgIGlmICh0eXBlb2YgX2h0bWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB0aGlzWzBdID8gdGhpc1swXS5pbm5lckhUTUwgOiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVtcHR5KCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpc1tpXS5pbm5lckhUTUwgPSBfaHRtbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgIH0sXG4gICAgdGV4dDogZnVuY3Rpb24gdGV4dChfdGV4dCkge1xuICAgICAgaWYgKHR5cGVvZiBfdGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLnRleHRDb250ZW50LnRyaW0oKSA6IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzW2ldLnRleHRDb250ZW50ID0gX3RleHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9LFxuICAgIGlzOiBmdW5jdGlvbiBpcyhzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIHRoaXMubGVuZ3RoID4gMCAmJiBtYXRjaGVzKHRoaXNbMF0sIHNlbGVjdG9yKTtcbiAgICB9LFxuICAgIG5vdDogZnVuY3Rpb24gbm90KHNlbGVjdG9yKSB7XG4gICAgICB2YXIgbm9kZXMgPSBbXTtcblxuICAgICAgaWYgKGlzRnVuY3Rpb24oc2VsZWN0b3IpICYmIHNlbGVjdG9yLmNhbGwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKGlkeCkge1xuICAgICAgICAgIGlmICghc2VsZWN0b3IuY2FsbCh0aGlzLCBpZHgpKSB7XG4gICAgICAgICAgICBub2Rlcy5wdXNoKHRoaXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZXhjbHVkZXMgPSB0eXBlb2Ygc2VsZWN0b3IgPT0gJ3N0cmluZycgPyB0aGlzLmZpbHRlcihzZWxlY3RvcikgOiBsaWtlQXJyYXkoc2VsZWN0b3IpICYmIGlzRnVuY3Rpb24oc2VsZWN0b3IuaXRlbSkgPyBfc2xpY2UuY2FsbChzZWxlY3RvcikgOiAkKHNlbGVjdG9yKTtcblxuICAgICAgICBpZiAoaXNPYmplY3QoZXhjbHVkZXMpKSB7XG4gICAgICAgICAgZXhjbHVkZXMgPSAkLm1hcChleGNsdWRlcywgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24gKGksIGVsKSB7XG4gICAgICAgICAgaWYgKGV4Y2x1ZGVzLmluZGV4T2YoZWwpIDwgMCkge1xuICAgICAgICAgICAgbm9kZXMucHVzaChlbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICQobm9kZXMpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihlbCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzW2ldID09PSBlbCkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBpbmRleDogZnVuY3Rpb24gaW5kZXgoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQgPyB0aGlzLmluZGV4T2YoJChlbGVtZW50KVswXSkgOiB0aGlzLnBhcmVudCgpLmNoaWxkcmVuKCkuaW5kZXhPZih0aGlzWzBdKTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KGlkeCkge1xuICAgICAgcmV0dXJuIGlkeCA9PT0gdW5kZWZpbmVkID8gX3NsaWNlLmNhbGwodGhpcykgOiB0aGlzW2lkeCA+PSAwID8gaWR4IDogaWR4ICsgdGhpcy5sZW5ndGhdO1xuICAgIH0sXG4gICAgZXE6IGZ1bmN0aW9uIGVxKGluZGV4KSB7XG4gICAgICBpZiAodHlwZW9mIGluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoLFxuICAgICAgICAgIHJldHVybkluZGV4O1xuXG4gICAgICBpZiAoaW5kZXggPiBsZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBuZXcgRG9tKFtdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm5JbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICAgICAgICByZXR1cm4gcmV0dXJuSW5kZXggPCAwID8gbmV3IERvbShbXSkgOiBuZXcgRG9tKFt0aGlzW3JldHVybkluZGV4XV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERvbShbdGhpc1tpbmRleF1dKTtcbiAgICB9LFxuICAgIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKG5ld0NoaWxkKSB7XG4gICAgICB2YXIgaSwgajtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB2YXIgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG5cbiAgICAgICAgICB3aGlsZSAodGVtcERpdi5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKHRlbXBEaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5ld0NoaWxkIGluc3RhbmNlb2YgRG9tKSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IG5ld0NoaWxkLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkW2pdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpc1tpXS5hcHBlbmRDaGlsZChuZXdDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhcHBlbmRUbzogZnVuY3Rpb24gYXBwZW5kVG8ocGFyZW50KSB7XG4gICAgICAkKHBhcmVudCkuYXBwZW5kKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBwcmVwZW5kOiBmdW5jdGlvbiBwcmVwZW5kKG5ld0NoaWxkKSB7XG4gICAgICB2YXIgaSwgajtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB2YXIgdGVtcERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG5cbiAgICAgICAgICBmb3IgKGogPSB0ZW1wRGl2LmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKHRlbXBEaXYuY2hpbGROb2Rlc1tqXSwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgICB9IC8vIHRoaXNbaV0uaW5zZXJ0QWRqYWNlbnRIVE1MKCdhZnRlcmJlZ2luJywgbmV3Q2hpbGQpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb20pIHtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzW2ldLmluc2VydEJlZm9yZShuZXdDaGlsZCwgdGhpc1tpXS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHByZXBlbmRUbzogZnVuY3Rpb24gcHJlcGVuZFRvKHBhcmVudCkge1xuICAgICAgJChwYXJlbnQpLnByZXBlbmQodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGluc2VydEJlZm9yZTogZnVuY3Rpb24gaW5zZXJ0QmVmb3JlKHNlbGVjdG9yKSB7XG4gICAgICB2YXIgYmVmb3JlID0gJChzZWxlY3Rvcik7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoYmVmb3JlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGJlZm9yZVswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLCBiZWZvcmVbMF0pO1xuICAgICAgICB9IGVsc2UgaWYgKGJlZm9yZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBiZWZvcmUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGJlZm9yZVtqXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLmNsb25lTm9kZSh0cnVlKSwgYmVmb3JlW2pdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBpbnNlcnRBZnRlcjogZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIoc2VsZWN0b3IpIHtcbiAgICAgIHZhciBhZnRlciA9ICQoc2VsZWN0b3IpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGFmdGVyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGFmdGVyWzBdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0sIGFmdGVyWzBdLm5leHRTaWJsaW5nKTtcbiAgICAgICAgfSBlbHNlIGlmIChhZnRlci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBhZnRlci5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgYWZ0ZXJbal0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXS5jbG9uZU5vZGUodHJ1ZSksIGFmdGVyW2pdLm5leHRTaWJsaW5nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KHNlbGVjdG9yKSB7XG4gICAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZyAmJiAkKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRG9tKFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERvbShbXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEb20oW3RoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRG9tKFtdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgRG9tKFtdKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG5leHRBbGw6IGZ1bmN0aW9uIG5leHRBbGwoc2VsZWN0b3IpIHtcbiAgICAgIHZhciBuZXh0RWxzID0gW10sXG4gICAgICAgICAgZWwgPSB0aGlzWzBdO1xuXG4gICAgICBpZiAoIWVsKSB7XG4gICAgICAgIHJldHVybiBuZXcgRG9tKFtdKTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgICAgICB2YXIgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZztcblxuICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICBpZiAoJChuZXh0KS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWwgPSBuZXh0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERvbShuZXh0RWxzKTtcbiAgICB9LFxuICAgIHByZXY6IGZ1bmN0aW9uIHByZXYoc2VsZWN0b3IpIHtcbiAgICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgaWYgKHRoaXNbMF0ucHJldmlvdXNFbGVtZW50U2libGluZyAmJiAkKHRoaXNbMF0ucHJldmlvdXNFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERvbShbdGhpc1swXS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRG9tKFtdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXNbMF0ucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEb20oW3RoaXNbMF0ucHJldmlvdXNFbGVtZW50U2libGluZ10pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IERvbShbXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IERvbShbXSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwcmV2QWxsOiBmdW5jdGlvbiBwcmV2QWxsKHNlbGVjdG9yKSB7XG4gICAgICB2YXIgcHJldkVscyA9IFtdO1xuICAgICAgdmFyIGVsID0gdGhpc1swXTtcblxuICAgICAgaWYgKCFlbCkge1xuICAgICAgICByZXR1cm4gbmV3IERvbShbXSk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgICAgIHZhciBwcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZztcblxuICAgICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgICBpZiAoJChwcmV2KS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldkVscy5wdXNoKHByZXYpO1xuICAgICAgICB9XG5cbiAgICAgICAgZWwgPSBwcmV2O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IERvbShwcmV2RWxzKTtcbiAgICB9LFxuICAgIHBhcmVudDogZnVuY3Rpb24gcGFyZW50KHNlbGVjdG9yKSB7XG4gICAgICB2YXIgcGFyZW50cyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICAgICAgaWYgKCQodGhpc1tpXS5wYXJlbnROb2RlKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKHRoaXNbaV0ucGFyZW50Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gJCgkLnVuaXF1ZShwYXJlbnRzKSk7XG4gICAgfSxcbiAgICBwYXJlbnRzOiBmdW5jdGlvbiBwYXJlbnRzKHNlbGVjdG9yKSB7XG4gICAgICB2YXIgcGFyZW50cyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXNbaV0ucGFyZW50Tm9kZTtcblxuICAgICAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBpZiAoJChwYXJlbnQpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuICQoJC51bmlxdWUocGFyZW50cykpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChzZWxlY3Rvcikge1xuICAgICAgdmFyIGZvdW5kRWxlbWVudHMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBmb3VuZCA9IHRoaXNbaV0ucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBmb3VuZC5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGZvdW5kRWxlbWVudHMucHVzaChmb3VuZFtqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBEb20oZm91bmRFbGVtZW50cyk7XG4gICAgfSxcbiAgICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oc2VsZWN0b3IpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkTm9kZXMgPSB0aGlzW2ldLmNoaWxkTm9kZXM7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjaGlsZE5vZGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgICAgICAgaWYgKGNoaWxkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZE5vZGVzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNoaWxkTm9kZXNbal0ubm9kZVR5cGUgPT09IDEgJiYgJChjaGlsZE5vZGVzW2pdKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZE5vZGVzW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBEb20oJC51bmlxdWUoY2hpbGRyZW4pKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzW2ldLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICB0aGlzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhZGQ6IGZ1bmN0aW9uIGFkZCgpIHtcbiAgICAgIHZhciBkb20gPSB0aGlzO1xuICAgICAgdmFyIGksIGo7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRvQWRkID0gJChhcmd1bWVudHNbaV0pO1xuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCB0b0FkZC5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGRvbVtkb20ubGVuZ3RoXSA9IHRvQWRkW2pdO1xuICAgICAgICAgIGRvbS5sZW5ndGgrKztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZG9tO1xuICAgIH0sXG4gICAgYmVmb3JlOiBmdW5jdGlvbiBiZWZvcmUoZWxtKSB7XG4gICAgICAkKGVsbSkuaW5zZXJ0QmVmb3JlKHRoaXMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICBhZnRlcjogZnVuY3Rpb24gYWZ0ZXIoZWxtKSB7XG4gICAgICAkKGVsbSkuaW5zZXJ0QWZ0ZXIodGhpcyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHNjcm9sbFRvcDogZnVuY3Rpb24gc2Nyb2xsVG9wKHZhbHVlKSB7XG4gICAgICBpZiAoIXRoaXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGhhc1Njcm9sbFRvcCA9ICdzY3JvbGxUb3AnIGluIHRoaXNbMF07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNTY3JvbGxUb3AgPyB0aGlzWzBdLnNjcm9sbFRvcCA6IHRoaXNbMF0ucGFnZVlPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmVhY2goaGFzU2Nyb2xsVG9wID8gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNjcm9sbFRvcCA9IHZhbHVlO1xuICAgICAgfSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zY3JvbGxUbyh0aGlzLnNjcm9sbFgsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgc2Nyb2xsTGVmdDogZnVuY3Rpb24gc2Nyb2xsTGVmdCh2YWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBoYXNTY3JvbGxMZWZ0ID0gJ3Njcm9sbExlZnQnIGluIHRoaXNbMF07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNTY3JvbGxMZWZ0ID8gdGhpc1swXS5zY3JvbGxMZWZ0IDogdGhpc1swXS5wYWdlWE9mZnNldDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZWFjaChoYXNTY3JvbGxMZWZ0ID8gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnNjcm9sbExlZnQgPSB2YWx1ZTtcbiAgICAgIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2Nyb2xsVG8odmFsdWUsIHRoaXMuc2Nyb2xsWSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNvbnRlbnRzOiBmdW5jdGlvbiBjb250ZW50cygpIHtcbiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaSwgdikge1xuICAgICAgICByZXR1cm4gX3NsaWNlLmNhbGwodi5jaGlsZE5vZGVzKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgbmV4dFVudGlsOiBmdW5jdGlvbiBuZXh0VW50aWwoc2VsZWN0b3IpIHtcbiAgICAgIHZhciBuID0gdGhpcyxcbiAgICAgICAgICBhcnJheSA9IFtdO1xuXG4gICAgICB3aGlsZSAobi5sZW5ndGggJiYgIW4uZmlsdGVyKHNlbGVjdG9yKS5sZW5ndGgpIHtcbiAgICAgICAgYXJyYXkucHVzaChuWzBdKTtcbiAgICAgICAgbiA9IG4ubmV4dCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJChhcnJheSk7XG4gICAgfSxcbiAgICBwcmV2VW50aWw6IGZ1bmN0aW9uIHByZXZVbnRpbChzZWxlY3Rvcikge1xuICAgICAgdmFyIG4gPSB0aGlzLFxuICAgICAgICAgIGFycmF5ID0gW107XG5cbiAgICAgIHdoaWxlIChuLmxlbmd0aCAmJiAhJChuKS5maWx0ZXIoc2VsZWN0b3IpLmxlbmd0aCkge1xuICAgICAgICBhcnJheS5wdXNoKG5bMF0pO1xuICAgICAgICBuID0gbi5wcmV2KCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAkKGFycmF5KTtcbiAgICB9LFxuICAgIGRldGFjaDogZnVuY3Rpb24gZGV0YWNoKCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlKCk7XG4gICAgfVxuICB9OyAvLyBMaW5rIHRvIHByb3RvdHlwZVxuXG4gICQuZm4gPSBEb20ucHJvdG90eXBlO1xuICByZXR1cm4gJDtcbn0oKTsgLy8gRXhwb3J0IHRvIGxvY2FsIHNjb3BlXG5cblxudmFyICQgPSBEb207IC8vIEV4cG9ydCB0byBtb2Jpc2Nyb2xsXG5cbm1vYmlzY3JvbGwuJCA9IERvbTsgLy8gRE9NIExpYnJhcnkgVXRpbGl0ZXNcblxuJC5pbkFycmF5ID0gZnVuY3Rpb24gKGVsZW0sIGFycmF5LCBpKSB7XG4gIHJldHVybiBlbXB0eUFycmF5LmluZGV4T2YuY2FsbChhcnJheSwgZWxlbSwgaSk7XG59O1xuXG4kLmV4dGVuZCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgdmFyIGRlZXAsXG4gICAgICBhcmdzID0gX3NsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICBpZiAodHlwZW9mIHRhcmdldCA9PSAnYm9vbGVhbicpIHtcbiAgICBkZWVwID0gdGFyZ2V0O1xuICAgIHRhcmdldCA9IGFyZ3Muc2hpZnQoKTtcbiAgfVxuXG4gIHRhcmdldCA9IHRhcmdldCB8fCB7fTtcbiAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChhcmcpIHtcbiAgICBleHRlbmQodGFyZ2V0LCBhcmcsIGRlZXApO1xuICB9KTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG5cbiQuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5cbiQuaXNBcnJheSA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkoYXJyKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbiQuaXNQbGFpbk9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG9iaikgJiYgb2JqICE9PSBudWxsICYmIG9iaiAhPT0gb2JqLndpbmRvdyAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PSBPYmplY3QucHJvdG90eXBlO1xufTtcblxuJC5lYWNoID0gZnVuY3Rpb24gKG9iaiwgY2FsbGJhY2spIHtcbiAgdmFyIGksIHByb3A7XG5cbiAgaWYgKCFpc09iamVjdChvYmopIHx8ICFjYWxsYmFjaykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICgkLmlzQXJyYXkob2JqKSB8fCBvYmogaW5zdGFuY2VvZiBEb20pIHtcbiAgICAvLyBBcnJheVxuICAgIGZvciAoaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChjYWxsYmFjay5jYWxsKG9ialtpXSwgaSwgb2JqW2ldKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIE9iamVjdFxuICAgIGZvciAocHJvcCBpbiBvYmopIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkgJiYgcHJvcCAhPT0gJ2xlbmd0aCcpIHtcbiAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwob2JqW3Byb3BdLCBwcm9wLCBvYmpbcHJvcF0pID09PSBmYWxzZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4kLnVuaXF1ZSA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgdmFyIHVuaXF1ZSA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHVuaXF1ZS5pbmRleE9mKGFycltpXSkgPT09IC0xKSB7XG4gICAgICB1bmlxdWUucHVzaChhcnJbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmlxdWU7XG59O1xuXG4kLm1hcCA9IGZ1bmN0aW9uIChlbGVtZW50cywgY2FsbGJhY2spIHtcbiAgdmFyIHZhbHVlLFxuICAgICAgdmFsdWVzID0gW10sXG4gICAgICBpLFxuICAgICAga2V5O1xuXG4gIGlmIChsaWtlQXJyYXkoZWxlbWVudHMpKSB7XG4gICAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZSA9IGNhbGxiYWNrKGVsZW1lbnRzW2ldLCBpKTtcblxuICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChrZXkgaW4gZWxlbWVudHMpIHtcbiAgICAgIHZhbHVlID0gY2FsbGJhY2soZWxlbWVudHNba2V5XSwga2V5KTtcblxuICAgICAgaWYgKHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzLmxlbmd0aCA+IDAgPyAkLmZuLmNvbmNhdC5hcHBseShbXSwgdmFsdWVzKSA6IHZhbHVlcztcbn07XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBpc1N0cmluZyhzKSB7XG4gIHJldHVybiB0eXBlb2YgcyA9PT0gJ3N0cmluZyc7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cmFpbih2YWwsIG1pbiwgbWF4KSB7XG4gIHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKHZhbCwgbWF4KSk7XG59XG5cbmZ1bmN0aW9uIHZpYnJhdGUodGltZSkge1xuICBpZiAoJ3ZpYnJhdGUnIGluIG5hdmlnYXRvcikge1xuICAgIG5hdmlnYXRvci52aWJyYXRlKHRpbWUgfHwgNTApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBlcmNlbnQodiwgbWluLCBtYXgpIHtcbiAgcmV0dXJuICh2IC0gbWluKSAqIDEwMCAvIChtYXggLSBtaW4pO1xufVxuXG5mdW5jdGlvbiBnZXRCb29sQXR0cihhdHRyLCBkZWYsICRlbG0pIHtcbiAgdmFyIHYgPSAkZWxtLmF0dHIoYXR0cik7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gJycgPyBkZWYgOiB2ID09PSAndHJ1ZSc7XG59XG5cbnZhciB0YXBwZWQgPSAwO1xudmFyIGFsbG93UXVpY2s7XG5cbmZ1bmN0aW9uIHByZXZlbnRDbGljaygpIHtcbiAgLy8gUHJldmVudCBnaG9zdCBjbGlja1xuICB0YXBwZWQrKztcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgdGFwcGVkLS07XG4gIH0sIDUwMCk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXJDbGljayhldiwgY29udHJvbCkge1xuICAvLyBQcmV2ZW50IGR1cGxpY2F0ZSB0cmlnZ2VycyBvbiB0aGUgc2FtZSBlbGVtZW50XG4gIC8vIGUuZy4gYSBmb3JtIGNoZWNrYm94IGluc2lkZSBhIGxpc3R2aWV3IGl0ZW1cbiAgaWYgKGNvbnRyb2wubWJzY0NsaWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHRvdWNoID0gKGV2Lm9yaWdpbmFsRXZlbnQgfHwgZXYpLmNoYW5nZWRUb3VjaGVzWzBdLFxuICAgICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ01vdXNlRXZlbnRzJyk7XG4gIGV2dC5pbml0TW91c2VFdmVudCgnY2xpY2snLCB0cnVlLCB0cnVlLCB3aW5kb3csIDEsIHRvdWNoLnNjcmVlblgsIHRvdWNoLnNjcmVlblksIHRvdWNoLmNsaWVudFgsIHRvdWNoLmNsaWVudFksIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTtcbiAgZXZ0LmlzTWJzY1RhcCA9IHRydWU7IC8vIFByZXZlbnQgaW9uaWMgdG8gYnVzdCBvdXIgY2xpY2tcbiAgLy8gVGhpcyB3b3JrcyBmb3IgSW9uaWMgMSAtIDMsIG5vdCBzdXJlIGFib3V0IDRcblxuICBldnQuaXNJb25pY1RhcCA9IHRydWU7IC8vIFRoaXMgd2lsbCBhbGxvdyBhIGNsaWNrIGZpcmVkIHRvZ2V0aGVyIHdpdGggdGhpcyBjbGlja1xuICAvLyBXZSBuZWVkIHRoaXMsIGJlY2F1c2UgY2xpY2tpbmcgb24gYSBsYWJlbCB3aWxsIHRyaWdnZXIgYSBjbGlja1xuICAvLyBvbiB0aGUgYXNzb2NpYXRlZCBpbnB1dCBhcyB3ZWxsLCB3aGljaCBzaG91bGQgbm90IGJlIGJ1c3RlZFxuXG4gIGFsbG93UXVpY2sgPSB0cnVlO1xuICBjb250cm9sLm1ic2NDaGFuZ2UgPSB0cnVlO1xuICBjb250cm9sLm1ic2NDbGljayA9IHRydWU7XG4gIGNvbnRyb2wuZGlzcGF0Y2hFdmVudChldnQpO1xuICBhbGxvd1F1aWNrID0gZmFsc2U7IC8vIFByZXZlbnQgZ2hvc3QgY2xpY2tcblxuICBwcmV2ZW50Q2xpY2soKTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgZGVsZXRlIGNvbnRyb2wubWJzY0NsaWNrO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29vcmQoZSwgYywgcGFnZSkge1xuICB2YXIgZXYgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZSxcbiAgICAgIHByb3AgPSAocGFnZSA/ICdwYWdlJyA6ICdjbGllbnQnKSArIGM7IC8vIE11bHRpIHRvdWNoIHN1cHBvcnRcblxuICBpZiAoZXYudGFyZ2V0VG91Y2hlcyAmJiBldi50YXJnZXRUb3VjaGVzWzBdKSB7XG4gICAgcmV0dXJuIGV2LnRhcmdldFRvdWNoZXNbMF1bcHJvcF07XG4gIH1cblxuICBpZiAoZXYuY2hhbmdlZFRvdWNoZXMgJiYgZXYuY2hhbmdlZFRvdWNoZXNbMF0pIHtcbiAgICByZXR1cm4gZXYuY2hhbmdlZFRvdWNoZXNbMF1bcHJvcF07XG4gIH1cblxuICByZXR1cm4gZVtwcm9wXTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29udHJvbFR5cGUoJGVsbSkge1xuICB2YXIgYXR0cnMgPSBbJ3N3aXRjaCcsICdyYW5nZScsICdyYXRpbmcnLCAnc2VnbWVudGVkJywgJ3N0ZXBwZXInXTtcbiAgdmFyIGVsbSA9ICRlbG1bMF07XG4gIHZhciByb2xlID0gJGVsbS5hdHRyKCdkYXRhLXJvbGUnKTtcbiAgdmFyIHR5cGUgPSAkZWxtLmF0dHIoJ3R5cGUnKSB8fCBlbG0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICBpZiAoLyhzd2l0Y2h8cmFuZ2V8cmF0aW5nfHNlZ21lbnRlZHxzdGVwcGVyfHNlbGVjdCkvLnRlc3Qocm9sZSkpIHtcbiAgICB0eXBlID0gcm9sZTtcbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoJGVsbS5pcygnW21ic2MtJyArIGF0dHJzW2ldICsgJ10nKSkge1xuICAgICAgICB0eXBlID0gYXR0cnNbaV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ29udHJvbChjb250cm9sLCB0eXBlLCBldikge1xuICBjb250cm9sLmZvY3VzKCk7XG5cbiAgaWYgKC8oYnV0dG9ufHN1Ym1pdHxjaGVja2JveHxzd2l0Y2h8cmFkaW8pLy50ZXN0KHR5cGUpKSB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIGlmICghL3NlbGVjdC8udGVzdCh0eXBlKSkge1xuICAgIHRyaWdnZXJDbGljayhldiwgY29udHJvbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdGFwKHRoYXQsIGVsLCBoYW5kbGVyLCBwcmV2ZW50LCB0b2xlcmFuY2UsIHRpbWUpIHtcbiAgdmFyIHN0YXJ0WCxcbiAgICAgIHN0YXJ0WSxcbiAgICAgIHRhcmdldCxcbiAgICAgIG1vdmVkLFxuICAgICAgc3RhcnRUaW1lLFxuICAgICAgJCA9IG1vYmlzY3JvbGwuJCxcbiAgICAgICRlbG0gPSAkKGVsKTtcbiAgdG9sZXJhbmNlID0gdG9sZXJhbmNlIHx8IDk7XG5cbiAgZnVuY3Rpb24gb25TdGFydChldikge1xuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAvLyBDYW4ndCBhbHdheXMgY2FsbCBwcmV2ZW50RGVmYXVsdCBoZXJlLCBpdCBraWxscyBwYWdlIHNjcm9sbFxuICAgICAgLy8gaWYgKHByZXZlbnQpIHtcbiAgICAgIC8vICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gfVxuICAgICAgdGFyZ2V0ID0gdGhpcztcbiAgICAgIHN0YXJ0WCA9IGdldENvb3JkKGV2LCAnWCcpO1xuICAgICAgc3RhcnRZID0gZ2V0Q29vcmQoZXYsICdZJyk7XG4gICAgICBtb3ZlZCA9IGZhbHNlO1xuICAgICAgc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbk1vdmUoZXYpIHtcbiAgICAvLyBJZiBtb3ZlbWVudCBpcyBtb3JlIHRoYW4gMjBweCwgZG9uJ3QgZmlyZSB0aGUgY2xpY2sgZXZlbnQgaGFuZGxlclxuICAgIGlmICh0YXJnZXQgJiYgIW1vdmVkICYmIChNYXRoLmFicyhnZXRDb29yZChldiwgJ1gnKSAtIHN0YXJ0WCkgPiB0b2xlcmFuY2UgfHwgTWF0aC5hYnMoZ2V0Q29vcmQoZXYsICdZJykgLSBzdGFydFkpID4gdG9sZXJhbmNlKSkge1xuICAgICAgbW92ZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRW5kKGV2KSB7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgaWYgKHRpbWUgJiYgbmV3IERhdGUoKSAtIHN0YXJ0VGltZSA8IDEwMCB8fCAhbW92ZWQpIHtcbiAgICAgICAgLy8gZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gaGFuZGxlci5jYWxsKHRhcmdldCwgZXYsIHRoYXQpO1xuICAgICAgICB0cmlnZ2VyQ2xpY2soZXYsIGV2LnRhcmdldCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2ZW50Q2xpY2soKTtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0ID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25DbGljayhldikge1xuICAgIGlmIChwcmV2ZW50KSB7XG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0gLy8gSWYgaGFuZGxlciB3YXMgbm90IGNhbGxlZCBvbiB0b3VjaGVuZCwgY2FsbCBpdCBvbiBjbGljaztcblxuXG4gICAgaGFuZGxlci5jYWxsKHRoaXMsIGV2LCB0aGF0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2FuY2VsKCkge1xuICAgIHRhcmdldCA9IGZhbHNlO1xuICB9XG5cbiAgJGVsbS5lYWNoKGZ1bmN0aW9uIChpLCBlbG0pIHtcbiAgICBpZiAodGhhdC5zZXR0aW5ncy50YXApIHtcbiAgICAgIGxpc3RlbihlbG0sICd0b3VjaHN0YXJ0Jywgb25TdGFydCwge1xuICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIGxpc3RlbihlbG0sICd0b3VjaGNhbmNlbCcsIG9uQ2FuY2VsKTtcbiAgICAgIGxpc3RlbihlbG0sICd0b3VjaG1vdmUnLCBvbk1vdmUsIHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBsaXN0ZW4oZWxtLCAndG91Y2hlbmQnLCBvbkVuZCk7XG4gICAgfVxuXG4gICAgbGlzdGVuKGVsbSwgJ2NsaWNrJywgb25DbGljayk7XG5cbiAgICBlbG0uX19tYnNjT2ZmID0gZnVuY3Rpb24gKCkge1xuICAgICAgdW5saXN0ZW4oZWxtLCAndG91Y2hzdGFydCcsIG9uU3RhcnQsIHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB1bmxpc3RlbihlbG0sICd0b3VjaGNhbmNlbCcsIG9uQ2FuY2VsKTtcbiAgICAgIHVubGlzdGVuKGVsbSwgJ3RvdWNobW92ZScsIG9uTW92ZSwge1xuICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHVubGlzdGVuKGVsbSwgJ3RvdWNoZW5kJywgb25FbmQpO1xuICAgICAgdW5saXN0ZW4oZWxtLCAnY2xpY2snLCBvbkNsaWNrKTtcbiAgICAgIGRlbGV0ZSBlbG0uX19tYnNjT2ZmO1xuICAgIH07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0YXBPZmYoJGVsbSkge1xuICBpZiAoJGVsbSAmJiAkZWxtWzBdICYmICRlbG1bMF0uX19tYnNjT2ZmKSB7XG4gICAgJGVsbVswXS5fX21ic2NPZmYoKTtcbiAgfVxufSAvLyBQcmV2ZW50IHN0YW5kYXJkIGJlaGF2aW91ciBvbiBib2R5IGNsaWNrXG5cblxuZnVuY3Rpb24gYnVzdENsaWNrKGV2KSB7XG4gIC8vIFRleHRhcmVhIG5lZWRzIHRoZSBtb3VzZWRvd24gZXZlbnRcbiAgaWYgKHRhcHBlZCAmJiAhYWxsb3dRdWljayAmJiAhZXYuaXNNYnNjVGFwICYmICEoZXYudGFyZ2V0Lm5vZGVOYW1lID09ICdURVhUQVJFQScgJiYgZXYudHlwZSA9PSAnbW91c2Vkb3duJykpIHtcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5pZiAoaXNCcm93c2VyKSB7XG4gIFsnbW91c2VvdmVyJywgJ21vdXNlZG93bicsICdtb3VzZXVwJywgJ2NsaWNrJ10uZm9yRWFjaChmdW5jdGlvbiAoZXYpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2LCBidXN0Q2xpY2ssIHRydWUpO1xuICB9KTtcblxuICBpZiAob3MgPT0gJ2FuZHJvaWQnICYmIG1ham9yVmVyc2lvbiA8IDUpIHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgIGlmICh0YXBwZWQgJiYgZXYudGFyZ2V0LnR5cGUgPT0gJ2NoZWNrYm94JyAmJiAhZXYudGFyZ2V0Lm1ic2NDaGFuZ2UpIHtcbiAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGRlbGV0ZSBldi50YXJnZXQubWJzY0NoYW5nZTtcbiAgICB9LCB0cnVlKTtcbiAgfVxufVxuXG4vKiFcbiAqIE1vYmlzY3JvbGwgdjQuMTAuOVxuICogaHR0cDovL21vYmlzY3JvbGwuY29tXG4gKlxuICpcbiAqIENvcHlyaWdodCAyMDEwLTIwMTgsIEFjaWQgTWVkaWFcbiAqXG4gKi9cblxuZnVuY3Rpb24gZ2V0V2lkdGgoZWwpIHtcbiAgcmV0dXJuIGVsWzBdLmlubmVyV2lkdGggfHwgZWwuaW5uZXJXaWR0aCgpO1xufVxuXG5mdW5jdGlvbiBnZXRUaGVtZU5hbWUocykge1xuICB2YXIgdGhlbWVOYW1lID0gcy50aGVtZSxcbiAgICAgIHRoZW1lVmFyaWFudCA9IHMudGhlbWVWYXJpYW50O1xuXG4gIGlmICh0aGVtZU5hbWUgPT0gJ2F1dG8nIHx8ICF0aGVtZU5hbWUpIHtcbiAgICB0aGVtZU5hbWUgPSBtcy5hdXRvVGhlbWU7XG4gIH1cblxuICBpZiAodGhlbWVOYW1lID09ICdkZWZhdWx0Jykge1xuICAgIHRoZW1lTmFtZSA9ICdtb2Jpc2Nyb2xsJztcbiAgfVxuXG4gIGlmICgodGhlbWVWYXJpYW50ID09PSAnZGFyaycgfHwgaXNEYXJrICYmIHRoZW1lVmFyaWFudCA9PT0gJ2F1dG8nKSAmJiBtcy50aGVtZXMuZm9ybVt0aGVtZU5hbWUgKyAnLWRhcmsnXSkge1xuICAgIHRoZW1lTmFtZSA9IHRoZW1lTmFtZSArICctZGFyayc7XG4gIH0gZWxzZSBpZiAodGhlbWVWYXJpYW50ID09PSAnbGlnaHQnICYmIC8uKy1kYXJrJC8udGVzdCh0aGVtZU5hbWUpKSB7XG4gICAgdGhlbWVOYW1lID0gdGhlbWVOYW1lLnJlcGxhY2UoLy1kYXJrJC8sICcnKTtcbiAgfVxuXG4gIHJldHVybiB0aGVtZU5hbWU7XG59XG5cbmZ1bmN0aW9uIGF1dG9Jbml0KHNlbGVjdG9yLCBDb21wb25lbnQsIGhhc1JlZnJlc2gpIHtcbiAgaWYgKGlzQnJvd3Nlcikge1xuICAgICQkMShmdW5jdGlvbiAoKSB7XG4gICAgICAkJDEoc2VsZWN0b3IpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBuZXcgQ29tcG9uZW50KHRoaXMsIHt9KTtcbiAgICAgIH0pO1xuICAgICAgJCQxKGRvY3VtZW50KS5vbignbWJzYy1lbmhhbmNlJywgZnVuY3Rpb24gKGV2LCBzZXR0aW5ncykge1xuICAgICAgICBpZiAoJCQxKGV2LnRhcmdldCkuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgICAgbmV3IENvbXBvbmVudChldi50YXJnZXQsIHNldHRpbmdzIHx8IHt9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkJDEoc2VsZWN0b3IsIGV2LnRhcmdldCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBuZXcgQ29tcG9uZW50KHRoaXMsIHNldHRpbmdzIHx8IHt9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChoYXNSZWZyZXNoKSB7XG4gICAgICAgICQkMShkb2N1bWVudCkub24oJ21ic2MtcmVmcmVzaCcsIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgIHZhciBpbnN0O1xuXG4gICAgICAgICAgaWYgKCQkMShldi50YXJnZXQpLmlzKHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgaW5zdCA9IGluc3RhbmNlc1tldi50YXJnZXQuaWRdO1xuXG4gICAgICAgICAgICBpZiAoaW5zdCkge1xuICAgICAgICAgICAgICBpbnN0LnJlZnJlc2goKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJCQxKHNlbGVjdG9yLCBldi50YXJnZXQpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpbnN0ID0gaW5zdGFuY2VzW3RoaXMuaWRdO1xuXG4gICAgICAgICAgICAgIGlmIChpbnN0KSB7XG4gICAgICAgICAgICAgICAgaW5zdC5yZWZyZXNoKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIG1zLFxuICAgICQkMSA9IG1vYmlzY3JvbGwuJCxcbiAgICBpZCA9ICtuZXcgRGF0ZSgpLFxuICAgIGluc3RhbmNlcyA9IHt9LFxuICAgIGNsYXNzZXMgPSB7fSxcbiAgICBlbXB0eSA9IHt9LFxuICAgIGJyZWFrcG9pbnRzID0ge1xuICB4c21hbGw6IDAsXG4gIHNtYWxsOiA1NzYsXG4gIG1lZGl1bTogNzY4LFxuICBsYXJnZTogOTkyLFxuICB4bGFyZ2U6IDEyMDBcbn0sXG4gICAgZXh0ZW5kJDEgPSAkJDEuZXh0ZW5kO1xuZXh0ZW5kJDEodXRpbCwge1xuICBnZXRDb29yZDogZ2V0Q29vcmQsXG4gIHByZXZlbnRDbGljazogcHJldmVudENsaWNrLFxuICB2aWJyYXRlOiB2aWJyYXRlXG59KTtcbm1zID0gZXh0ZW5kJDEobW9iaXNjcm9sbCwge1xuICAkOiAkJDEsXG4gIHZlcnNpb246ICc0LjEwLjknLFxuICBhdXRvVGhlbWU6ICdtb2Jpc2Nyb2xsJyxcbiAgdGhlbWVzOiB7XG4gICAgZm9ybToge30sXG4gICAgcGFnZToge30sXG4gICAgZnJhbWU6IHt9LFxuICAgIHNjcm9sbGVyOiB7fSxcbiAgICBsaXN0dmlldzoge30sXG4gICAgbmF2aWdhdGlvbjoge30sXG4gICAgcHJvZ3Jlc3M6IHt9LFxuICAgIGNhcmQ6IHt9XG4gIH0sXG4gIHBsYXRmb3JtOiB7XG4gICAgbmFtZTogb3MsXG4gICAgbWFqb3JWZXJzaW9uOiBtYWpvclZlcnNpb24sXG4gICAgbWlub3JWZXJzaW9uOiBtaW5vclZlcnNpb25cbiAgfSxcbiAgaTE4bjoge30sXG4gIGluc3RhbmNlczogaW5zdGFuY2VzLFxuICBjbGFzc2VzOiBjbGFzc2VzLFxuICB1dGlsOiB1dGlsLFxuICBzZXR0aW5nczoge30sXG4gIHNldERlZmF1bHRzOiBmdW5jdGlvbiBzZXREZWZhdWx0cyhvKSB7XG4gICAgZXh0ZW5kJDEodGhpcy5zZXR0aW5ncywgbyk7XG4gIH0sXG4gIGN1c3RvbVRoZW1lOiBmdW5jdGlvbiBjdXN0b21UaGVtZShuYW1lLCBiYXNlVGhlbWUpIHtcbiAgICB2YXIgaSxcbiAgICAgICAgdGhlbWVzID0gbW9iaXNjcm9sbC50aGVtZXMsXG4gICAgICAgIGNvbXBzID0gWydmcmFtZScsICdzY3JvbGxlcicsICdsaXN0dmlldycsICduYXZpZ2F0aW9uJywgJ2Zvcm0nLCAncGFnZScsICdwcm9ncmVzcycsICdjYXJkJ107XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY29tcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoZW1lc1tjb21wc1tpXV1bbmFtZV0gPSBleHRlbmQkMSh7fSwgdGhlbWVzW2NvbXBzW2ldXVtiYXNlVGhlbWVdLCB7XG4gICAgICAgIGJhc2VUaGVtZTogYmFzZVRoZW1lXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgQmFzZSA9IGZ1bmN0aW9uIEJhc2UoZWwsIHNldHRpbmdzKSB7XG4gIHZhciBjdHgsXG4gICAgICBsYW5nLFxuICAgICAgcHJlc2V0LFxuICAgICAgcmVzcCxcbiAgICAgIHMsXG4gICAgICB0aGVtZSxcbiAgICAgIHRoZW1lTmFtZSxcbiAgICAgIHRyaWdnZXIsXG4gICAgICBkZWZhdWx0cyxcbiAgICAgIHRoYXQgPSB0aGlzO1xuICB0aGF0LnNldHRpbmdzID0ge307XG4gIHRoYXQuZWxlbWVudCA9IGVsO1xuICB0aGF0Ll9pbml0ID0gbm9vcDtcbiAgdGhhdC5fZGVzdHJveSA9IG5vb3A7XG4gIHRoYXQuX3Byb2Nlc3NTZXR0aW5ncyA9IG5vb3A7XG5cbiAgdGhhdC5fY2hlY2tSZXNwID0gZnVuY3Rpb24gKHdpZHRoKSB7XG4gICAgaWYgKHRoYXQgJiYgdGhhdC5fcmVzcG9uc2l2ZSkge1xuICAgICAgdmFyIG5ld1Jlc3AgPSBnZXRSZXNwb25zaXZlU2V0dGluZ3Mod2lkdGgpO1xuXG4gICAgICBpZiAocmVzcCAhPT0gbmV3UmVzcCkge1xuICAgICAgICByZXNwID0gbmV3UmVzcDtcbiAgICAgICAgdGhhdC5pbml0KHt9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRoYXQuX2dldFJlc3BDb250ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAkJDEocy5jb250ZXh0ID09ICdib2R5JyA/IHdpbmRvdyA6IHMuY29udGV4dCk7XG4gIH07XG5cbiAgdGhhdC5pbml0ID0gZnVuY3Rpb24gKG5ld1NldHRpbmdzLCBuZXdWYWx1ZSkge1xuICAgIHZhciBrZXksIHZhbHVlOyAvLyBJbiBjYXNlIG9mIHNldHRpbmdzIHVwZGF0ZSBzYXZlIHRoZSBvbGQgdmFsdWVcblxuICAgIGlmIChuZXdTZXR0aW5ncyAmJiB0aGF0LmdldFZhbCkge1xuICAgICAgdmFsdWUgPSB0aGF0LmdldFZhbCgpO1xuICAgIH0gLy8gUmVzZXQgc2V0dGluZ3Mgb2JqZWN0XG5cblxuICAgIGZvciAoa2V5IGluIHRoYXQuc2V0dGluZ3MpIHtcbiAgICAgIGRlbGV0ZSB0aGF0LnNldHRpbmdzW2tleV07XG4gICAgfVxuXG4gICAgcyA9IHRoYXQuc2V0dGluZ3M7IC8vIFVwZGF0ZSBvcmlnaW5hbCB1c2VyIHNldHRpbmdzXG5cbiAgICBleHRlbmQkMShzZXR0aW5ncywgbmV3U2V0dGluZ3MpOyAvLyBMb2FkIHVzZXIgZGVmYXVsdHNcblxuICAgIGlmICh0aGF0Ll9oYXNEZWYpIHtcbiAgICAgIGRlZmF1bHRzID0gbXMuc2V0dGluZ3M7XG4gICAgfSAvLyBDcmVhdGUgc2V0dGluZ3Mgb2JqZWN0XG5cblxuICAgIGV4dGVuZCQxKHMsIHRoYXQuX2RlZmF1bHRzLCBkZWZhdWx0cywgc2V0dGluZ3MpO1xuICAgIGN0eCA9IHRoYXQuX2dldFJlc3BDb250KCk7XG5cbiAgICBpZiAodGhhdC5fcmVzcG9uc2l2ZSkge1xuICAgICAgaWYgKCFyZXNwKSB7XG4gICAgICAgIHJlc3AgPSBnZXRSZXNwb25zaXZlU2V0dGluZ3MoKTtcbiAgICAgIH1cblxuICAgICAgZXh0ZW5kJDEocywgcmVzcCk7XG4gICAgfSAvLyBHZXQgdGhlbWUgZGVmYXVsdHNcblxuXG4gICAgaWYgKHRoYXQuX2hhc1RoZW1lKSB7XG4gICAgICB0aGVtZU5hbWUgPSBnZXRUaGVtZU5hbWUocyk7XG4gICAgICBzZXR0aW5ncy50aGVtZSA9IHRoZW1lTmFtZTtcbiAgICAgIHRoZW1lID0gbXMudGhlbWVzW3RoYXQuX2NsYXNzXSA/IG1zLnRoZW1lc1t0aGF0Ll9jbGFzc11bdGhlbWVOYW1lXSA6IHt9O1xuICAgIH0gLy8gR2V0IGxhbmd1YWdlIGRlZmF1bHRzXG5cblxuICAgIGlmICh0aGF0Ll9oYXNMYW5nKSB7XG4gICAgICBsYW5nID0gbXMuaTE4bltzLmxhbmddO1xuICAgIH0gLy8gVXBkYXRlIHNldHRpbmdzIG9iamVjdFxuXG5cbiAgICBleHRlbmQkMShzLCB0aGVtZSwgbGFuZywgZGVmYXVsdHMsIHNldHRpbmdzLCByZXNwKTtcblxuICAgIHRoYXQuX3Byb2Nlc3NTZXR0aW5ncyhyZXNwIHx8IHt9KTsgLy8gTG9hZCBwcmVzZXQgc2V0dGluZ3NcblxuXG4gICAgaWYgKHRoYXQuX3ByZXNldHMpIHtcbiAgICAgIHByZXNldCA9IHRoYXQuX3ByZXNldHNbcy5wcmVzZXRdO1xuXG4gICAgICBpZiAocHJlc2V0KSB7XG4gICAgICAgIHByZXNldCA9IHByZXNldC5jYWxsKGVsLCB0aGF0LCBzZXR0aW5ncywgcmVzcCk7XG4gICAgICAgIGV4dGVuZCQxKHMsIHByZXNldCwgc2V0dGluZ3MsIHJlc3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoYXQuX2luaXQobmV3U2V0dGluZ3MpOyAvLyBJbiBjYXNlIG9mIHNldHRpbmdzIHVwZGF0ZSByZXNldCB0aGUgdmFsdWUuXG4gICAgLy8gVGhpcyBpcyBuZWVkZWQgdG8gYWRhcHQgdGhlIHZhbHVlIGZvciB0aGUgdXBkYXRlZCBzZXR0aW5nc1xuICAgIC8vIEUuZy4gbWluL21heCwgZGF0ZSBmb3JtYXQsIGV0Yy5cblxuXG4gICAgaWYgKG5ld1NldHRpbmdzICYmIHRoYXQuc2V0VmFsKSB7XG4gICAgICB0aGF0LnNldFZhbChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkID8gdmFsdWUgOiBuZXdWYWx1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdHJpZ2dlcignb25Jbml0Jyk7XG4gIH07XG5cbiAgdGhhdC5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGF0KSB7XG4gICAgICB0aGF0Ll9kZXN0cm95KCk7XG5cbiAgICAgIHRyaWdnZXIoJ29uRGVzdHJveScpOyAvLyBEZWxldGUgc2Nyb2xsZXIgaW5zdGFuY2VcblxuICAgICAgZGVsZXRlIGluc3RhbmNlc1tlbC5pZF07XG4gICAgICB0aGF0ID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBBdHRhY2ggdGFwIGV2ZW50IHRvIHRoZSBnaXZlbiBlbGVtZW50LlxuICAgKi9cblxuXG4gIHRoYXQudGFwID0gZnVuY3Rpb24gKGVsLCBoYW5kbGVyLCBwcmV2ZW50LCB0b2xlcmFuY2UsIHRpbWUpIHtcbiAgICB0YXAodGhhdCwgZWwsIGhhbmRsZXIsIHByZXZlbnQsIHRvbGVyYW5jZSwgdGltZSk7XG4gIH07XG4gIC8qKlxuICAgKiBUcmlnZ2VycyBhbiBldmVudFxuICAgKi9cblxuXG4gIHRoYXQudHJpZ2dlciA9IGZ1bmN0aW9uIChuYW1lLCBldikge1xuICAgIHZhciByZXQsXG4gICAgICAgIGksXG4gICAgICAgIHYsXG4gICAgICAgIHMgPSBbZGVmYXVsdHMsIHRoZW1lLCBwcmVzZXQsIHNldHRpbmdzXTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCA0OyBpKyspIHtcbiAgICAgIHYgPSBzW2ldO1xuXG4gICAgICBpZiAodiAmJiB2W25hbWVdKSB7XG4gICAgICAgIHJldCA9IHZbbmFtZV0uY2FsbChlbCwgZXYgfHwge30sIHRoYXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXQ7XG4gIH07XG4gIC8qKlxuICAgKiBTZXRzIG9uZSBvcmUgbW9yZSBvcHRpb25zLlxuICAgKi9cblxuXG4gIHRoYXQub3B0aW9uID0gZnVuY3Rpb24gKG9wdCwgdmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgdmFyIG9iaiA9IHt9LFxuICAgICAgICAvLyBwcmVzZXJ2ZSBzZXR0aW5ncyB0aGF0IGFyZSBwb3NzaWJsZSB0byBjaGFuZ2UgcnVudGltZVxuICAgIGR5bmFtaWMgPSBbJ2RhdGEnLCAnaW52YWxpZCcsICd2YWxpZCcsICdyZWFkb25seSddO1xuXG4gICAgaWYgKC9jYWxlbmRhcnxldmVudGNhbGVuZGFyfHJhbmdlLy50ZXN0KHMucHJlc2V0KSkge1xuICAgICAgZHluYW1pYy5wdXNoKCdtYXJrZWQnLCAnbGFiZWxzJywgJ2NvbG9ycycpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0ID09PSAnb2JqZWN0Jykge1xuICAgICAgb2JqID0gb3B0O1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpbb3B0XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGR5bmFtaWMuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgc2V0dGluZ3Nbdl0gPSBzW3ZdO1xuICAgIH0pO1xuICAgIHRoYXQuaW5pdChvYmosIG5ld1ZhbHVlKTtcbiAgfTtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG1vYmlzY3JvbGwgaW5zdGFuY2UuXG4gICAqL1xuXG5cbiAgdGhhdC5nZXRJbnN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGF0O1xuICB9O1xuXG4gIHNldHRpbmdzID0gc2V0dGluZ3MgfHwge307XG4gIHRyaWdnZXIgPSB0aGF0LnRyaWdnZXI7XG5cbiAgZnVuY3Rpb24gZ2V0UmVzcG9uc2l2ZVNldHRpbmdzKHcpIHtcbiAgICB2YXIgcmVzdWx0ID0gZW1wdHksXG4gICAgICAgIHdpZHRoO1xuXG4gICAgaWYgKHMucmVzcG9uc2l2ZSkge1xuICAgICAgd2lkdGggPSB3IHx8IGdldFdpZHRoKGN0eCk7XG4gICAgICAkJDEuZWFjaChzLnJlc3BvbnNpdmUsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmICh3aWR0aCA+PSAodmFsdWUuYnJlYWtwb2ludCB8fCBicmVha3BvaW50c1trZXldKSkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uc3RydWN0KCkge1xuICAgICQkMShlbCkuYWRkQ2xhc3MoJ21ic2MtY29tcCcpOyAvLyBBdXRvZ2VuZXJhdGUgaWRcblxuICAgIGlmICghZWwuaWQpIHtcbiAgICAgIGVsLmlkID0gJ21vYmlzY3JvbGwnICsgKytpZDtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlc1tlbC5pZF0pIHtcbiAgICAgIGluc3RhbmNlc1tlbC5pZF0uZGVzdHJveSgpO1xuICAgIH0gLy8gU2F2ZSBpbnN0YW5jZVxuXG5cbiAgICBpbnN0YW5jZXNbZWwuaWRdID0gdGhhdDtcbiAgICB0aGF0Ll9fcmVhZHkgPSB0cnVlO1xuICB9XG5cbiAgaWYgKCF0aGF0Ll9fcmVhZHkpIHtcbiAgICBjb25zdHJ1Y3QoKTtcbiAgfVxufTtcblxudmFyIE9ic2VydmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE9ic2VydmFibGUoKSB7XG4gICAgdGhpcy5rZXlDb3VudCA9IDA7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgdmFyIGtleSA9IHRoaXMua2V5Q291bnQrKztcbiAgICB0aGlzLnN1YnNjcmliZXJzLnNldChrZXksIGhhbmRsZXIpO1xuICAgIHJldHVybiBrZXk7XG4gIH07XG5cbiAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRoaXMuc3Vic2NyaWJlcnMuZGVsZXRlKGhhbmRsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZm91bmRLZXlfMSA9IG51bGw7XG4gICAgICB0aGlzLnN1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKGZuLCBrZXkpIHtcbiAgICAgICAgaWYgKGZuID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgZm91bmRLZXlfMSA9IGtleTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLnN1YnNjcmliZXJzLmRlbGV0ZShmb3VuZEtleV8xKTtcbiAgICB9XG4gIH07XG5cbiAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcih2YWx1ZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE9ic2VydmFibGU7XG59KCk7XG5cbnZhciBNYnNjT3B0aW9uc1NlcnZpY2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1ic2NPcHRpb25zU2VydmljZSgpIHtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1ic2NPcHRpb25zU2VydmljZS5wcm90b3R5cGUsIFwib3B0aW9uc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMgPSBvO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNYnNjT3B0aW9uc1NlcnZpY2UuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlIH0sXG4gICAgXTtcbiAgICBNYnNjT3B0aW9uc1NlcnZpY2UuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfTtcbiAgICByZXR1cm4gTWJzY09wdGlvbnNTZXJ2aWNlO1xufSgpKTtcbnZhciBNYnNjSW5wdXRTZXJ2aWNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYnNjSW5wdXRTZXJ2aWNlKCkge1xuICAgICAgICB0aGlzLl9jb250cm9sU2V0ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudFJlZiA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1ic2NJbnB1dFNlcnZpY2UucHJvdG90eXBlLCBcImlzQ29udHJvbFNldFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRyb2xTZXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2xTZXQgPSB2O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY0lucHV0U2VydmljZS5wcm90b3R5cGUsIFwiaW5wdXRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb21wb25lbnRSZWY7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBvbmVudFJlZiA9IHY7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1ic2NJbnB1dFNlcnZpY2UuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBJbmplY3RhYmxlIH0sXG4gICAgXTtcbiAgICBNYnNjSW5wdXRTZXJ2aWNlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgcmV0dXJuIE1ic2NJbnB1dFNlcnZpY2U7XG59KCkpO1xudmFyIE1ic2NCYXNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYnNjQmFzZShpbml0aWFsRWxlbSwgem9uZSkge1xuICAgICAgICB0aGlzLmluaXRpYWxFbGVtID0gaW5pdGlhbEVsZW07XG4gICAgICAgIHRoaXMuem9uZSA9IHpvbmU7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLm9uSW5pdCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3kgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuaW5saW5lT3B0aW9uc09iaiA9IHt9O1xuICAgICAgICB0aGlzLnBlbmRpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy50aGVtZUNsYXNzZXNTZXQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuaW5saW5lT3B0aW9uc09iai56b25lID0gem9uZTtcbiAgICB9XG4gICAgTWJzY0Jhc2UucHJvdG90eXBlLmdldElubGluZUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgaWYgKHRoaXNfMVtwcm9wXSBpbnN0YW5jZW9mIChFdmVudEVtaXR0ZXIpICYmICghdGhpc18xLm9wdGlvbnMgfHwgISh0aGlzXzEub3B0aW9uc1twcm9wXSkpKSB7XG4gICAgICAgICAgICAgICAgdGhpc18xLmlubGluZU9wdGlvbnNPYmpbcHJvcF0gPSBmdW5jdGlvbiAoZXZlbnQsIGluc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuaW5zdCA9IGluc3Q7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzW3Byb3BdLmVtaXQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHZhciB0aGlzXzEgPSB0aGlzO1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHRoaXMpIHtcbiAgICAgICAgICAgIF9sb29wXzEocHJvcCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ic2NCYXNlLnByb3RvdHlwZS5zZXRUaGVtZUNsYXNzZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQkMSh0aGlzLmluaXRpYWxFbGVtLm5hdGl2ZUVsZW1lbnQpLmFkZENsYXNzKHRoaXMuZ2V0VGhlbWVDbGFzc2VzKCkpO1xuICAgICAgICB0aGlzLnRoZW1lQ2xhc3Nlc1NldCA9IHRydWU7XG4gICAgfTtcbiAgICBNYnNjQmFzZS5wcm90b3R5cGUuY2xlYXJUaGVtZUNsYXNzZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQkMSh0aGlzLmluaXRpYWxFbGVtLm5hdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKHRoaXMuZ2V0VGhlbWVDbGFzc2VzKCkpO1xuICAgIH07XG4gICAgTWJzY0Jhc2UucHJvdG90eXBlLmdldFRoZW1lQ2xhc3NlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHMgPSB0aGlzLmluc3RhbmNlLnNldHRpbmdzO1xuICAgICAgICByZXR1cm4gJ21ic2MtY29udHJvbC1uZyBtYnNjLScgKyBzLnRoZW1lICsgKHMuYmFzZVRoZW1lID8gJyBtYnNjLScgKyBzLmJhc2VUaGVtZSA6ICcnKTtcbiAgICB9O1xuICAgIE1ic2NCYXNlLnByb3RvdHlwZS5zZXRFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSB0aGlzLmluaXRpYWxFbGVtLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHZhciBjb250ZW50SW5wdXQgPSAkJDEoJ2lucHV0JywgdGhpcy5pbml0aWFsRWxlbS5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgaWYgKGNvbnRlbnRJbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudCA9IGNvbnRlbnRJbnB1dFswXTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY0Jhc2UucHJvdG90eXBlLm5nQWZ0ZXJWaWV3SW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zZXRFbGVtZW50KCk7XG4gICAgICAgIHRoaXMuc3RhcnRJbml0KCk7XG4gICAgfTtcbiAgICBNYnNjQmFzZS5wcm90b3R5cGUuc3RhcnRJbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmdldElubGluZUV2ZW50cygpO1xuICAgICAgICB2YXIgaW9uSW5wdXQgPSB0aGlzLmdldElvbklucHV0KCk7XG4gICAgICAgIGlmIChpb25JbnB1dCAmJiAoaW9uSW5wdXQuZ2V0SW5wdXRFbGVtZW50IHx8IGlvbklucHV0LnRoZW4pICYmIHRoaXMuZWxlbWVudC5ub2RlTmFtZSAhPT0gXCJJTlBVVFwiKSB7XG4gICAgICAgICAgICBpZiAoaW9uSW5wdXQuZ2V0SW5wdXRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgaW9uSW5wdXQuZ2V0SW5wdXRFbGVtZW50KCkudGhlbihmdW5jdGlvbiAoaW5wKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnNldEVsZW1lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW5pdENvbnRyb2woKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlvbklucHV0LnRoZW4oZnVuY3Rpb24gKGlvbklucENvbXBvbmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpb25JbnBDb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRJbnB1dEVsZW1lbnQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGlucCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0RWxlbWVudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW5pdENvbnRyb2woKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdENvbnRyb2woKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY0Jhc2UucHJvdG90eXBlLmdldElvbklucHV0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdiA9IHRoaXMuX3ZpZXc7XG4gICAgICAgIHZhciBuYXRpdmUgPSB0aGlzLmluaXRpYWxFbGVtLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIHZhciBpb25JbnB1dE5vZGUgPSBuYXRpdmUubm9kZU5hbWUgPT09IFwiSU9OLUlOUFVUXCI7XG4gICAgICAgIHZhciBpbnAxID0gaW9uSW5wdXROb2RlICYmIHYgJiYgdi5fZGF0YSAmJiB2Ll9kYXRhLmNvbXBvbmVudFZpZXcgJiYgdi5fZGF0YS5jb21wb25lbnRWaWV3LmNvbXBvbmVudDtcbiAgICAgICAgdmFyIGlucDIgPSBpb25JbnB1dE5vZGUgJiYgbmF0aXZlLmNvbXBvbmVudE9uUmVhZHkgJiYgbmF0aXZlLmNvbXBvbmVudE9uUmVhZHkoKTtcbiAgICAgICAgcmV0dXJuIGlucDEgfHwgaW5wMjtcbiAgICB9O1xuICAgIE1ic2NCYXNlLnByb3RvdHlwZS5pbml0Q29udHJvbCA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICBNYnNjQmFzZS5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY0Jhc2UucHJvdG90eXBlLnVwZGF0ZU9wdGlvbnMgPSBmdW5jdGlvbiAobmV3T3B0aW9ucywgb3B0aW9uQ2hhbmdlZCwgaW52YWxpZENoYW5nZWQsIGRhdGFDaGFuZ2VkKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChvcHRpb25DaGFuZ2VkIHx8IGludmFsaWRDaGFuZ2VkKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAobmV3T3B0aW9ucy50aGVtZSAmJiBfdGhpcy50aGVtZUNsYXNzZXNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY2xlYXJUaGVtZUNsYXNzZXMoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5zdGFuY2Uub3B0aW9uKG5ld09wdGlvbnMsIHVuZGVmaW5lZCwgX3RoaXMucGVuZGluZ1ZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAobmV3T3B0aW9ucy50aGVtZSAmJiBfdGhpcy50aGVtZUNsYXNzZXNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0VGhlbWVDbGFzc2VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGF0YUNoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaERhdGEodGhpcy5kYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmluc3RhbmNlLnJlZHJhdykge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5yZWRyYXcoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY0Jhc2UucHJvdG90eXBlLm5nT25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcbiAgICAgICAgdmFyIG9wdGlvbkNoYW5nZSA9IGZhbHNlLCBjbG9uZUNoYW5nZSA9IGZhbHNlLCBpbnZhbGlkQ2hhbmdlID0gZmFsc2UsIGRhdGFDaGFuZ2UgPSBmYWxzZSwgbmV3T3B0aW9ucyA9IHt9O1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIGNoYW5nZXMpIHtcbiAgICAgICAgICAgIGlmICghY2hhbmdlc1twcm9wXS5maXJzdENoYW5nZSAmJiBwcm9wICE9PSAnb3B0aW9ucycgJiYgcHJvcCAhPT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNsb25lRGljdGlvbmFyeSAmJiB0aGlzLmNsb25lRGljdGlvbmFyeVtwcm9wXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1ha2VDbG9uZShwcm9wLCBjaGFuZ2VzW3Byb3BdLmN1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLnNldHRpbmdzW3Byb3BdID0gY2hhbmdlc1twcm9wXS5jdXJyZW50VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3AgPT0gJ2ludmFsaWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbnZhbGlkQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcCA9PSAnZGF0YScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFDaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNsb25lQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld09wdGlvbnNbcHJvcF0gPSBjaGFuZ2VzW3Byb3BdLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghY2hhbmdlc1twcm9wXS5maXJzdENoYW5nZSAmJiBwcm9wICE9PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgbmV3T3B0aW9ucyA9IGV4dGVuZCQxKGNoYW5nZXNbcHJvcF0uY3VycmVudFZhbHVlLCBuZXdPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBvcHRpb25DaGFuZ2UgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY2hhbmdlc1twcm9wXS5maXJzdENoYW5nZSkge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wICE9PSAnb3B0aW9ucycgJiYgcHJvcCAhPT0gJ3ZhbHVlJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlubGluZU9wdGlvbnNPYmpbcHJvcF0gPSBjaGFuZ2VzW3Byb3BdLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNsb25lQ2hhbmdlKSB7XG4gICAgICAgICAgICBleHRlbmQkMShuZXdPcHRpb25zLCB0aGlzLmNsb25lRGljdGlvbmFyeSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbkNoYW5nZSB8fCBjbG9uZUNoYW5nZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVPcHRpb25zKG5ld09wdGlvbnMsIG9wdGlvbkNoYW5nZSwgaW52YWxpZENoYW5nZSwgZGF0YUNoYW5nZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ic2NCYXNlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbeyBzZWxlY3RvcjogJ1ttYnNjLWJdJyB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NCYXNlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYsIH0sXG4gICAgICAgIHsgdHlwZTogTmdab25lLCB9LFxuICAgIF07IH07XG4gICAgTWJzY0Jhc2UucHJvcERlY29yYXRvcnMgPSB7XG4gICAgICAgICdvcHRpb25zJzogW3sgdHlwZTogSW5wdXQkMSwgYXJnczogWydtYnNjLW9wdGlvbnMnLF0gfSxdLFxuICAgICAgICAnY3NzQ2xhc3MnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3RoZW1lJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICd0aGVtZVZhcmlhbnQnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2xhbmcnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3J0bCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAncmVzcG9uc2l2ZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnb25Jbml0JzogW3sgdHlwZTogT3V0cHV0IH0sXSxcbiAgICAgICAgJ29uRGVzdHJveSc6IFt7IHR5cGU6IE91dHB1dCB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gTWJzY0Jhc2U7XG59KCkpO1xudmFyIE1ic2NWYWx1ZUJhc2UgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYnNjVmFsdWVCYXNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1ic2NWYWx1ZUJhc2UoaW5pdGlhbEVsZW0sIHpvbmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaW5pdGlhbEVsZW0sIHpvbmUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmluaXRpYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNYnNjVmFsdWVCYXNlLnByb3RvdHlwZS5zZXROZXdWYWx1ZSA9IGZ1bmN0aW9uICh2KSB7IH07XG4gICAgTWJzY1ZhbHVlQmFzZS5wcm90b3R5cGUuc2V0TmV3VmFsdWVQcm94eSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZSkge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsVmFsdWUgPSB2O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0TmV3VmFsdWUodik7XG4gICAgfTtcbiAgICBNYnNjVmFsdWVCYXNlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbeyBzZWxlY3RvcjogJ1ttYnNjLXYtYl0nIH0sXSB9LFxuICAgIF07XG4gICAgTWJzY1ZhbHVlQmFzZS5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiBFbGVtZW50UmVmLCB9LFxuICAgICAgICB7IHR5cGU6IE5nWm9uZSwgfSxcbiAgICBdOyB9O1xuICAgIHJldHVybiBNYnNjVmFsdWVCYXNlO1xufShNYnNjQmFzZSkpO1xudmFyIE1ic2NDbG9uZUJhc2UgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYnNjQ2xvbmVCYXNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1ic2NDbG9uZUJhc2UoaW5pdEVsZW0sIHpvbmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaW5pdEVsZW0sIHpvbmUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNsb25lRGljdGlvbmFyeSA9IHt9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1ic2NDbG9uZUJhc2UucHJvdG90eXBlLm1ha2VDbG9uZSA9IGZ1bmN0aW9uIChzZXR0aW5nLCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvbmVEaWN0aW9uYXJ5W3NldHRpbmddID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9uZURpY3Rpb25hcnlbc2V0dGluZ10ucHVzaCh2YWx1ZVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsb25lRGljdGlvbmFyeVtzZXR0aW5nXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNYnNjQ2xvbmVCYXNlLnByb3RvdHlwZS5uZ0RvQ2hlY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2UsIGRhdGEgPSBmYWxzZSwgaW52YWxpZCA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jbG9uZURpY3Rpb25hcnkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzW2tleV0gIT09IHVuZGVmaW5lZCAmJiAhZGVlcEVxdWFsc0FycmF5KHRoaXNba2V5XSwgdGhpcy5jbG9uZURpY3Rpb25hcnlba2V5XSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1ha2VDbG9uZShrZXksIHRoaXNba2V5XSk7XG4gICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5zZXR0aW5nc1trZXldID0gdGhpc1trZXldO1xuICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChrZXkgPT0gJ2ludmFsaWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGludmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoa2V5ID09ICdkYXRhJykge1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZWQgJiYgdGhpcy5pbnN0YW5jZSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVPcHRpb25zKHRoaXMuY2xvbmVEaWN0aW9uYXJ5LCBmYWxzZSwgaW52YWxpZCwgZGF0YSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ic2NDbG9uZUJhc2UucHJvdG90eXBlLm5nT25Jbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jbG9uZURpY3Rpb25hcnkpIHtcbiAgICAgICAgICAgIHRoaXMubWFrZUNsb25lKGtleSwgdGhpc1trZXldKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY0Nsb25lQmFzZS5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IERpcmVjdGl2ZSwgYXJnczogW3sgc2VsZWN0b3I6ICdbbWJzYy1jLWJdJyB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NDbG9uZUJhc2UuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBOZ1pvbmUsIH0sXG4gICAgXTsgfTtcbiAgICByZXR1cm4gTWJzY0Nsb25lQmFzZTtcbn0oTWJzY1ZhbHVlQmFzZSkpO1xudmFyIE1ic2NDb250cm9sQmFzZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1ic2NDb250cm9sQmFzZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYnNjQ29udHJvbEJhc2UoaW5pdGlhbEVsZW1lbnQsIHpvbmUsIGNvbnRyb2wsIF9pbnB1dFNlcnZpY2UsIF92aWV3KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGluaXRpYWxFbGVtZW50LCB6b25lKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jb250cm9sID0gY29udHJvbDtcbiAgICAgICAgX3RoaXMuX2lucHV0U2VydmljZSA9IF9pbnB1dFNlcnZpY2U7XG4gICAgICAgIF90aGlzLl92aWV3ID0gX3ZpZXc7XG4gICAgICAgIF90aGlzLl9uZWVkc1RpbWVvdXQgPSB0cnVlO1xuICAgICAgICBfdGhpcy5vbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgX3RoaXMub25Ub3VjaCA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgX3RoaXMub25DaGFuZ2VFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICBfdGhpcy5vbGRBY2Nlc3NvciA9IG51bGw7XG4gICAgICAgIF90aGlzLm92ZXJ3cml0ZUFjY2Vzc29yKCk7XG4gICAgICAgIGlmIChfaW5wdXRTZXJ2aWNlKSB7XG4gICAgICAgICAgICBfaW5wdXRTZXJ2aWNlLmlzQ29udHJvbFNldCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY0NvbnRyb2xCYXNlLnByb3RvdHlwZSwgXCJvcHRpb25FeHRlbnNpb25zXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGV4dGVybmFsT25DbG9zZSA9IHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMub25DbG9zZTtcbiAgICAgICAgICAgIHZhciBleHRlcm5hbE9uRmlsbCA9IHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMub25GaWxsO1xuICAgICAgICAgICAgdmFyIG9uQ2xvc2VFbWl0dGVyID0gdGhpcy5vbkNsb3NlO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvbkZpbGw6IGZ1bmN0aW9uIChldmVudCwgaW5zdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMub2xkQWNjZXNzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLm9sZEFjY2Vzc29yLndyaXRlVmFsdWUoZXZlbnQudmFsdWVUZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpb25JbnB1dCA9IF90aGlzLmdldElvbklucHV0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW9uSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpb25JbnB1dC52YWx1ZSA9IGV2ZW50LnZhbHVlVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoZXh0ZXJuYWxPbkZpbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVybmFsT25GaWxsKGV2ZW50LCBpbnN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb25DbG9zZTogZnVuY3Rpb24gKGV2ZW50LCBpbnN0KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLm9uVG91Y2goKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4dGVybmFsT25DbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZXJuYWxPbkNsb3NlKGV2ZW50LCBpbnN0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob25DbG9zZUVtaXR0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50Lmluc3QgPSBpbnN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgb25DbG9zZUVtaXR0ZXIuZW1pdChldmVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY0NvbnRyb2xCYXNlLnByb3RvdHlwZSwgXCJlbmFibGVNYW51YWxFZGl0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbnNmID0gdGhpcy5zaG93T25Gb2N1cyA9PT0gZmFsc2UgfHwgdGhpcy5vcHRpb25zLnNob3dPbkZvY3VzID09PSBmYWxzZSwgbnN0ID0gdGhpcy5zaG93T25UYXAgPT09IGZhbHNlIHx8IHRoaXMub3B0aW9ucy5zaG93T25UYXAgPT09IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIG5zZiAmJiBuc3Q7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1ic2NDb250cm9sQmFzZS5wcm90b3R5cGUuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICAkJDEoZWxlbWVudCB8fCB0aGlzLmVsZW1lbnQpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGF0LnpvbmUucnVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxtVmFsdWUgPSB0aGF0LmVsZW1lbnQudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGluc3RWYWx1ZSA9IHRoYXQuaW5zdGFuY2UuX3ZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChlbG1WYWx1ZSAhPT0gaW5zdFZhbHVlICYmIChpbnN0VmFsdWUgIT09IG51bGwgfHwgZWxtVmFsdWUgIT09ICcnKSAmJiB0aGF0LmVuYWJsZU1hbnVhbEVkaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5pbnN0YW5jZS5zZXRWYWwoZWxtVmFsdWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhhdC5pbnN0YW5jZS5nZXRWYWwoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoYXQuY29udHJvbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZUVxdWFscyh2YWx1ZSwgdGhhdC5jb250cm9sLm1vZGVsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQub25DaGFuZ2UodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuY29udHJvbC5jb250cm9sLnBhdGNoVmFsdWUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5vbkNoYW5nZUVtaXR0ZXIuZW1pdCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlRXF1YWxzKHYxLCB2Mikge1xuICAgICAgICAgICAgaWYgKHYxID09PSB2Mikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHYxIGluc3RhbmNlb2YgRGF0ZSAmJiB2MiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKCt2MSkgPT09ICgrdjIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNYnNjQ29udHJvbEJhc2UucHJvdG90eXBlLm92ZXJ3cml0ZUFjY2Vzc29yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jb250cm9sKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250cm9sLnZhbHVlQWNjZXNzb3IgIT09IHRoaXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9sZEFjY2Vzc29yID0gdGhpcy5jb250cm9sLnZhbHVlQWNjZXNzb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2wudmFsdWVBY2Nlc3NvciA9IHRoaXM7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ic2NDb250cm9sQmFzZS5wcm90b3R5cGUubmdBZnRlclZpZXdJbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5nQWZ0ZXJWaWV3SW5pdC5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZSgpO1xuICAgICAgICB0aGlzLm92ZXJ3cml0ZUFjY2Vzc29yKCk7XG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2wgJiYgdGhpcy5jb250cm9sLl9zZXRVcENvbnRyb2wpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbC5fc2V0VXBDb250cm9sKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ic2NDb250cm9sQmFzZS5wcm90b3R5cGUucmVnaXN0ZXJPbkNoYW5nZSA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gICAgfTtcbiAgICBNYnNjQ29udHJvbEJhc2UucHJvdG90eXBlLnJlZ2lzdGVyT25Ub3VjaGVkID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHRoaXMub25Ub3VjaCA9IGZuO1xuICAgIH07XG4gICAgTWJzY0NvbnRyb2xCYXNlLnByb3RvdHlwZS5zZXREaXNhYmxlZFN0YXRlID0gZnVuY3Rpb24gKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gICAgICAgIGlmICh0aGlzLm9sZEFjY2Vzc29yICYmIHRoaXMub2xkQWNjZXNzb3Iuc2V0RGlzYWJsZWRTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5vbGRBY2Nlc3Nvci5zZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlICYmIHRoaXMuaW5zdGFuY2UuZGlzYWJsZSAmJiB0aGlzLmluc3RhbmNlLmVuYWJsZSkge1xuICAgICAgICAgICAgaWYgKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLmRpc2FibGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UuZW5hYmxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ic2NDb250cm9sQmFzZS5wcm90b3R5cGUud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLl9uZWVkc1RpbWVvdXQpIHtcbiAgICAgICAgICAgIHRoaXMucGVuZGluZ1ZhbHVlID0gdjtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnBlbmRpbmdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZXROZXdWYWx1ZVByb3h5KHYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldE5ld1ZhbHVlUHJveHkodik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ic2NDb250cm9sQmFzZS5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IERpcmVjdGl2ZSwgYXJnczogW3sgc2VsZWN0b3I6ICdbbWJzYy1jYy1iXScgfSxdIH0sXG4gICAgXTtcbiAgICBNYnNjQ29udHJvbEJhc2UuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBOZ1pvbmUsIH0sXG4gICAgICAgIHsgdHlwZTogTmdDb250cm9sLCB9LFxuICAgICAgICB7IHR5cGU6IE1ic2NJbnB1dFNlcnZpY2UsIH0sXG4gICAgICAgIHsgdHlwZTogVmlld0NvbnRhaW5lclJlZiwgfSxcbiAgICBdOyB9O1xuICAgIE1ic2NDb250cm9sQmFzZS5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgJ2xhYmVsU3R5bGUnOiBbeyB0eXBlOiBJbnB1dCQxLCBhcmdzOiBbJ2xhYmVsLXN0eWxlJyxdIH0sXSxcbiAgICAgICAgJ2lucHV0U3R5bGUnOiBbeyB0eXBlOiBJbnB1dCQxLCBhcmdzOiBbJ2lucHV0LXN0eWxlJyxdIH0sXSxcbiAgICAgICAgJ3Nob3dPbkZvY3VzJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdzaG93T25UYXAnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2Rpc2FibGVkJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gTWJzY0NvbnRyb2xCYXNlO1xufShNYnNjQ2xvbmVCYXNlKSk7XG52YXIgTWJzY0ZyYW1lQmFzZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1ic2NGcmFtZUJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWJzY0ZyYW1lQmFzZShpbml0aWFsRWxlbSwgem9uZSwgY29udHJvbCwgX2lucHV0U2VydmljZSwgdmlldykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBpbml0aWFsRWxlbSwgem9uZSwgY29udHJvbCwgX2lucHV0U2VydmljZSwgdmlldykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub25CZWZvcmVDbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgX3RoaXMub25CZWZvcmVTaG93ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICBfdGhpcy5vbkNhbmNlbCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgX3RoaXMub25DbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgX3RoaXMub25GaWxsID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICBfdGhpcy5vbk1hcmt1cFJlYWR5ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICBfdGhpcy5vblBvc2l0aW9uID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICBfdGhpcy5vblNob3cgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1ic2NGcmFtZUJhc2UucHJvdG90eXBlLCBcImlubGluZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmRpc3BsYXkgfHwgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuZGlzcGxheSkpID09PSAnaW5saW5lJztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTWJzY0ZyYW1lQmFzZS5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY2xvbmVEaWN0aW9uYXJ5LmludmFsaWQgPSBbXTtcbiAgICAgICAgdGhpcy5jbG9uZURpY3Rpb25hcnkudmFsaWQgPSBbXTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZ09uSW5pdC5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgTWJzY0ZyYW1lQmFzZS5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IERpcmVjdGl2ZSwgYXJnczogW3sgc2VsZWN0b3I6ICdbbWJzYy1mci1iXScgfSxdIH0sXG4gICAgXTtcbiAgICBNYnNjRnJhbWVCYXNlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYsIH0sXG4gICAgICAgIHsgdHlwZTogTmdab25lLCB9LFxuICAgICAgICB7IHR5cGU6IE5nQ29udHJvbCwgfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjSW5wdXRTZXJ2aWNlLCB9LFxuICAgICAgICB7IHR5cGU6IFZpZXdDb250YWluZXJSZWYsIH0sXG4gICAgXTsgfTtcbiAgICBNYnNjRnJhbWVCYXNlLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAnb3B0aW9ucyc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnZHJvcGRvd24nOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2FuY2hvcic6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnYW5pbWF0ZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnYnV0dG9ucyc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnY2xvc2VPbk92ZXJsYXlUYXAnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2NvbnRleHQnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2Rpc3BsYXknOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3Nob3dJbnB1dCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnZm9jdXNPbkNsb3NlJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdmb2N1c1RyYXAnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2hlYWRlclRleHQnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3Njcm9sbExvY2snOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3RvdWNoVWknOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ29uQmVmb3JlQ2xvc2UnOiBbeyB0eXBlOiBPdXRwdXQgfSxdLFxuICAgICAgICAnb25CZWZvcmVTaG93JzogW3sgdHlwZTogT3V0cHV0IH0sXSxcbiAgICAgICAgJ29uQ2FuY2VsJzogW3sgdHlwZTogT3V0cHV0IH0sXSxcbiAgICAgICAgJ29uQ2xvc2UnOiBbeyB0eXBlOiBPdXRwdXQgfSxdLFxuICAgICAgICAnb25GaWxsJzogW3sgdHlwZTogT3V0cHV0IH0sXSxcbiAgICAgICAgJ29uTWFya3VwUmVhZHknOiBbeyB0eXBlOiBPdXRwdXQgfSxdLFxuICAgICAgICAnb25Qb3NpdGlvbic6IFt7IHR5cGU6IE91dHB1dCB9LF0sXG4gICAgICAgICdvblNob3cnOiBbeyB0eXBlOiBPdXRwdXQgfSxdLFxuICAgIH07XG4gICAgcmV0dXJuIE1ic2NGcmFtZUJhc2U7XG59KE1ic2NDb250cm9sQmFzZSkpO1xudmFyIE1ic2NTY3JvbGxlckJhc2UgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYnNjU2Nyb2xsZXJCYXNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1ic2NTY3JvbGxlckJhc2UoaW5pdGlhbEVsZW1lbnQsIHpvbmUsIGNvbnRyb2wsIF9pbnB1dFNlcnZpY2UsIHZpZXcpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaW5pdGlhbEVsZW1lbnQsIHpvbmUsIGNvbnRyb2wsIF9pbnB1dFNlcnZpY2UsIHZpZXcpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9uV2hlZWxDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIF90aGlzLm9uU2V0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICBfdGhpcy5vbkl0ZW1UYXAgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIF90aGlzLm9uQ2xlYXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTWJzY1Njcm9sbGVyQmFzZS5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IERpcmVjdGl2ZSwgYXJnczogW3sgc2VsZWN0b3I6ICdbbWJzYy1zLWJdJyB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NTY3JvbGxlckJhc2UuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBOZ1pvbmUsIH0sXG4gICAgICAgIHsgdHlwZTogTmdDb250cm9sLCB9LFxuICAgICAgICB7IHR5cGU6IE1ic2NJbnB1dFNlcnZpY2UsIH0sXG4gICAgICAgIHsgdHlwZTogVmlld0NvbnRhaW5lclJlZiwgfSxcbiAgICBdOyB9O1xuICAgIE1ic2NTY3JvbGxlckJhc2UucHJvcERlY29yYXRvcnMgPSB7XG4gICAgICAgICdjaXJjdWxhcic6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnaGVpZ2h0JzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdsYXlvdXQnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ21heFdpZHRoJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdtaW5XaWR0aCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnbXVsdGlsaW5lJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdyZWFkb25seSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAncm93cyc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnc2hvd0xhYmVsJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdzaG93U2Nyb2xsQXJyb3dzJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICd3aGVlbHMnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3dpZHRoJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICd2YWxpZGF0ZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnY2FuY2VsVGV4dCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnY2xlYXJUZXh0JzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdzZWxlY3RlZFRleHQnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3NldFRleHQnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2Zvcm1hdFZhbHVlJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdwYXJzZVZhbHVlJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdvbldoZWVsQ2hhbmdlJzogW3sgdHlwZTogT3V0cHV0LCBhcmdzOiBbJ29uQ2hhbmdlJyxdIH0sXSxcbiAgICAgICAgJ29uU2V0JzogW3sgdHlwZTogT3V0cHV0IH0sXSxcbiAgICAgICAgJ29uSXRlbVRhcCc6IFt7IHR5cGU6IE91dHB1dCB9LF0sXG4gICAgICAgICdvbkNsZWFyJzogW3sgdHlwZTogT3V0cHV0IH0sXSxcbiAgICB9O1xuICAgIHJldHVybiBNYnNjU2Nyb2xsZXJCYXNlO1xufShNYnNjRnJhbWVCYXNlKSk7XG52YXIgTWJzY0Jhc2VNb2R1bGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1ic2NCYXNlTW9kdWxlKCkge1xuICAgIH1cbiAgICBNYnNjQmFzZU1vZHVsZS5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IE5nTW9kdWxlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbTWJzY0Jhc2UsIE1ic2NWYWx1ZUJhc2UsIE1ic2NDbG9uZUJhc2UsIE1ic2NDb250cm9sQmFzZV0sXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICBNYnNjQmFzZU1vZHVsZS5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9O1xuICAgIHJldHVybiBNYnNjQmFzZU1vZHVsZTtcbn0oKSk7XG5mdW5jdGlvbiBkZWVwRXF1YWxzQXJyYXkoYTEsIGEyKSB7XG4gICAgaWYgKGExID09PSBhMikge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSBpZiAoIWExIHx8ICFhMiB8fCBhMS5sZW5ndGggIT09IGEyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGExLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYTFbaV0gIT09IGEyW2ldKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVtcHR5T3JUcnVlKHZhbCkge1xuICAgIHJldHVybiAodHlwZW9mICh2YWwpID09PSAnc3RyaW5nJyAmJiAodmFsID09PSAndHJ1ZScgfHwgdmFsID09PSAnJykpIHx8ICEhdmFsO1xufVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbnZhciB3cmFwQ2xhc3MgPSAnbWJzYy1pbnB1dC13cmFwJztcbnZhciBldmVudHMgPSBbJ3RvdWNoZW5kJywgJ3RvdWNoY2FuY2VsJywgJ21vdXNlZG93bicsICdtb3VzZW1vdmUnLCAnbW91c2V1cCcsICdtb3VzZWxlYXZlJ107XG52YXIgZGVmYXVsdHMgPSB7XG4gIHRhcDogaGFzR2hvc3RDbGlja1xufTtcbnZhciAkYWN0aXZlO1xuXG5mdW5jdGlvbiBhZGRJY29uKCRjb250cm9sLCBpYykge1xuICB2YXIgaWNvbnMgPSB7fSxcbiAgICAgIGNvbnRyb2wgPSAkY29udHJvbFswXSxcbiAgICAgICRwYXJlbnQgPSAkY29udHJvbC5wYXJlbnQoKSxcbiAgICAgIGVycm9yTXNnID0gJHBhcmVudC5maW5kKCcubWJzYy1lcnItbXNnJyksXG4gICAgICBhbGlnbiA9ICRjb250cm9sLmF0dHIoJ2RhdGEtaWNvbi1hbGlnbicpIHx8ICdsZWZ0JyxcbiAgICAgIGljb24gPSAkY29udHJvbC5hdHRyKCdkYXRhLWljb24nKTtcblxuICBpZiAoJHBhcmVudC5oYXNDbGFzcyh3cmFwQ2xhc3MpKSB7XG4gICAgJHBhcmVudCA9ICRwYXJlbnQucGFyZW50KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gV3JhcCBpbnB1dFxuICAgICQkMSgnPHNwYW4gY2xhc3M9XCInICsgd3JhcENsYXNzICsgJ1wiPjwvc3Bhbj4nKS5pbnNlcnRBZnRlcigkY29udHJvbCkuYXBwZW5kKCRjb250cm9sKTtcbiAgfVxuXG4gIGlmIChlcnJvck1zZykge1xuICAgICRwYXJlbnQuZmluZCgnLicgKyB3cmFwQ2xhc3MpLmFwcGVuZChlcnJvck1zZyk7XG4gIH1cblxuICBpZiAoaWNvbikge1xuICAgIGlmIChpY29uLmluZGV4T2YoJ3snKSAhPT0gLTEpIHtcbiAgICAgIGljb25zID0gSlNPTi5wYXJzZShpY29uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWNvbnNbYWxpZ25dID0gaWNvbjtcbiAgICB9XG4gIH1cblxuICBpZiAoY29udHJvbC50eXBlID09ICdmaWxlJykge1xuICAgIC8vIFNldCBpY29uXG4gICAgaWNvbnMucmlnaHQgPSAkY29udHJvbC5hdHRyKCdkYXRhLWljb24tdXBsb2FkJykgfHwgJ3VwbG9hZCc7XG4gIH1cblxuICBpZiAoaWNvbiB8fCBpYykge1xuICAgIGV4dGVuZCQxKGljb25zLCBpYyk7XG4gICAgJHBhcmVudC5hZGRDbGFzcygoaWNvbnMucmlnaHQgPyAnbWJzYy1pYy1yaWdodCAnIDogJycpICsgKGljb25zLmxlZnQgPyAnIG1ic2MtaWMtbGVmdCcgOiAnJykpLmZpbmQoJy4nICsgd3JhcENsYXNzKS5hcHBlbmQoJzxzcGFuIGNsYXNzPVwibWJzYy1pbnB1dC1maWxsXCI+PC9zcGFuPicpLmFwcGVuZChpY29ucy5sZWZ0ID8gJzxzcGFuIGNsYXNzPVwibWJzYy1pbnB1dC1pYyBtYnNjLWxlZnQtaWMgbWJzYy1pYyBtYnNjLWljLScgKyBpY29ucy5sZWZ0ICsgJ1wiPjwvc3Bhbj4nIDogJycpLmFwcGVuZChpY29ucy5yaWdodCA/ICc8c3BhbiBjbGFzcz1cIm1ic2MtaW5wdXQtaWMgbWJzYy1yaWdodC1pYyBtYnNjLWljIG1ic2MtaWMtJyArIGljb25zLnJpZ2h0ICsgJ1wiPjwvc3Bhbj4nIDogJycpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZEljb25Ub2dnbGUodGhhdCwgJHBhcmVudCwgJGNvbnRyb2wpIHtcbiAgdmFyIGljb25zID0ge30sXG4gICAgICBjb250cm9sID0gJGNvbnRyb2xbMF0sXG4gICAgICB0b2dnbGUgPSAkY29udHJvbC5hdHRyKCdkYXRhLXBhc3N3b3JkLXRvZ2dsZScpLFxuICAgICAgaWNvblNob3cgPSAkY29udHJvbC5hdHRyKCdkYXRhLWljb24tc2hvdycpIHx8ICdleWUnLFxuICAgICAgaWNvbkhpZGUgPSAkY29udHJvbC5hdHRyKCdkYXRhLWljb24taGlkZScpIHx8ICdleWUtYmxvY2tlZCc7XG5cbiAgaWYgKHRvZ2dsZSkge1xuICAgIGljb25zLnJpZ2h0ID0gY29udHJvbC50eXBlID09ICdwYXNzd29yZCcgPyBpY29uU2hvdyA6IGljb25IaWRlO1xuICB9XG5cbiAgYWRkSWNvbigkY29udHJvbCwgaWNvbnMpO1xuXG4gIGlmICh0b2dnbGUpIHtcbiAgICB0YXAodGhhdCwgJHBhcmVudC5maW5kKCcubWJzYy1yaWdodC1pYycpLmFkZENsYXNzKCdtYnNjLWlucHV0LXRvZ2dsZScpLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoY29udHJvbC50eXBlID09IFwidGV4dFwiKSB7XG4gICAgICAgIGNvbnRyb2wudHlwZSA9IFwicGFzc3dvcmRcIjtcbiAgICAgICAgJCQxKHRoaXMpLmFkZENsYXNzKCdtYnNjLWljLScgKyBpY29uU2hvdykucmVtb3ZlQ2xhc3MoJ21ic2MtaWMtJyArIGljb25IaWRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnRyb2wudHlwZSA9IFwidGV4dFwiO1xuICAgICAgICAkJDEodGhpcykucmVtb3ZlQ2xhc3MoJ21ic2MtaWMtJyArIGljb25TaG93KS5hZGRDbGFzcygnbWJzYy1pYy0nICsgaWNvbkhpZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdyYXBMYWJlbCgkcGFyZW50LCB0eXBlLCBpbnB1dFN0eWxlLCBsYWJlbFN0eWxlLCBlbG0pIHtcbiAgLy8gV3JhcCBub24tZW1wdHkgdGV4dCBub2RlcyBpbiBzcGFuIHdpdGggbWJzYy1sYWJlbCBjbGFzc1xuICBpZiAodHlwZSA9PSAnc2VnbWVudGVkJykge1xuICAgICRwYXJlbnQuY2xvc2VzdCgnLm1ic2Mtc2VnbWVudGVkJykuYWRkQ2xhc3MoaW5wdXRTdHlsZSA9PSAnYm94JyA/ICdtYnNjLWlucHV0LWJveCcgOiAnJykuYWRkQ2xhc3MoaW5wdXRTdHlsZSA9PSAnb3V0bGluZScgPyAnbWJzYy1pbnB1dC1vdXRsaW5lJyA6ICcnKTtcbiAgfSBlbHNlIGlmICh0eXBlICE9ICdidXR0b24nICYmIHR5cGUgIT0gJ3N1Ym1pdCcpIHtcbiAgICAkcGFyZW50LmFkZENsYXNzKCdtYnNjLWNvbnRyb2wtdycpLmFkZENsYXNzKGlucHV0U3R5bGUgPT0gJ2JveCcgPyAnbWJzYy1pbnB1dC1ib3gnIDogJycpLmFkZENsYXNzKGlucHV0U3R5bGUgPT0gJ291dGxpbmUnID8gJ21ic2MtaW5wdXQtb3V0bGluZScgOiAnJykuYWRkQ2xhc3MobGFiZWxTdHlsZSA9PSAnaW5saW5lJyA/ICdtYnNjLWxhYmVsLWlubGluZScgOiAnJykuYWRkQ2xhc3MobGFiZWxTdHlsZSA9PSAnc3RhY2tlZCcgPyAnbWJzYy1sYWJlbC1zdGFja2VkJyA6ICcnKS5hZGRDbGFzcyhsYWJlbFN0eWxlID09ICdmbG9hdGluZycgPyAnbWJzYy1sYWJlbC1mbG9hdGluZycgOiAnJykuYWRkQ2xhc3MobGFiZWxTdHlsZSA9PSAnZmxvYXRpbmcnICYmIGVsbS52YWx1ZSA/ICdtYnNjLWxhYmVsLWZsb2F0aW5nLWFjdGl2ZScgOiAnJykuZmluZCgnbGFiZWwnKS5hZGRDbGFzcygnbWJzYy1sYWJlbCcpLmVhY2goZnVuY3Rpb24gKGksIHYpIHtcbiAgICAgICQkMSh2KS5hdHRyKCd0aXRsZScsICQkMSh2KS50ZXh0KCkpO1xuICAgIH0pO1xuICAgICRwYXJlbnQuY29udGVudHMoKS5maWx0ZXIoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZVR5cGUgPT0gMyAmJiB0aGlzLm5vZGVWYWx1ZSAmJiAvXFxTLy50ZXN0KHRoaXMubm9kZVZhbHVlKTtcbiAgICB9KS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICQkMSgnPHNwYW4gY2xhc3M9XCJtYnNjLWxhYmVsXCIgdGl0bGU9XCInICsgdGhpcy50ZXh0Q29udGVudC50cmltKCkgKyAnXCI+PC9zcGFuPicpLmluc2VydEFmdGVyKHRoaXMpLmFwcGVuZCh0aGlzKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRSaXBwbGUodGhlbWUpIHtcbiAgdmFyIHJpcHBsZSA9IG1vYmlzY3JvbGwudGhlbWVzLmZvcm1bdGhlbWVdO1xuICByZXR1cm4gcmlwcGxlICYmIHJpcHBsZS5hZGRSaXBwbGUgPyByaXBwbGUgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRBdHRyKCRlbG0sIGF0dHIsIGRlZikge1xuICB2YXIgdiA9ICRlbG0uYXR0cihhdHRyKTtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSAnJyA/IGRlZiA6IHY7XG59XG5cbmZ1bmN0aW9uIGdldENzc0NsYXNzKHMpIHtcbiAgdmFyIHRoZW1lID0gZ2V0VGhlbWVOYW1lKHMpO1xuICB2YXIgYmFzZVRoZW1lID0gbW9iaXNjcm9sbC50aGVtZXMuZm9ybVt0aGVtZV0uYmFzZVRoZW1lO1xuICByZXR1cm4gJ21ic2MtJyArIHRoZW1lICsgKGJhc2VUaGVtZSA/ICcgbWJzYy0nICsgYmFzZVRoZW1lIDogJycpICsgKHMucnRsID8gJyBtYnNjLXJ0bCcgOiAnIG1ic2MtbHRyJyk7XG59XG5cbnZhciBGb3JtQ29udHJvbCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEZvcm1Db250cm9sKGVsbSwgc2V0dGluZ3MpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHMgPSBleHRlbmQkMSh7fSwgZGVmYXVsdHMsIG1vYmlzY3JvbGwuc2V0dGluZ3MsIHNldHRpbmdzKTtcbiAgICB2YXIgJGVsbSA9ICQkMShlbG0pO1xuICAgIHZhciAkcCA9ICRlbG0ucGFyZW50KCk7XG4gICAgdmFyICRwYXJlbnQgPSAkcC5oYXNDbGFzcygnbWJzYy1pbnB1dC13cmFwJykgPyAkcC5wYXJlbnQoKSA6ICRwOyAvLyBDaGVjayBmb3IgaW5saW5lIG1vYmlzY3JvbGwgY29tcG9uZW50c1xuXG4gICAgdmFyICRmcmFtZSA9ICRlbG0ubmV4dCgpLmhhc0NsYXNzKCdtYnNjLWZyJykgPyAkZWxtLm5leHQoKSA6IG51bGw7XG4gICAgdmFyIHR5cGUgPSBnZXRDb250cm9sVHlwZSgkZWxtKTtcbiAgICB2YXIgaW5wdXRTdHlsZSA9IGdldEF0dHIoJGVsbSwgJ2RhdGEtaW5wdXQtc3R5bGUnLCBzLmlucHV0U3R5bGUpO1xuICAgIHZhciBsYWJlbFN0eWxlID0gZ2V0QXR0cigkZWxtLCAnZGF0YS1sYWJlbC1zdHlsZScsIHMubGFiZWxTdHlsZSk7XG5cbiAgICBpZiAoZWxtLm1ic2NJbnN0KSB7XG4gICAgICBlbG0ubWJzY0luc3QuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIGlmICgkZnJhbWUpIHtcbiAgICAgICRmcmFtZS5pbnNlcnRBZnRlcigkcGFyZW50KTtcbiAgICB9XG5cbiAgICBzLnRoZW1lID0gZ2V0VGhlbWVOYW1lKHMpO1xuXG4gICAgaWYgKHMucnRsID09PSB1bmRlZmluZWQgJiYgcy5sYW5nICYmIG1vYmlzY3JvbGwuaTE4bltzLmxhbmddKSB7XG4gICAgICBzLnJ0bCA9IG1vYmlzY3JvbGwuaTE4bltzLmxhbmddLnJ0bDtcbiAgICB9XG5cbiAgICB3cmFwTGFiZWwoJHBhcmVudCwgdHlwZSwgaW5wdXRTdHlsZSwgbGFiZWxTdHlsZSwgZWxtKTtcbiAgICAkZWxtLmFkZENsYXNzKCdtYnNjLWNvbnRyb2wnKTsgLy8gQXR0YWNoIGV2ZW50c1xuXG4gICAgdGhpcy5faGFuZGxlID0gdGhpcy5faGFuZGxlLmJpbmQodGhpcyk7IC8vIFByZXZlbnQgMzAwbXMgY2xpY2sgbGF0ZW5jeVxuXG4gICAgZXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2KSB7XG4gICAgICAkZWxtLm9uKGV2LCBfdGhpcy5faGFuZGxlKTtcbiAgICB9KTsgLy8gVG91Y2ggZXZlbnRzIGFyZSBhZGRlZCBzZXBhcmF0ZWx5LCBuZWVkcyB0byBiZSBwYXNzaXZlIGxpc3RlbmVyXG5cbiAgICBsaXN0ZW4oZWxtLCAndG91Y2hzdGFydCcsIHRoaXMuX2hhbmRsZSwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGxpc3RlbihlbG0sICd0b3VjaG1vdmUnLCB0aGlzLl9oYW5kbGUsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICB0aGlzLnNldHRpbmdzID0gcztcbiAgICB0aGlzLl90eXBlID0gdHlwZTtcbiAgICB0aGlzLl9lbG0gPSBlbG07XG4gICAgdGhpcy5fJGVsbSA9ICRlbG07XG4gICAgdGhpcy5fJHBhcmVudCA9ICRwYXJlbnQ7XG4gICAgdGhpcy5fJGZyYW1lID0gJGZyYW1lO1xuICAgIHRoaXMuX3JpcHBsZSA9IGdldFJpcHBsZShzLnRoZW1lKTtcbiAgICB0aGlzLl9pc0Zsb2F0aW5nID0gbGFiZWxTdHlsZSA9PSAnZmxvYXRpbmcnIHx8ICRwYXJlbnQuaGFzQ2xhc3MoJ21ic2MtbGFiZWwtZmxvYXRpbmcnKTtcbiAgICB0aGlzLmNzc0NsYXNzID0gZ2V0Q3NzQ2xhc3Mocyk7XG4gICAgdGhpcy5nZXRDbGFzc0VsbSgpLmFkZENsYXNzKHRoaXMuY3NzQ2xhc3MpO1xuICAgIGVsbS5tYnNjSW5zdCA9IHRoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gRm9ybUNvbnRyb2wucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDbGFzc0VsbSA9IGZ1bmN0aW9uIGdldENsYXNzRWxtKCkge1xuICAgIHJldHVybiB0aGlzLl8kcGFyZW50O1xuICB9O1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciAkZWxtID0gdGhpcy5fJGVsbTtcbiAgICB2YXIgZWxtID0gdGhpcy5fZWxtO1xuICAgICRlbG0ucmVtb3ZlQ2xhc3MoJ21ic2MtY29udHJvbCcpO1xuICAgIHRoaXMuZ2V0Q2xhc3NFbG0oKS5yZW1vdmVDbGFzcyh0aGlzLmNzc0NsYXNzKTtcbiAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXYpIHtcbiAgICAgICRlbG0ub2ZmKGV2LCBfdGhpczIuX2hhbmRsZSk7XG4gICAgfSk7XG4gICAgdW5saXN0ZW4oZWxtLCAndG91Y2hzdGFydCcsIHRoaXMuX2hhbmRsZSwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIHVubGlzdGVuKGVsbSwgJ3RvdWNobW92ZScsIHRoaXMuX2hhbmRsZSwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGRlbGV0ZSBlbG0ubWJzY0luc3Q7XG4gIH07XG5cbiAgX3Byb3RvLm9wdGlvbiA9IGZ1bmN0aW9uIG9wdGlvbihzKSB7XG4gICAgZXh0ZW5kJDEodGhpcy5zZXR0aW5ncywgcyk7XG4gICAgdmFyIGNsYXNzRWxtID0gdGhpcy5nZXRDbGFzc0VsbSgpO1xuXG4gICAgaWYgKHRoaXMuY3NzQ2xhc3MpIHtcbiAgICAgIGNsYXNzRWxtLnJlbW92ZUNsYXNzKHRoaXMuY3NzQ2xhc3MpO1xuICAgIH1cblxuICAgIHRoaXMuY3NzQ2xhc3MgPSBnZXRDc3NDbGFzcyh0aGlzLnNldHRpbmdzKTtcbiAgICBjbGFzc0VsbS5hZGRDbGFzcyh0aGlzLmNzc0NsYXNzKTtcbiAgICB0aGlzLl9yaXBwbGUgPSBnZXRSaXBwbGUodGhpcy5zZXR0aW5ncy50aGVtZSk7XG4gIH07XG5cbiAgX3Byb3RvLl9oYW5kbGUgPSBmdW5jdGlvbiBfaGFuZGxlKGV2KSB7XG4gICAgc3dpdGNoIChldi50eXBlKSB7XG4gICAgICBjYXNlICd0b3VjaHN0YXJ0JzpcbiAgICAgIGNhc2UgJ21vdXNlZG93bic6XG4gICAgICAgIHRoaXMuX29uU3RhcnQoZXYpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICd0b3VjaG1vdmUnOlxuICAgICAgY2FzZSAnbW91c2Vtb3ZlJzpcbiAgICAgICAgdGhpcy5fb25Nb3ZlKGV2KTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAndG91Y2hlbmQnOlxuICAgICAgY2FzZSAndG91Y2hjYW5jZWwnOlxuICAgICAgY2FzZSAnbW91c2V1cCc6XG4gICAgICBjYXNlICdtb3VzZWxlYXZlJzpcbiAgICAgICAgdGhpcy5fb25FbmQoZXYpO1xuXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX2FkZFJpcHBsZSA9IGZ1bmN0aW9uIF9hZGRSaXBwbGUoZXYpIHtcbiAgICBpZiAodGhpcy5fcmlwcGxlICYmIHRoaXMuXyRyaXBwbGVFbG0pIHtcbiAgICAgIHRoaXMuX3JpcHBsZS5hZGRSaXBwbGUodGhpcy5fJHJpcHBsZUVsbSwgZXYpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX3JlbW92ZVJpcHBsZSA9IGZ1bmN0aW9uIF9yZW1vdmVSaXBwbGUoKSB7XG4gICAgaWYgKHRoaXMuX3JpcHBsZSAmJiB0aGlzLl8kcmlwcGxlRWxtKSB7XG4gICAgICB0aGlzLl9yaXBwbGUucmVtb3ZlUmlwcGxlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fb25TdGFydCA9IGZ1bmN0aW9uIF9vblN0YXJ0KGV2KSB7XG4gICAgdmFyIGVsbSA9IHRoaXMuX2VsbTtcblxuICAgIGlmICh0ZXN0VG91Y2goZXYsIGVsbSkpIHtcbiAgICAgIHRoaXMuX3N0YXJ0WCA9IGdldENvb3JkKGV2LCAnWCcpO1xuICAgICAgdGhpcy5fc3RhcnRZID0gZ2V0Q29vcmQoZXYsICdZJyk7XG5cbiAgICAgIGlmICgkYWN0aXZlKSB7XG4gICAgICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoJ21ic2MtYWN0aXZlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZWxtLmRpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuX2lzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgJGFjdGl2ZSA9IHRoaXMuXyRlbG07XG4gICAgICAgICRhY3RpdmUuYWRkQ2xhc3MoJ21ic2MtYWN0aXZlJyk7XG5cbiAgICAgICAgdGhpcy5fYWRkUmlwcGxlKGV2KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZXYudHlwZSA9PSAndG91Y2hzdGFydCcpIHtcbiAgICAgIHRoaXMuXyRlbG0uY2xvc2VzdCgnLm1ic2Mtbm8tdG91Y2gnKS5yZW1vdmVDbGFzcygnbWJzYy1uby10b3VjaCcpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX29uTW92ZSA9IGZ1bmN0aW9uIF9vbk1vdmUoZXYpIHtcbiAgICAvLyBJZiBtb3ZlbWVudCBpcyBtb3JlIHRoYW4gOXB4LCBkb24ndCBmaXJlIHRoZSBjbGljayBldmVudCBoYW5kbGVyXG4gICAgaWYgKHRoaXMuX2lzQWN0aXZlICYmIE1hdGguYWJzKGdldENvb3JkKGV2LCAnWCcpIC0gdGhpcy5fc3RhcnRYKSA+IDkgfHwgTWF0aC5hYnMoZ2V0Q29vcmQoZXYsICdZJykgLSB0aGlzLl9zdGFydFkpID4gOSkge1xuICAgICAgdGhpcy5fJGVsbS5yZW1vdmVDbGFzcygnbWJzYy1hY3RpdmUnKTtcblxuICAgICAgdGhpcy5fcmVtb3ZlUmlwcGxlKCk7XG5cbiAgICAgIHRoaXMuX2lzQWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fb25FbmQgPSBmdW5jdGlvbiBfb25FbmQoZXYpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBjb250cm9sID0gdGhpcy5fZWxtO1xuICAgIHZhciB0eXBlID0gdGhpcy5fdHlwZTtcblxuICAgIGlmICh0aGlzLl9pc0FjdGl2ZSAmJiB0aGlzLnNldHRpbmdzLnRhcCAmJiBldi50eXBlID09ICd0b3VjaGVuZCcgJiYgIWNvbnRyb2wucmVhZE9ubHkpIHtcbiAgICAgIGFjdGl2YXRlQ29udHJvbChjb250cm9sLCB0eXBlLCBldik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2lzQWN0aXZlKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLl8kZWxtLnJlbW92ZUNsYXNzKCdtYnNjLWFjdGl2ZScpO1xuXG4gICAgICAgIF90aGlzMy5fcmVtb3ZlUmlwcGxlKCk7XG4gICAgICB9LCAxMDApO1xuICAgIH1cblxuICAgIHRoaXMuX2lzQWN0aXZlID0gZmFsc2U7XG4gICAgJGFjdGl2ZSA9IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIEZvcm1Db250cm9sO1xufSgpO1xubW9iaXNjcm9sbC50aGVtZXMuZm9ybS5tb2Jpc2Nyb2xsID0ge307XG5cbnZhciBldmVudHMkMSA9IFsnZm9jdXMnLCAnY2hhbmdlJywgJ2JsdXInLCAnYW5pbWF0aW9uc3RhcnQnXTtcbnZhciBJbnB1dCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Zvcm1Db250cm9sKSB7XG4gIF9pbmhlcml0c0xvb3NlKElucHV0LCBfRm9ybUNvbnRyb2wpO1xuXG4gIGZ1bmN0aW9uIElucHV0KGVsbSwgc2V0dGluZ3MpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Gb3JtQ29udHJvbC5jYWxsKHRoaXMsIGVsbSwgc2V0dGluZ3MpIHx8IHRoaXM7XG4gICAgdmFyICRlbG0gPSBfdGhpcy5fJGVsbTtcbiAgICB2YXIgJHBhcmVudCA9IF90aGlzLl8kcGFyZW50O1xuICAgIHZhciAkZHVtbXkgPSAkcGFyZW50LmZpbmQoJy5tYnNjLXNlbGVjdC1pbnB1dCwgLm1ic2MtY29sb3ItaW5wdXQnKTtcbiAgICBhZGRJY29uVG9nZ2xlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAkcGFyZW50LCAkZWxtKTtcbiAgICBfdGhpcy5fY2hlY2tMYWJlbCA9IF90aGlzLl9jaGVja0xhYmVsLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIF90aGlzLl9tb3VzZURvd24gPSBfdGhpcy5fbW91c2VEb3duLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpO1xuICAgIF90aGlzLl9zZXRUZXh0ID0gX3RoaXMuX3NldFRleHQuYmluZChfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSk7XG5cbiAgICBpZiAoZWxtLnR5cGUgPT0gJ2ZpbGUnKSB7XG4gICAgICAvLyBDb3B5IGF0dHJpYnV0ZXMgYW5kIGNyZWF0ZSBkdW1teSBpbnB1dFxuICAgICAgdmFyICRleGlzdGluZyA9ICRwYXJlbnQuZmluZCgnLm1ic2MtZmlsZS1pbnB1dCcpO1xuICAgICAgX3RoaXMuXyRpbnB1dCA9ICRleGlzdGluZy5sZW5ndGggPyAkZXhpc3RpbmcgOiAkJDEoJzxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwiJyArICgkZWxtLmF0dHIoJ2NsYXNzJykgfHwgJycpICsgJyBtYnNjLWZpbGUtaW5wdXRcIiBwbGFjZWhvbGRlcj1cIicgKyAoJGVsbS5hdHRyKCdwbGFjZWhvbGRlcicpIHx8ICcnKSArICdcIi8+JykuaW5zZXJ0QWZ0ZXIoJGVsbSk7IC8vIENvcHkgdmFsdWUgb24gZmlsZSB1cGxvYWRcblxuICAgICAgJGVsbS5vbignY2hhbmdlJywgX3RoaXMuX3NldFRleHQpO1xuICAgIH1cblxuICAgICRwYXJlbnQuYWRkQ2xhc3MoJ21ic2MtaW5wdXQnKS5vbignbW91c2Vkb3duJywgX3RoaXMuX21vdXNlRG93bik7IC8vIEF0dGFjaCBldmVudHNcblxuICAgIGV2ZW50cyQxLmZvckVhY2goZnVuY3Rpb24gKGV2KSB7XG4gICAgICAkZWxtLm9uKGV2LCBfdGhpcy5fY2hlY2tMYWJlbCk7XG4gICAgfSk7IC8vIE1vdmUgdGhlIGR1bW15IGlucHV0IGFmdGVyIHRoZSBlbGVtZW50IGZvciBjb3JyZWN0IHN0eWxpbmdcblxuICAgIGlmICgkZHVtbXkubGVuZ3RoKSB7XG4gICAgICAkZWxtLmFmdGVyKCRkdW1teSk7XG5cbiAgICAgIGlmICgkZHVtbXkuaGFzQ2xhc3MoJ21ic2Mtc2VsZWN0LWlucHV0JykpIHtcbiAgICAgICAgX3RoaXMuX2RlbG0gPSAkZHVtbXlbMF07XG5cbiAgICAgICAgX3RoaXMucmVmcmVzaCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBJbnB1dC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLl9zZXRUZXh0ID0gZnVuY3Rpb24gX3NldFRleHQoZXYpIHtcbiAgICB2YXIgZmlsZXMgPSBldi50YXJnZXQuZmlsZXM7XG4gICAgdmFyIG5hbWVzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBuYW1lcy5wdXNoKGZpbGVzW2ldLm5hbWUpO1xuICAgIH1cblxuICAgIHRoaXMuXyRpbnB1dC52YWwobmFtZXMpO1xuICB9O1xuXG4gIF9wcm90by5fY2hlY2tMYWJlbCA9IGZ1bmN0aW9uIF9jaGVja0xhYmVsKGV2KSB7XG4gICAgaWYgKHRoaXMuX2lzRmxvYXRpbmcpIHtcbiAgICAgIC8vIEluIGNhc2Ugb2Ygc2VsZWN0IHdlIG5lZWQgdG8gY2hlY2sgdGhlIGR1bW15IGVsZW1lbnRcbiAgICAgIHZhciBlbG0gPSB0aGlzLl9kZWxtIHx8IHRoaXMuX2VsbTsgLy8gSW4gY2FzZSBvZiBhdXRvZmlsbCBpbiB3ZWJraXQgYnJvd3NlcnMgdGhlIGFuaW1hdGlvbnN0YXJ0IGV2ZW50IHdpbGwgZmlyZSBcbiAgICAgIC8vIGR1ZSB0byB0aGUgZW1wdHkgYW5pbWF0aW9uIGFkZGVkIGluIHRoZSBjc3MsXG4gICAgICAvLyBiZWNhdXNlIHRoZXJlJ3Mgbm8gb3RoZXIgZXZlbnQgaW4gY2FzZSBvZiB0aGUgaW5pdGlhbCBhdXRvZmlsbFxuXG4gICAgICBpZiAoZWxtLnZhbHVlIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsbSB8fCBldiAmJiAoZXYudHlwZSA9PSAnZm9jdXMnIHx8IGV2LnR5cGUgPT0gJ2FuaW1hdGlvbnN0YXJ0JyAmJiB0aGlzLl8kZWxtLmlzKCcqOi13ZWJraXQtYXV0b2ZpbGwnKSkpIHtcbiAgICAgICAgdGhpcy5fJHBhcmVudC5hZGRDbGFzcygnbWJzYy1sYWJlbC1mbG9hdGluZy1hY3RpdmUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuXyRwYXJlbnQucmVtb3ZlQ2xhc3MoJ21ic2MtbGFiZWwtZmxvYXRpbmctYWN0aXZlJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5fbW91c2VEb3duID0gZnVuY3Rpb24gX21vdXNlRG93bihldikge1xuICAgIC8vIFdpbGwgcHJldmVudCBmbG9hdGluZyBsYWJlbCBhbmltYXRpb24gd2hlbiBsb29zaW5nIGZvY3VzIG9ubHkgZm9yIGEgYnJpZWYgbW9tZW50XG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IHRoaXMuX2VsbSAmJiBldi50YXJnZXQgIT09IHRoaXMuX2VsbSkge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlZnJlc2ggPSBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgIHRoaXMuX2NoZWNrTGFiZWwoKTtcbiAgfTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBfRm9ybUNvbnRyb2wucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuXyRwYXJlbnQub2ZmKCdtb3VzZWRvd24nLCB0aGlzLl9tb3VzZURvd24pLnJlbW92ZUNsYXNzKCdtYnNjLWljLWxlZnQgbWJzYy1pYy1yaWdodCcpLmZpbmQoJy5tYnNjLWlucHV0LWljJykucmVtb3ZlKCk7XG5cbiAgICB0aGlzLl8kcGFyZW50LmZpbmQoJy5tYnNjLWlucHV0LWZpbGwnKS5yZW1vdmUoKTtcblxuICAgIGV2ZW50cyQxLmZvckVhY2goZnVuY3Rpb24gKGV2KSB7XG4gICAgICBfdGhpczIuXyRlbG0ub2ZmKGV2LCBfdGhpczIuX2NoZWNrTGFiZWwpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5fJGVsbS5vZmYoJ2NoYW5nZScsIHRoaXMuX3NldFRleHQpO1xuICB9O1xuXG4gIHJldHVybiBJbnB1dDtcbn0oRm9ybUNvbnRyb2wpOyAvLyBJbml0IG1ic2MtaW5wdXQgZWxlbWVudHMgb24gcGFnZSBsb2FkXG5cbmF1dG9Jbml0KCdbbWJzYy1pbnB1dF0nLCBJbnB1dCk7XG5cbnZhciBNYnNjRm9ybUJhc2UgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYnNjRm9ybUJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWJzY0Zvcm1CYXNlKGhvc3RFbGVtLCBfZm9ybVNlcnZpY2UsIHpvbmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaG9zdEVsZW0sIHpvbmUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9mb3JtU2VydmljZSA9IF9mb3JtU2VydmljZTtcbiAgICAgICAgX3RoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNYnNjRm9ybUJhc2UucHJvdG90eXBlLm5nT25Jbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9pbmhlcml0ZWRPcHRpb25zID0gdGhpcy5fZm9ybVNlcnZpY2UgPyB0aGlzLl9mb3JtU2VydmljZS5vcHRpb25zIDoge307XG4gICAgfTtcbiAgICBNYnNjRm9ybUJhc2UuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBEaXJlY3RpdmUsIGFyZ3M6IFt7IHNlbGVjdG9yOiAnW21ic2MtZi1iXScgfSxdIH0sXG4gICAgXTtcbiAgICBNYnNjRm9ybUJhc2UuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjT3B0aW9uc1NlcnZpY2UsIH0sXG4gICAgICAgIHsgdHlwZTogTmdab25lLCB9LFxuICAgIF07IH07XG4gICAgTWJzY0Zvcm1CYXNlLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAnY29sb3InOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ29wdGlvbnMnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2Rpc2FibGVkJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICduYW1lJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdfaW5pdEVsZW0nOiBbeyB0eXBlOiBWaWV3Q2hpbGQsIGFyZ3M6IFsnaW5pdEVsZW1lbnQnLCB7IHN0YXRpYzogZmFsc2UgfSxdIH0sXSxcbiAgICB9O1xuICAgIHJldHVybiBNYnNjRm9ybUJhc2U7XG59KE1ic2NCYXNlKSk7XG52YXIgTWJzY0Zvcm1WYWx1ZUJhc2UgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYnNjRm9ybVZhbHVlQmFzZSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYnNjRm9ybVZhbHVlQmFzZShob3N0RWxlbSwgX2Zvcm1TZXJ2aWNlLCBfaW5wdXRTZXJ2aWNlLCBfY29udHJvbCwgem9uZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBob3N0RWxlbSwgX2Zvcm1TZXJ2aWNlLCB6b25lKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fY29udHJvbCA9IF9jb250cm9sO1xuICAgICAgICBfdGhpcy5vbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgX3RoaXMub25Ub3VjaCA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgX3RoaXMuZXJyb3JNZXNzYWdlID0gJyc7XG4gICAgICAgIF90aGlzLnZhbHVlQ2hhbmdlRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgaWYgKF9jb250cm9sICYmICghX2lucHV0U2VydmljZSB8fCAhX2lucHV0U2VydmljZS5pc0NvbnRyb2xTZXQpKSB7XG4gICAgICAgICAgICBpZiAoX2NvbnRyb2wudmFsdWVBY2Nlc3NvciAmJiBfY29udHJvbC52YWx1ZUFjY2Vzc29yLm9sZEFjY2Vzc29yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBfY29udHJvbC52YWx1ZUFjY2Vzc29yLm9sZEFjY2Vzc29yID0gX3RoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfY29udHJvbC52YWx1ZUFjY2Vzc29yID0gX3RoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY0Zvcm1WYWx1ZUJhc2UucHJvdG90eXBlLCBcInJlYWRvbmx5XCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWFkb25seSA9IGVtcHR5T3JUcnVlKHZhbCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjRm9ybVZhbHVlQmFzZS5wcm90b3R5cGUsIFwiaW5uZXJWYWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHY7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKHYpO1xuICAgICAgICAgICAgdGhpcy52YWx1ZUNoYW5nZUVtaXR0ZXIuZW1pdCh2KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1ic2NGb3JtVmFsdWVCYXNlLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdjtcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNYnNjRm9ybVZhbHVlQmFzZS5wcm90b3R5cGUucmVnaXN0ZXJPbkNoYW5nZSA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gICAgfTtcbiAgICBNYnNjRm9ybVZhbHVlQmFzZS5wcm90b3R5cGUucmVnaXN0ZXJPblRvdWNoZWQgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgdGhpcy5vblRvdWNoID0gZm47XG4gICAgfTtcbiAgICBNYnNjRm9ybVZhbHVlQmFzZS5wcm90b3R5cGUuc2V0RGlzYWJsZWRTdGF0ZSA9IGZ1bmN0aW9uIChpc0Rpc2FibGVkKSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZWQgPSBpc0Rpc2FibGVkO1xuICAgIH07XG4gICAgTWJzY0Zvcm1WYWx1ZUJhc2UucHJvdG90eXBlLndyaXRlVmFsdWUgPSBmdW5jdGlvbiAodikge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IHY7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuICAgIH07XG4gICAgTWJzY0Zvcm1WYWx1ZUJhc2UucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlICYmIHRoaXMuaW5zdGFuY2UucmVmcmVzaCkge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5zdGFuY2UucmVmcmVzaCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9uZWVkUmVmcmVzaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ic2NGb3JtVmFsdWVCYXNlLnByb3RvdHlwZS5uZ0FmdGVyVmlld0luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmdBZnRlclZpZXdJbml0LmNhbGwodGhpcyk7XG4gICAgICAgIGlmICh0aGlzLl9uZWVkUmVmcmVzaCkge1xuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ic2NGb3JtVmFsdWVCYXNlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogRGlyZWN0aXZlLCBhcmdzOiBbeyBzZWxlY3RvcjogJ1ttYnNjLWZ2LWJdJyB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NGb3JtVmFsdWVCYXNlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYsIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY09wdGlvbnNTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjSW5wdXRTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBOZ0NvbnRyb2wsIH0sXG4gICAgICAgIHsgdHlwZTogTmdab25lLCB9LFxuICAgIF07IH07XG4gICAgTWJzY0Zvcm1WYWx1ZUJhc2UucHJvcERlY29yYXRvcnMgPSB7XG4gICAgICAgICdyZWFkb25seSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAndmFsdWUnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2Vycm9yJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdlcnJvck1lc3NhZ2UnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3ZhbHVlQ2hhbmdlRW1pdHRlcic6IFt7IHR5cGU6IE91dHB1dCwgYXJnczogWyd2YWx1ZUNoYW5nZScsXSB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gTWJzY0Zvcm1WYWx1ZUJhc2U7XG59KE1ic2NGb3JtQmFzZSkpO1xudmFyIE1ic2NJbnB1dEJhc2UgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYnNjSW5wdXRCYXNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1ic2NJbnB1dEJhc2UoaW5pdGlhbEVsZW0sIF9mb3JtU2VydmljZSwgX2lucHV0U2VydmljZSwgX2NvbnRyb2wsIHpvbmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaW5pdGlhbEVsZW0sIF9mb3JtU2VydmljZSwgX2lucHV0U2VydmljZSwgX2NvbnRyb2wsIHpvbmUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnR5cGUgPSAndGV4dCc7XG4gICAgICAgIF90aGlzLnBsYWNlaG9sZGVyID0gJyc7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTWJzY0lucHV0QmFzZS5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IERpcmVjdGl2ZSwgYXJnczogW3sgc2VsZWN0b3I6ICdbbWJzYy1pLWJdJyB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NJbnB1dEJhc2UuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjT3B0aW9uc1NlcnZpY2UsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgICAgICB7IHR5cGU6IE1ic2NJbnB1dFNlcnZpY2UsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgICAgICB7IHR5cGU6IE5nQ29udHJvbCwgfSxcbiAgICAgICAgeyB0eXBlOiBOZ1pvbmUsIH0sXG4gICAgXTsgfTtcbiAgICBNYnNjSW5wdXRCYXNlLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAnYXV0b2NvbXBsZXRlJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdhdXRvY2FwaXRhbGl6ZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnYXV0b2NvcnJlY3QnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3NwZWxsY2hlY2snOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2F1dG9mb2N1cyc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnbWlubGVuZ3RoJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdtYXhsZW5ndGgnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3JlcXVpcmVkJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdpY29uJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdpY29uQWxpZ24nOiBbeyB0eXBlOiBJbnB1dCQxLCBhcmdzOiBbJ2ljb24tYWxpZ24nLF0gfSxdLFxuICAgICAgICAndHlwZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAncGFzc3dvcmRUb2dnbGUnOiBbeyB0eXBlOiBJbnB1dCQxLCBhcmdzOiBbJ3Bhc3N3b3JkLXRvZ2dsZScsXSB9LF0sXG4gICAgICAgICdpY29uU2hvdyc6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnaWNvbi1zaG93JyxdIH0sXSxcbiAgICAgICAgJ2ljb25IaWRlJzogW3sgdHlwZTogSW5wdXQkMSwgYXJnczogWydpY29uLWhpZGUnLF0gfSxdLFxuICAgICAgICAnaWNvblVwbG9hZCc6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnaWNvbi11cGxvYWQnLF0gfSxdLFxuICAgICAgICAnaW5wdXRTdHlsZSc6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnaW5wdXQtc3R5bGUnLF0gfSxdLFxuICAgICAgICAnbGFiZWxTdHlsZSc6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnbGFiZWwtc3R5bGUnLF0gfSxdLFxuICAgICAgICAncGxhY2Vob2xkZXInOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICB9O1xuICAgIHJldHVybiBNYnNjSW5wdXRCYXNlO1xufShNYnNjRm9ybVZhbHVlQmFzZSkpO1xudmFyIE1ic2NJbnB1dCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1ic2NJbnB1dCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYnNjSW5wdXQoaW5pdGlhbEVsZW0sIF9mb3JtU2VydmljZSwgX2lucHV0U2VydmljZSwgX2NvbnRyb2wsIHpvbmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaW5pdGlhbEVsZW0sIF9mb3JtU2VydmljZSwgX2lucHV0U2VydmljZSwgX2NvbnRyb2wsIHpvbmUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9pbnB1dFNlcnZpY2UgPSBfaW5wdXRTZXJ2aWNlO1xuICAgICAgICBfdGhpcy5jb250cm9sTmcgPSB0cnVlO1xuICAgICAgICBfdGhpcy5kcm9wZG93biA9IGZhbHNlO1xuICAgICAgICBfaW5wdXRTZXJ2aWNlLmlucHV0ID0gX3RoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTWJzY0lucHV0LnByb3RvdHlwZS5pbml0Q29udHJvbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBleHRlbmQkMSh7fSwgdGhpcy5faW5oZXJpdGVkT3B0aW9ucywgdGhpcy5vcHRpb25zLCB0aGlzLmlubGluZU9wdGlvbnNPYmopO1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IElucHV0KHRoaXMuX2luaXRFbGVtLm5hdGl2ZUVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmluc3RhbmNlLnJlZnJlc2goKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBNYnNjSW5wdXQuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbWJzYy1pbnB1dCcsXG4gICAgICAgICAgICAgICAgICAgIGhvc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdbY2xhc3MubWJzYy1jb250cm9sLW5nXSc6ICdjb250cm9sTmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1tjbGFzcy5tYnNjLWVycl0nOiAnZXJyb3InXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIlxcbiAgICAgICAgPGxhYmVsXFxuICAgICAgICAgICAgW2NsYXNzLm1ic2MtZXJyXT1cXFwiZXJyb3JcXFwiIFtjbGFzcy5tYnNjLXNlbGVjdF09XFxcImRyb3Bkb3duXFxcIlxcbiAgICAgICAgICAgIFtjbGFzcy5tYnNjLWlucHV0LWJveF09XFxcImlucHV0U3R5bGUgPT0gJ2JveCdcXFwiXFxuICAgICAgICAgICAgW2NsYXNzLm1ic2MtaW5wdXQtb3V0bGluZV09XFxcImlucHV0U3R5bGUgPT0gJ291dGxpbmUnXFxcIlxcbiAgICAgICAgICAgIFtjbGFzcy5tYnNjLWxhYmVsLXN0YWNrZWRdPVxcXCJsYWJlbFN0eWxlID09ICdzdGFja2VkJ1xcXCJcXG4gICAgICAgICAgICBbY2xhc3MubWJzYy1sYWJlbC1pbmxpbmVdPVxcXCJsYWJlbFN0eWxlID09ICdpbmxpbmUnXFxcIlxcbiAgICAgICAgICAgIFtjbGFzcy5tYnNjLWxhYmVsLWZsb2F0aW5nXT1cXFwibGFiZWxTdHlsZSA9PSAnZmxvYXRpbmcnXFxcIlxcbiAgICAgICAgPlxcbiAgICAgICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwibWJzYy1pbnB1dC13cmFwXFxcIj5cXG4gICAgICAgICAgICAgICAgPGlucHV0ICNpbml0RWxlbWVudCBbdHlwZV09XFxcInR5cGVcXFwiIFtwbGFjZWhvbGRlcl09XFxcInBsYWNlaG9sZGVyXFxcIiBbKG5nTW9kZWwpXT1cXFwiaW5uZXJWYWx1ZVxcXCIgKGJsdXIpPVxcXCJvblRvdWNoKCRldmVudClcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5uYW1lXT1cXFwibmFtZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtaWNvbl09XFxcImljb24gPyBpY29uIDogbnVsbFxcXCJcXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtaWNvbi1hbGlnbl09XFxcImljb25BbGlnbiA/IGljb25BbGlnbiA6IG51bGxcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLXBhc3N3b3JkLXRvZ2dsZV09XFxcInBhc3N3b3JkVG9nZ2xlID8gJ3RydWUnOiBudWxsXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIuZGF0YS1pY29uLXNob3ddPVxcXCJpY29uU2hvdyA/IGljb25TaG93IDogbnVsbFxcXCJcXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtaWNvbi1oaWRlXT1cXFwiaWNvbkhpZGUgPyBpY29uSGlkZSA6IG51bGxcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLWljb24tdXBsb2FkXT1cXFwiaWNvblVwbG9hZCA/IGljb25VcGxvYWQgOiBudWxsXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIubWluXT1cXFwibWluXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIubWF4XT1cXFwibWF4XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIubWlubGVuZ3RoXT1cXFwibWlubGVuZ3RoXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIubWF4bGVuZ3RoXT1cXFwibWF4bGVuZ3RoXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIuYXV0b2NvbXBsZXRlXT1cXFwiYXV0b2NvbXBsZXRlXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIuYXV0b2NhcGl0YWxpemVdPVxcXCJhdXRvY2FwaXRhbGl6ZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLmF1dG9jb3JyZWN0XT1cXFwiYXV0b2NvcnJlY3RcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5zcGVsbGNoZWNrXT1cXFwic3BlbGxjaGVja1xcXCJcXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLmF1dG9mb2N1c109XFxcImF1dG9mb2N1c1xcXCJcXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLnN0ZXBdPVxcXCJzdGVwXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIucGF0dGVybl09XFxcInBhdHRlcm5cXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5yZXF1aXJlZF09XFxcInJlcXVpcmVkXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIuYWNjZXB0XT1cXFwiYWNjZXB0XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIubXVsdGlwbGVdPVxcXCJtdWx0aXBsZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgIFtkaXNhYmxlZF09XFxcImRpc2FibGVkXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW3JlYWRvbmx5XT1cXFwiX3JlYWRvbmx5XFxcIiAvPlxcbiAgICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cXFwiZHJvcGRvd25cXFwiIGNsYXNzPVxcXCJtYnNjLXNlbGVjdC1pYyBtYnNjLWljIG1ic2MtaWMtYXJyb3ctZG93bjVcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gKm5nSWY9XFxcImVycm9yICYmIGVycm9yTWVzc2FnZVxcXCIgY2xhc3M9XFxcIm1ic2MtZXJyLW1zZ1xcXCI+e3tlcnJvck1lc3NhZ2V9fTwvc3Bhbj5cXG4gICAgICAgICAgICA8L3NwYW4+XFxuICAgICAgICA8L2xhYmVsPlxcbiAgICBcIixcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbTWJzY0lucHV0U2VydmljZV1cbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NJbnB1dC5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiBFbGVtZW50UmVmLCB9LFxuICAgICAgICB7IHR5cGU6IE1ic2NPcHRpb25zU2VydmljZSwgZGVjb3JhdG9yczogW3sgdHlwZTogT3B0aW9uYWwgfSxdIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY0lucHV0U2VydmljZSwgfSxcbiAgICAgICAgeyB0eXBlOiBOZ0NvbnRyb2wsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgICAgICB7IHR5cGU6IE5nWm9uZSwgfSxcbiAgICBdOyB9O1xuICAgIE1ic2NJbnB1dC5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgJ21pbic6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnbWF4JzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdzdGVwJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdwYXR0ZXJuJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdhY2NlcHQnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ211bHRpcGxlJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdjb250cm9sTmcnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2Ryb3Bkb3duJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gTWJzY0lucHV0O1xufShNYnNjSW5wdXRCYXNlKSk7XG52YXIgTWJzY0lucHV0TW9kdWxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYnNjSW5wdXRNb2R1bGUoKSB7XG4gICAgfVxuICAgIE1ic2NJbnB1dE1vZHVsZS5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IE5nTW9kdWxlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBpbXBvcnRzOiBbRm9ybXNNb2R1bGUsIENvbW1vbk1vZHVsZSwgTWJzY0Jhc2VNb2R1bGVdLFxuICAgICAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtNYnNjSW5wdXQsIE1ic2NJbnB1dEJhc2UsIE1ic2NGb3JtQmFzZSwgTWJzY0Zvcm1WYWx1ZUJhc2VdLFxuICAgICAgICAgICAgICAgICAgICBleHBvcnRzOiBbTWJzY0lucHV0XVxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgTWJzY0lucHV0TW9kdWxlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgcmV0dXJuIE1ic2NJbnB1dE1vZHVsZTtcbn0oKSk7XG5cbnZhciBCdXR0b24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Gb3JtQ29udHJvbCkge1xuICBfaW5oZXJpdHNMb29zZShCdXR0b24sIF9Gb3JtQ29udHJvbCk7XG5cbiAgZnVuY3Rpb24gQnV0dG9uKGVsbSwgc2V0dGluZ3MpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Gb3JtQ29udHJvbC5jYWxsKHRoaXMsIGVsbSwgc2V0dGluZ3MpIHx8IHRoaXM7XG4gICAgdmFyICRlbG0gPSBfdGhpcy5fJGVsbTtcbiAgICB2YXIgaGFzSWNvbiA9ICRlbG0uYXR0cignZGF0YS1pY29uJyk7XG4gICAgJGVsbS5hZGRDbGFzcygnbWJzYy1idG4gbWJzYy1uby10b3VjaCcpLmZpbmQoJy5tYnNjLWJ0bi1pYycpLnJlbW92ZSgpO1xuXG4gICAgaWYgKGhhc0ljb24pIHtcbiAgICAgICRlbG0ucHJlcGVuZCgnPHNwYW4gY2xhc3M9XCJtYnNjLWJ0bi1pYyBtYnNjLWljIG1ic2MtaWMtJyArIGhhc0ljb24gKyAnXCI+PC9zcGFuPicpO1xuXG4gICAgICBpZiAoJGVsbS50ZXh0KCkgPT09IFwiXCIpIHtcbiAgICAgICAgJGVsbS5hZGRDbGFzcygnbWJzYy1idG4taWNvbi1vbmx5Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuXyRyaXBwbGVFbG0gPSAkZWxtO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCdXR0b24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDbGFzc0VsbSA9IGZ1bmN0aW9uIGdldENsYXNzRWxtKCkge1xuICAgIHJldHVybiB0aGlzLl8kZWxtO1xuICB9O1xuXG4gIHJldHVybiBCdXR0b247XG59KEZvcm1Db250cm9sKTsgLy8gSW5pdCBtYnNjLWJ1dHRvbiBlbGVtZW50cyBvbiBwYWdlIGxvYWRcblxuYXV0b0luaXQoJ1ttYnNjLWJ1dHRvbl0nLCBCdXR0b24pO1xuXG52YXIgQ2hlY2tCb3ggPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Gb3JtQ29udHJvbCkge1xuICBfaW5oZXJpdHNMb29zZShDaGVja0JveCwgX0Zvcm1Db250cm9sKTtcblxuICBmdW5jdGlvbiBDaGVja0JveChlbG0sIHNldHRpbmdzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfRm9ybUNvbnRyb2wuY2FsbCh0aGlzLCBlbG0sIHNldHRpbmdzKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuXyRwYXJlbnQucHJlcGVuZChfdGhpcy5fJGVsbSkuYWRkQ2xhc3MoJ21ic2MtY2hlY2tib3ggbWJzYy1jb250cm9sLXcnKS5maW5kKCcubWJzYy1jaGVja2JveC1ib3gnKS5yZW1vdmUoKTtcblxuICAgIF90aGlzLl8kZWxtLmFmdGVyKCc8c3BhbiBjbGFzcz1cIm1ic2MtY2hlY2tib3gtYm94XCI+PC9zcGFuPicpO1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgcmV0dXJuIENoZWNrQm94O1xufShGb3JtQ29udHJvbCk7IC8vIEluaXQgbWJzYy1jaGVja2JveCBlbGVtZW50cyBvbiBwYWdlIGxvYWRcblxuYXV0b0luaXQoJ1ttYnNjLWNoZWNrYm94XScsIENoZWNrQm94KTtcblxudmFyIFJhZGlvID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfRm9ybUNvbnRyb2wpIHtcbiAgX2luaGVyaXRzTG9vc2UoUmFkaW8sIF9Gb3JtQ29udHJvbCk7XG5cbiAgZnVuY3Rpb24gUmFkaW8oZWxtLCBzZXR0aW5ncykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0Zvcm1Db250cm9sLmNhbGwodGhpcywgZWxtLCBzZXR0aW5ncykgfHwgdGhpcztcblxuICAgIF90aGlzLl8kcGFyZW50LmFkZENsYXNzKCdtYnNjLXJhZGlvIG1ic2MtY29udHJvbC13JykuZmluZCgnLm1ic2MtcmFkaW8tYm94JykucmVtb3ZlKCk7XG5cbiAgICBfdGhpcy5fJGVsbS5hZnRlcignPHNwYW4gY2xhc3M9XCJtYnNjLXJhZGlvLWJveFwiPjxzcGFuPjwvc3Bhbj48L3NwYW4+Jyk7XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICByZXR1cm4gUmFkaW87XG59KEZvcm1Db250cm9sKTsgLy8gSW5pdCBtYnNjLXJhZGlvIGVsZW1lbnRzIG9uIHBhZ2UgbG9hZFxuXG5hdXRvSW5pdCgnW21ic2MtcmFkaW9dJywgUmFkaW8pO1xuXG52YXIgU2VsZWN0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfSW5wdXQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU2VsZWN0LCBfSW5wdXQpO1xuXG4gIGZ1bmN0aW9uIFNlbGVjdChlbG0sIHNldHRpbmdzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfSW5wdXQuY2FsbCh0aGlzLCBlbG0sIHNldHRpbmdzKSB8fCB0aGlzO1xuICAgIHZhciAkZWxtID0gX3RoaXMuXyRlbG07XG4gICAgdmFyICRwYXJlbnQgPSBfdGhpcy5fJHBhcmVudDtcbiAgICB2YXIgJGV4aXN0aW5nID0gJHBhcmVudC5maW5kKCcubWJzYy1zZWxlY3QtaW5wdXQnKTtcbiAgICB2YXIgJGlucHV0ID0gJGV4aXN0aW5nLmxlbmd0aCA/ICRleGlzdGluZyA6ICQkMSgnPGlucHV0IHRhYmluZGV4PVwiLTFcIiBjbGFzcz1cIm1ic2Mtc2VsZWN0LWlucHV0IG1ic2MtY29udHJvbFwiIHJlYWRvbmx5PicpO1xuICAgIF90aGlzLl8kaW5wdXQgPSAkaW5wdXQ7XG4gICAgX3RoaXMuX2RlbG0gPSAkaW5wdXRbMF07XG4gICAgX3RoaXMuX3NldFRleHQgPSBfdGhpcy5fc2V0VGV4dC5iaW5kKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpKTtcbiAgICAkcGFyZW50LmFkZENsYXNzKCdtYnNjLXNlbGVjdCcgKyAoX3RoaXMuXyRmcmFtZSA/ICcgbWJzYy1zZWxlY3QtaW5saW5lJyA6ICcnKSk7XG4gICAgJGVsbS5hZnRlcigkaW5wdXQpO1xuICAgICRpbnB1dC5hZnRlcignPHNwYW4gY2xhc3M9XCJtYnNjLXNlbGVjdC1pYyBtYnNjLWljIG1ic2MtaWMtYXJyb3ctZG93bjVcIj48L3NwYW4+Jyk7IC8vIFVwZGF0ZSBkdW1teSBpbnB1dCB0ZXh0IG9uIGNoYW5nZVxuXG4gICAgJGVsbS5vbignY2hhbmdlJywgX3RoaXMuX3NldFRleHQpO1xuXG4gICAgX3RoaXMuX3NldFRleHQoKTtcblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTZWxlY3QucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBfSW5wdXQucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuXyRwYXJlbnQuZmluZCgnLm1ic2Mtc2VsZWN0LWljJykucmVtb3ZlKCk7XG5cbiAgICB0aGlzLl8kZWxtLm9mZignY2hhbmdlJywgdGhpcy5fc2V0VGV4dCk7XG4gIH07XG5cbiAgX3Byb3RvLl9zZXRUZXh0ID0gZnVuY3Rpb24gX3NldFRleHQoKSB7XG4gICAgdmFyIGVsbSA9IHRoaXMuX2VsbTtcbiAgICB2YXIgJGVsbSA9ICQkMShlbG0pOyAvLyBDaGVjayBpZiBzZWxlY3QgYW5kIG1vYmlzY3JvbGwgc2VsZWN0IHdhcyBub3QgaW5pdGlhbGl6ZWRcblxuICAgIGlmICgkZWxtLmlzKCdzZWxlY3QnKSAmJiAhJGVsbS5oYXNDbGFzcygnbWJzYy1jb21wJykpIHtcbiAgICAgIHRoaXMuXyRpbnB1dC52YWwoZWxtLnNlbGVjdGVkSW5kZXggIT0gLTEgPyBlbG0ub3B0aW9uc1tlbG0uc2VsZWN0ZWRJbmRleF0udGV4dCA6ICcnKTtcbiAgICB9IC8vIENoZWNrIGZsb2F0aW5nIGxhYmVsXG5cblxuICAgIHRoaXMucmVmcmVzaCgpO1xuICB9O1xuXG4gIHJldHVybiBTZWxlY3Q7XG59KElucHV0KTsgLy8gSW5pdCBtYnNjLXNlbGVjdCBlbGVtZW50cyBvbiBwYWdlIGxvYWRcblxuYXV0b0luaXQoJ1ttYnNjLWRyb3Bkb3duXScsIFNlbGVjdCk7XG5cbnZhciBldmVudHMkMiA9IFsnY2hhbmdlJywgJ2tleWRvd24nLCAnaW5wdXQnLCAnc2Nyb2xsJ107XG52YXIgc2l6ZURlYm91bmNlO1xuXG5mdW5jdGlvbiBzaXplVGV4dEFyZWFzKCkge1xuICBjbGVhclRpbWVvdXQoc2l6ZURlYm91bmNlKTtcbiAgc2l6ZURlYm91bmNlID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgJCQxKCd0ZXh0YXJlYS5tYnNjLWNvbnRyb2wnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHNpemVUZXh0QXJlYSh0aGlzKTtcbiAgICB9KTtcbiAgfSwgMTAwKTtcbn1cblxuZnVuY3Rpb24gc2l6ZVRleHRBcmVhKGNvbnRyb2wpIHtcbiAgdmFyIGhlaWdodCxcbiAgICAgIGxpbmVOcixcbiAgICAgIGxpbmUsXG4gICAgICByb3dOciA9ICQkMShjb250cm9sKS5hdHRyKCdyb3dzJykgfHwgNjtcblxuICBpZiAoY29udHJvbC5vZmZzZXRIZWlnaHQpIHtcbiAgICBjb250cm9sLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgIGxpbmUgPSBjb250cm9sLnNjcm9sbEhlaWdodCAtIGNvbnRyb2wub2Zmc2V0SGVpZ2h0O1xuICAgIGhlaWdodCA9IGNvbnRyb2wub2Zmc2V0SGVpZ2h0ICsgKGxpbmUgPiAwID8gbGluZSA6IDApO1xuICAgIGxpbmVOciA9IE1hdGgucm91bmQoaGVpZ2h0IC8gMjQpO1xuXG4gICAgaWYgKGxpbmVOciA+IHJvd05yKSB7XG4gICAgICAvL2NvbnRyb2wuc2Nyb2xsVG9wID0gaGVpZ2h0O1xuICAgICAgaGVpZ2h0ID0gMjQgKiByb3dOciArIChoZWlnaHQgLSBsaW5lTnIgKiAyNCk7XG4gICAgICAkJDEoY29udHJvbCkuYWRkQ2xhc3MoJ21ic2MtdGV4dGFyZWEtc2Nyb2xsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQkMShjb250cm9sKS5yZW1vdmVDbGFzcygnbWJzYy10ZXh0YXJlYS1zY3JvbGwnKTtcbiAgICB9XG5cbiAgICBpZiAoaGVpZ2h0KSB7XG4gICAgICBjb250cm9sLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNjcm9sbFRleHRBcmVhKGVsbSkge1xuICB2YXIgJGVsbSA9ICQkMShlbG0pO1xuXG4gIGlmICghJGVsbS5oYXNDbGFzcygnbWJzYy10ZXh0YXJlYS1zY3JvbGwnKSkge1xuICAgIHZhciBsaW5lID0gZWxtLnNjcm9sbEhlaWdodCAtIGVsbS5vZmZzZXRIZWlnaHQsXG4gICAgICAgIGhlaWdodCA9IGVsbS5vZmZzZXRIZWlnaHQgKyBsaW5lLFxuICAgICAgICBsaW5lTnIgPSBNYXRoLnJvdW5kKGhlaWdodCAvIDI0KSxcbiAgICAgICAgcm93TnIgPSAkZWxtLmF0dHIoJ3Jvd3MnKSB8fCA2O1xuXG4gICAgaWYgKGxpbmVOciA8PSByb3dOcikge1xuICAgICAgZWxtLnNjcm9sbFRvcCA9IDA7XG4gICAgICBlbG0uc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgICB9XG4gIH1cbn1cblxuaWYgKGlzQnJvd3Nlcikge1xuICAvLyBTZXQgaGVpZ2h0IG9mIHRleHRhcmVhcyBvbiB2aWV3cG9ydCBzaXplIGNoYW5nZXNcbiAgJCQxKHdpbmRvdykub24oJ3Jlc2l6ZSBvcmllbnRhdGlvbmNoYW5nZScsIHNpemVUZXh0QXJlYXMpO1xufVxuXG52YXIgVGV4dEFyZWEgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9JbnB1dCkge1xuICBfaW5oZXJpdHNMb29zZShUZXh0QXJlYSwgX0lucHV0KTtcblxuICBmdW5jdGlvbiBUZXh0QXJlYShlbG0sIHNldHRpbmdzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfSW5wdXQuY2FsbCh0aGlzLCBlbG0sIHNldHRpbmdzKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMuXyRwYXJlbnQuYWRkQ2xhc3MoJ21ic2MtdGV4dGFyZWEnKTtcblxuICAgIGV2ZW50cyQyLmZvckVhY2goZnVuY3Rpb24gKGV2KSB7XG4gICAgICBfdGhpcy5fJGVsbS5vbihldiwgX3RoaXMuX2hhbmRsZSk7XG4gICAgfSk7XG4gICAgc2l6ZVRleHRBcmVhKGVsbSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFRleHRBcmVhLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBfSW5wdXQucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcblxuICAgIGV2ZW50cyQyLmZvckVhY2goZnVuY3Rpb24gKGV2KSB7XG4gICAgICBfdGhpczIuXyRlbG0ub2ZmKGV2LCBfdGhpczIuX2hhbmRsZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlZnJlc2ggPSBmdW5jdGlvbiByZWZyZXNoKCkge1xuICAgIF9JbnB1dC5wcm90b3R5cGUucmVmcmVzaC5jYWxsKHRoaXMpO1xuXG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2RlYm91bmNlKTtcbiAgICBzaXplVGV4dEFyZWEodGhpcy5fZWxtKTtcbiAgfTtcblxuICBfcHJvdG8uX2hhbmRsZSA9IGZ1bmN0aW9uIF9oYW5kbGUoZXYpIHtcbiAgICBfSW5wdXQucHJvdG90eXBlLl9oYW5kbGUuY2FsbCh0aGlzLCBldik7XG5cbiAgICBzd2l0Y2ggKGV2LnR5cGUpIHtcbiAgICAgIGNhc2UgJ2NoYW5nZSc6XG4gICAgICAgIHNpemVUZXh0QXJlYSh0aGlzLl9lbG0pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAna2V5ZG93bic6XG4gICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIHRoaXMuX29uSW5wdXQoZXYpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdzY3JvbGwnOlxuICAgICAgICBzY3JvbGxUZXh0QXJlYSh0aGlzLl9lbG0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uX29uSW5wdXQgPSBmdW5jdGlvbiBfb25JbnB1dCgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGNsZWFyVGltZW91dCh0aGlzLl9kZWJvdW5jZSk7XG4gICAgdGhpcy5fZGVib3VuY2UgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHNpemVUZXh0QXJlYShfdGhpczMuX2VsbSk7XG4gICAgfSwgMTAwKTtcbiAgfTtcblxuICByZXR1cm4gVGV4dEFyZWE7XG59KElucHV0KTtcblxuYXV0b0luaXQoJ1ttYnNjLXRleHRhcmVhXScsIFRleHRBcmVhKTtcblxudmFyIFNlZ21lbnRlZEl0ZW0gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Gb3JtQ29udHJvbCkge1xuICBfaW5oZXJpdHNMb29zZShTZWdtZW50ZWRJdGVtLCBfRm9ybUNvbnRyb2wpO1xuXG4gIGZ1bmN0aW9uIFNlZ21lbnRlZEl0ZW0oZWxtLCBzZXR0aW5ncykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0Zvcm1Db250cm9sLmNhbGwodGhpcywgZWxtLCBzZXR0aW5ncykgfHwgdGhpcztcbiAgICB2YXIgJHNlZ21lbnRDb250O1xuICAgIHZhciAkc2VnbWVudDtcbiAgICB2YXIgJGVsbSA9IF90aGlzLl8kZWxtO1xuICAgIHZhciAkcGFyZW50ID0gX3RoaXMuXyRwYXJlbnQ7XG5cbiAgICBpZiAoISRwYXJlbnQuaGFzQ2xhc3MoJ21ic2Mtc2VnbWVudGVkLWl0ZW0tcmVhZHknKSkge1xuICAgICAgJHNlZ21lbnRDb250ID0gJCQxKCc8ZGl2IGNsYXNzPVwibWJzYy1zZWdtZW50ZWQgbWJzYy1zZWdtZW50ZWQtZ3JvdXAgbWJzYy1uby10b3VjaFwiPjwvZGl2PicpO1xuICAgICAgJHBhcmVudC5hZnRlcigkc2VnbWVudENvbnQpO1xuICAgICAgJHBhcmVudC5wYXJlbnQoKS5maW5kKCdpbnB1dFtuYW1lPVwiJyArICRlbG0uYXR0cignbmFtZScpICsgJ1wiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGlucHV0ID0gJCQxKHRoaXMpO1xuICAgICAgICAkc2VnbWVudCA9ICRpbnB1dC5wYXJlbnQoKS5hZGRDbGFzcygnbWJzYy1zZWdtZW50ZWQtaXRlbSBtYnNjLXNlZ21lbnRlZC1pdGVtLXJlYWR5Jyk7XG4gICAgICAgICQkMSgnPHNwYW4gY2xhc3M9XCJtYnNjLXNlZ21lbnRlZC1jb250ZW50XCI+JyArICgkaW5wdXQuYXR0cignZGF0YS1pY29uJykgPyAnPHNwYW4gY2xhc3M9XCJtYnNjLWljIG1ic2MtaWMtJyArICRpbnB1dC5hdHRyKCdkYXRhLWljb24nKSArICdcIj48L3NwYW4+JyA6ICcnKSArICc8L3NwYW4+JykuYXBwZW5kKCRzZWdtZW50LmNvbnRlbnRzKCkpLmFwcGVuZFRvKCRzZWdtZW50KTtcbiAgICAgICAgJHNlZ21lbnQucHJlcGVuZCgkaW5wdXQpO1xuICAgICAgICAkc2VnbWVudENvbnQuYXBwZW5kKCRzZWdtZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIF90aGlzLl8kcmlwcGxlRWxtID0gJGVsbS5uZXh0KCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNlZ21lbnRlZEl0ZW0ucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRDbGFzc0VsbSA9IGZ1bmN0aW9uIGdldENsYXNzRWxtKCkge1xuICAgIHJldHVybiB0aGlzLl8kZWxtLmNsb3Nlc3QoJy5tYnNjLXNlZ21lbnRlZCcpO1xuICB9O1xuXG4gIHJldHVybiBTZWdtZW50ZWRJdGVtO1xufShGb3JtQ29udHJvbCk7IC8vIEluaXQgbWJzYy1zZWdtZW50ZWQgZWxlbWVudHMgb24gcGFnZSBsb2FkXG5cbmF1dG9Jbml0KCdbbWJzYy1zZWdtZW50ZWRdJywgU2VnbWVudGVkSXRlbSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0ZXBwZXIoJGVsbSwgYWN0aW9uLCBkZWxheSwgaXNSZWFkT25seSwgc3RvcFByb3AsIHJpcHBsZSkge1xuICB2YXIgJGJ0bixcbiAgICAgIGNoYW5nZWQsXG4gICAgICBpbmRleCxcbiAgICAgIHJ1bm5pbmcsXG4gICAgICBzb3VyY2UsXG4gICAgICBzdGFydFgsXG4gICAgICBzdGFydFksXG4gICAgICBzdGVwLFxuICAgICAgdGltZXIsXG4gICAgICBjaGVjayA9IGlzUmVhZE9ubHkgfHwgbm9vcDtcblxuICBmdW5jdGlvbiBvbkJ0blN0YXJ0KGV2KSB7XG4gICAgdmFyIHByb2NlZWQ7XG4gICAgJGJ0biA9ICQkMShldi5jdXJyZW50VGFyZ2V0KTtcbiAgICBzdGVwID0gKyRidG4uYXR0cignZGF0YS1zdGVwJyk7XG4gICAgaW5kZXggPSArJGJ0bi5hdHRyKCdkYXRhLWluZGV4Jyk7XG4gICAgY2hhbmdlZCA9IHRydWU7XG5cbiAgICBpZiAoc3RvcFByb3ApIHtcbiAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIGlmIChldi50eXBlID09ICd0b3VjaHN0YXJ0Jykge1xuICAgICAgJGJ0bi5jbG9zZXN0KCcubWJzYy1uby10b3VjaCcpLnJlbW92ZUNsYXNzKCdtYnNjLW5vLXRvdWNoJyk7XG4gICAgfVxuXG4gICAgaWYgKGV2LnR5cGUgPT0gJ21vdXNlZG93bicpIHtcbiAgICAgIC8vIFByZXZlbnQgZm9jdXNcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgaWYgKGV2LnR5cGUgIT0gJ2tleWRvd24nKSB7XG4gICAgICAvL2UucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHN0YXJ0WCA9IGdldENvb3JkKGV2LCAnWCcpO1xuICAgICAgc3RhcnRZID0gZ2V0Q29vcmQoZXYsICdZJyk7XG4gICAgICBwcm9jZWVkID0gdGVzdFRvdWNoKGV2LCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2VlZCA9IGV2LmtleUNvZGUgPT09IDMyO1xuICAgIH1cblxuICAgIGlmICghcnVubmluZyAmJiBwcm9jZWVkICYmICEkYnRuLmhhc0NsYXNzKCdtYnNjLWRpc2FibGVkJykpIHtcbiAgICAgIGlmIChzdGFydChpbmRleCwgc3RlcCwgZXYpKSB7XG4gICAgICAgICRidG4uYWRkQ2xhc3MoJ21ic2MtYWN0aXZlJyk7XG5cbiAgICAgICAgaWYgKHJpcHBsZSkge1xuICAgICAgICAgIHJpcHBsZS5hZGRSaXBwbGUoJGJ0bi5maW5kKCcubWJzYy1zZWdtZW50ZWQtY29udGVudCcpLCBldik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGV2LnR5cGUgPT0gJ21vdXNlZG93bicpIHtcbiAgICAgICAgJCQxKGRvY3VtZW50KS5vbignbW91c2Vtb3ZlJywgb25CdG5Nb3ZlKS5vbignbW91c2V1cCcsIG9uQnRuRW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkJ0bk1vdmUoZXYpIHtcbiAgICBpZiAoTWF0aC5hYnMoc3RhcnRYIC0gZ2V0Q29vcmQoZXYsICdYJykpID4gNyB8fCBNYXRoLmFicyhzdGFydFkgLSBnZXRDb29yZChldiwgJ1knKSkgPiA3KSB7XG4gICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkJ0bkVuZChldikge1xuICAgIGlmIChldi50eXBlID09ICd0b3VjaGVuZCcpIHtcbiAgICAgIC8vIFByZXZlbnRzIGlPUyBzY3JvbGwgb24gZG91YmxlIHRhcFxuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBzdG9wKCk7XG5cbiAgICBpZiAoZXYudHlwZSA9PSAnbW91c2V1cCcpIHtcbiAgICAgICQkMShkb2N1bWVudCkub2ZmKCdtb3VzZW1vdmUnLCBvbkJ0bk1vdmUpLm9mZignbW91c2V1cCcsIG9uQnRuRW5kKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICBjbGVhckludGVydmFsKHRpbWVyKTtcblxuICAgIGlmICgkYnRuKSB7XG4gICAgICAkYnRuLnJlbW92ZUNsYXNzKCdtYnNjLWFjdGl2ZScpO1xuXG4gICAgICBpZiAocmlwcGxlKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJpcHBsZS5yZW1vdmVSaXBwbGUoKTtcbiAgICAgICAgfSwgMTAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChpLCBzdCwgZXYpIHtcbiAgICBpZiAoIXJ1bm5pbmcgJiYgIWNoZWNrKGkpKSB7XG4gICAgICBpbmRleCA9IGk7XG4gICAgICBzdGVwID0gc3Q7XG4gICAgICBzb3VyY2UgPSBldjtcbiAgICAgIHJ1bm5pbmcgPSB0cnVlO1xuICAgICAgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgc2V0VGltZW91dCh0aWNrLCAxMDApO1xuICAgIH1cblxuICAgIHJldHVybiBydW5uaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gdGljaygpIHtcbiAgICBpZiAoJGJ0biAmJiAkYnRuLmhhc0NsYXNzKCdtYnNjLWRpc2FibGVkJykpIHtcbiAgICAgIHN0b3AoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocnVubmluZyB8fCAhY2hhbmdlZCkge1xuICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICBhY3Rpb24oaW5kZXgsIHN0ZXAsIHNvdXJjZSwgdGljayk7XG4gICAgfVxuXG4gICAgaWYgKHJ1bm5pbmcgJiYgZGVsYXkpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgdGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFjdGlvbihpbmRleCwgc3RlcCwgc291cmNlKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICRlbG0uZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICAgIHVubGlzdGVuKGVsLCAndG91Y2hzdGFydCcsIG9uQnRuU3RhcnQsIHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB1bmxpc3RlbihlbCwgJ21vdXNlZG93bicsIG9uQnRuU3RhcnQpO1xuICAgICAgdW5saXN0ZW4oZWwsICdrZXlkb3duJywgb25CdG5TdGFydCk7XG4gICAgICB1bmxpc3RlbihlbCwgJ3RvdWNobW92ZScsIG9uQnRuTW92ZSwge1xuICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHVubGlzdGVuKGVsLCAndG91Y2hlbmQnLCBvbkJ0bkVuZCk7XG4gICAgICB1bmxpc3RlbihlbCwgJ3RvdWNoY2FuY2VsJywgb25CdG5FbmQpO1xuICAgICAgdW5saXN0ZW4oZWwsICdrZXl1cCcsIG9uQnRuRW5kKTtcbiAgICB9KTtcbiAgfVxuXG4gICRlbG0uZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICBsaXN0ZW4oZWwsICd0b3VjaHN0YXJ0Jywgb25CdG5TdGFydCwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGxpc3RlbihlbCwgJ21vdXNlZG93bicsIG9uQnRuU3RhcnQpO1xuICAgIGxpc3RlbihlbCwgJ2tleWRvd24nLCBvbkJ0blN0YXJ0KTtcbiAgICBsaXN0ZW4oZWwsICd0b3VjaG1vdmUnLCBvbkJ0bk1vdmUsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcbiAgICBsaXN0ZW4oZWwsICd0b3VjaGVuZCcsIG9uQnRuRW5kKTtcbiAgICBsaXN0ZW4oZWwsICd0b3VjaGNhbmNlbCcsIG9uQnRuRW5kKTtcbiAgICBsaXN0ZW4oZWwsICdrZXl1cCcsIG9uQnRuRW5kKTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IHN0YXJ0LFxuICAgIHN0b3A6IHN0b3AsXG4gICAgZGVzdHJveTogZGVzdHJveVxuICB9O1xufVxuXG52YXIgU3RlcHBlciA9IGZ1bmN0aW9uIFN0ZXBwZXIoY29udHJvbCwgc2V0dGluZ3MpIHtcbiAgdmFyICRidG5QbHVzLFxuICAgICAgJGJ0bk1pbnVzLFxuICAgICAgJGNvbnRyb2xzLFxuICAgICAgY3NzQ2xhc3MgPSAnJyxcbiAgICAgIGRpc3BsYXlWYWx1ZSxcbiAgICAgIG1heCxcbiAgICAgIG1pbixcbiAgICAgIGlucHV0U3R5bGUsXG4gICAgICByaXBwbGUsXG4gICAgICBzY2FsZSxcbiAgICAgIHN0ZXAsXG4gICAgICBzdGVwcGVyLFxuICAgICAgcyxcbiAgICAgIHRoZW1lLFxuICAgICAgdmFsLFxuICAgICAgdGhhdCA9IHRoaXMsXG4gICAgICAkY29udHJvbCA9ICQkMShjb250cm9sKSxcbiAgICAgIHJlYWR5LFxuICAgICAgJHBhcmVudCxcbiAgICAgIG9sZCA9IHZhbDtcblxuICBmdW5jdGlvbiBvbkNoYW5nZSgpIHtcbiAgICB2YXIgdjtcblxuICAgIGlmICghY29udHJvbC5kaXNhYmxlZCkge1xuICAgICAgdiA9IHBhcnNlRmxvYXQoJCQxKHRoaXMpLnZhbCgpKTtcbiAgICAgIHNldFZhbHVlKGlzTmFOKHYpID8gdmFsIDogdik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tEaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gY29udHJvbC5kaXNhYmxlZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0ZXBWYWx1ZShpbmRleCwgZGlyKSB7XG4gICAgc2V0VmFsdWUodmFsICsgZGlyICogc3RlcCk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRWYWx1ZSh2LCBmaWxsLCBjaGFuZ2UpIHtcbiAgICBvbGQgPSB2YWw7XG5cbiAgICBpZiAoZmlsbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmaWxsID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNoYW5nZSA9IGZpbGw7XG4gICAgfVxuXG4gICAgdmFsID0gcm91bmQodik7XG4gICAgJGNvbnRyb2xzLnJlbW92ZUNsYXNzKCdtYnNjLWRpc2FibGVkJyk7XG5cbiAgICBpZiAoZmlsbCkge1xuICAgICAgJGNvbnRyb2wudmFsKHZhbCk7XG4gICAgfVxuXG4gICAgaWYgKHZhbCA9PSBtaW4pIHtcbiAgICAgICRidG5NaW51cy5hZGRDbGFzcygnbWJzYy1kaXNhYmxlZCcpO1xuICAgIH1cblxuICAgIGlmICh2YWwgPT0gbWF4KSB7XG4gICAgICAkYnRuUGx1cy5hZGRDbGFzcygnbWJzYy1kaXNhYmxlZCcpO1xuICAgIH1cblxuICAgIGlmICh2YWwgIT09IG9sZCAmJiBjaGFuZ2UpIHtcbiAgICAgICRjb250cm9sLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEF0dHIoYXR0ciwgZGVmLCBzdHIpIHtcbiAgICB2YXIgdiA9ICRjb250cm9sLmF0dHIoYXR0cik7XG4gICAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSAnJyA/IGRlZiA6IHN0ciA/IHYgOiArdjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdW5kKHYpIHtcbiAgICByZXR1cm4gK01hdGgubWluKG1heCwgTWF0aC5tYXgoTWF0aC5yb3VuZCh2IC8gc3RlcCkgKiBzdGVwLCBtaW4pKS50b0ZpeGVkKHNjYWxlKTtcbiAgfSAvLyBDYWxsIHRoZSBwYXJlbnQgY29uc3RydWN0b3JcblxuXG4gIEJhc2UuY2FsbCh0aGlzLCBjb250cm9sLCBzZXR0aW5ncywgdHJ1ZSk7XG4gIC8qIFRSSUFMRlVOQyAqL1xuXG4gIHRoYXQuZ2V0VmFsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2ID0gcGFyc2VGbG9hdCgkY29udHJvbC52YWwoKSk7XG4gICAgdiA9IGlzTmFOKHYpID8gdmFsIDogdjtcbiAgICByZXR1cm4gcm91bmQodik7XG4gIH07XG5cbiAgdGhhdC5zZXRWYWwgPSBmdW5jdGlvbiAodiwgZmlsbCwgY2hhbmdlKSB7XG4gICAgdiA9IHBhcnNlRmxvYXQodik7XG4gICAgc2V0VmFsdWUoaXNOYU4odikgPyB2YWwgOiB2LCBmaWxsLCBjaGFuZ2UpO1xuICB9O1xuXG4gIHRoYXQuX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmVhZHkgPSAkY29udHJvbC5wYXJlbnQoKS5oYXNDbGFzcygnbWJzYy1zdGVwcGVyJyk7XG4gICAgJHBhcmVudCA9IHJlYWR5ID8gJGNvbnRyb2wuY2xvc2VzdCgnLm1ic2Mtc3RlcHBlci1jb250JykgOiAkY29udHJvbC5wYXJlbnQoKTtcbiAgICBzID0gdGhhdC5zZXR0aW5ncztcbiAgICBtaW4gPSBzZXR0aW5ncy5taW4gPT09IHVuZGVmaW5lZCA/IGdldEF0dHIoJ21pbicsIHMubWluKSA6IHNldHRpbmdzLm1pbjtcbiAgICBtYXggPSBzZXR0aW5ncy5tYXggPT09IHVuZGVmaW5lZCA/IGdldEF0dHIoJ21heCcsIHMubWF4KSA6IHNldHRpbmdzLm1heDtcbiAgICBzdGVwID0gc2V0dGluZ3Muc3RlcCA9PT0gdW5kZWZpbmVkID8gZ2V0QXR0cignc3RlcCcsIHMuc3RlcCkgOiBzZXR0aW5ncy5zdGVwO1xuICAgIHNjYWxlID0gTWF0aC5hYnMoc3RlcCkgPCAxID8gKHN0ZXAgKyAnJykuc3BsaXQoJy4nKVsxXS5sZW5ndGggOiAwO1xuICAgIGlucHV0U3R5bGUgPSBzZXR0aW5ncy5pbnB1dFN0eWxlID09PSB1bmRlZmluZWQgPyBnZXRBdHRyKCdkYXRhLWlucHV0LXN0eWxlJywgcy5pbnB1dFN0eWxlLCB0cnVlKSA6IHNldHRpbmdzLmlucHV0U3R5bGU7XG4gICAgZGlzcGxheVZhbHVlID0gJGNvbnRyb2wuYXR0cignZGF0YS12YWwnKSB8fCBzLnZhbDtcbiAgICB2YWwgPSByb3VuZCgrY29udHJvbC52YWx1ZSB8fCAwKTtcbiAgICB0aGVtZSA9IG1vYmlzY3JvbGwudGhlbWVzLmZvcm1bcy50aGVtZV07XG4gICAgcmlwcGxlID0gdGhlbWUgJiYgdGhlbWUuYWRkUmlwcGxlID8gdGhlbWUgOiBudWxsO1xuXG4gICAgaWYgKCFyZWFkeSkge1xuICAgICAgJHBhcmVudC5hZGRDbGFzcygnbWJzYy1zdGVwcGVyLWNvbnQgbWJzYy1uby10b3VjaCBtYnNjLWNvbnRyb2wtdycpLmFkZENsYXNzKGlucHV0U3R5bGUgPT0gJ2JveCcgPyAnbWJzYy1pbnB1dC1ib3gnIDogJycpLmFkZENsYXNzKGlucHV0U3R5bGUgPT0gJ291dGxpbmUnID8gJ21ic2MtaW5wdXQtb3V0bGluZScgOiAnJykuYXBwZW5kKCc8c3BhbiBjbGFzcz1cIm1ic2Mtc2VnbWVudGVkIG1ic2Mtc3RlcHBlcicgKyAnXCI+PC9zcGFuPicpLmZpbmQoJy5tYnNjLXN0ZXBwZXInKS5hcHBlbmQoJzxzcGFuIGNsYXNzPVwibWJzYy1zZWdtZW50ZWQtaXRlbSBtYnNjLXN0ZXBwZXItY29udHJvbCBtYnNjLXN0ZXBwZXItbWludXMgJyArICh2YWwgPT0gbWluID8gJ21ic2MtZGlzYWJsZWQnIDogJycpICsgJ1wiIGRhdGEtc3RlcD1cIi0xXCIgdGFiaW5kZXg9XCIwXCI+PHNwYW4gY2xhc3M9XCJtYnNjLXNlZ21lbnRlZC1jb250ZW50XCI+PHNwYW4gY2xhc3M9XCJtYnNjLWljIG1ic2MtaWMtbWludXNcIj48L3NwYW4+PC9zcGFuPjwvc3Bhbj4nKS5hcHBlbmQoJzxzcGFuIGNsYXNzPVwibWJzYy1zZWdtZW50ZWQtaXRlbSBtYnNjLXN0ZXBwZXItY29udHJvbCBtYnNjLXN0ZXBwZXItcGx1cyAnICsgKHZhbCA9PSBtYXggPyAnbWJzYy1kaXNhYmxlZCcgOiAnJykgKyAnXCIgIGRhdGEtc3RlcD1cIjFcIiB0YWJpbmRleD1cIjBcIj48c3BhbiBjbGFzcz1cIm1ic2Mtc2VnbWVudGVkLWNvbnRlbnRcIj4gPHNwYW4gY2xhc3M9XCJtYnNjLWljIG1ic2MtaWMtcGx1c1wiPjwvc3Bhbj48L3NwYW4+PC9zcGFuPicpLnByZXBlbmQoJGNvbnRyb2wpO1xuICAgIH1cblxuICAgIGlmIChjc3NDbGFzcykge1xuICAgICAgJHBhcmVudC5yZW1vdmVDbGFzcyhjc3NDbGFzcykuZmluZCgnLm1ic2Mtc2VnbWVudGVkJykucmVtb3ZlQ2xhc3MoY3NzQ2xhc3MpO1xuICAgIH1cblxuICAgIGNzc0NsYXNzID0gJ21ic2MtJyArIHMudGhlbWUgKyAodGhlbWUuYmFzZVRoZW1lID8gJyBtYnNjLScgKyB0aGVtZS5iYXNlVGhlbWUgOiAnJykgKyAocy5ydGwgPyAnIG1ic2MtcnRsJyA6ICcgbWJzYy1sdHInKTtcbiAgICAkcGFyZW50LmFkZENsYXNzKGNzc0NsYXNzKS5maW5kKCcubWJzYy1zZWdtZW50ZWQnKS5hZGRDbGFzcyhjc3NDbGFzcyk7XG4gICAgJGJ0bk1pbnVzID0gJCQxKCcubWJzYy1zdGVwcGVyLW1pbnVzJywgJHBhcmVudCk7XG4gICAgJGJ0blBsdXMgPSAkJDEoJy5tYnNjLXN0ZXBwZXItcGx1cycsICRwYXJlbnQpO1xuICAgICRjb250cm9scyA9ICQkMSgnLm1ic2Mtc3RlcHBlci1jb250cm9sJywgJHBhcmVudCk7XG5cbiAgICBpZiAoIXJlYWR5KSB7XG4gICAgICBpZiAoZGlzcGxheVZhbHVlID09ICdsZWZ0Jykge1xuICAgICAgICAkcGFyZW50LmFkZENsYXNzKCdtYnNjLXN0ZXBwZXItdmFsLWxlZnQnKTtcbiAgICAgICAgJGNvbnRyb2wuYWZ0ZXIoJzxzcGFuIGNsYXNzPVwibWJzYy1zZWdtZW50ZWQtaXRlbVwiPjxzcGFuIGNsYXNzPVwibWJzYy1zZWdtZW50ZWQtY29udGVudFwiPjwvc3Bhbj48L3NwYW4+Jyk7XG4gICAgICB9IGVsc2UgaWYgKGRpc3BsYXlWYWx1ZSA9PSAncmlnaHQnKSB7XG4gICAgICAgICRwYXJlbnQuYWRkQ2xhc3MoJ21ic2Mtc3RlcHBlci12YWwtcmlnaHQnKTtcbiAgICAgICAgJGJ0blBsdXMuYWZ0ZXIoJzxzcGFuIGNsYXNzPVwibWJzYy1zZWdtZW50ZWQtaXRlbVwiPjxzcGFuIGNsYXNzPVwibWJzYy1zZWdtZW50ZWQtY29udGVudFwiPjwvc3Bhbj48L3NwYW4+Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkYnRuTWludXMuYWZ0ZXIoJzxzcGFuIGNsYXNzPVwibWJzYy1zZWdtZW50ZWQtaXRlbVwiPjxzcGFuIGNsYXNzPVwibWJzYy1zZWdtZW50ZWQtY29udGVudCBtYnNjLXN0ZXBwZXItdmFsXCI+PC9zcGFuPjwvc3Bhbj4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXN0ZXBwZXIpIHtcbiAgICAgICRjb250cm9sLm9uKCdjaGFuZ2UnLCBvbkNoYW5nZSk7XG4gICAgICBzdGVwcGVyID0gY3JlYXRlU3RlcHBlcigkY29udHJvbHMsIHN0ZXBWYWx1ZSwgMTUwLCBjaGVja0Rpc2FibGVkLCBmYWxzZSwgcmlwcGxlKTtcbiAgICB9XG5cbiAgICAkY29udHJvbC52YWwodmFsKS5hdHRyKCdkYXRhLXJvbGUnLCAnc3RlcHBlcicpLmF0dHIoJ21pbicsIG1pbikuYXR0cignbWF4JywgbWF4KS5hdHRyKCdzdGVwJywgc3RlcCkuYWRkQ2xhc3MoJ21ic2MtY29udHJvbCcpO1xuICAgIGNvbnRyb2wubWJzY0luc3QgPSB0aGF0O1xuICB9O1xuXG4gIHRoYXQuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgJGNvbnRyb2wucmVtb3ZlQ2xhc3MoJ21ic2MtY29udHJvbCcpLm9mZignY2hhbmdlJywgb25DaGFuZ2UpO1xuICAgIHN0ZXBwZXIuZGVzdHJveSgpO1xuICAgIGRlbGV0ZSBjb250cm9sLm1ic2NJbnN0O1xuICB9O1xuXG4gIHRoYXQuaW5pdCgpO1xufTtcblN0ZXBwZXIucHJvdG90eXBlID0ge1xuICBfY2xhc3M6ICdzdGVwcGVyJyxcbiAgX2hhc0RlZjogdHJ1ZSxcbiAgX2hhc1RoZW1lOiB0cnVlLFxuICBfaGFzTGFuZzogdHJ1ZSxcbiAgX2RlZmF1bHRzOiB7XG4gICAgbWluOiAwLFxuICAgIG1heDogMTAwLFxuICAgIHN0ZXA6IDFcbiAgfVxufTtcbmNsYXNzZXMuU3RlcHBlciA9IFN0ZXBwZXI7IC8vIEluaXQgbWJzYy1zdGVwcGVyIGVsZW1lbnRzIG9uIHBhZ2UgbG9hZFxuXG5hdXRvSW5pdCgnW21ic2Mtc3RlcHBlcl0nLCBTdGVwcGVyKTtcblxudmFyIFByb2dyZXNzQmFzZSA9IGZ1bmN0aW9uIFByb2dyZXNzQmFzZShlbG0sIHNldHRpbmdzLCBpbmhlcml0KSB7XG4gIHZhciAkZWxtLFxuICAgICAgJHBhcmVudCxcbiAgICAgIGNzc0NsYXNzLFxuICAgICAgcyxcbiAgICAgIHRoYXQgPSB0aGlzOyAvLyBDYWxsIHRoZSBwYXJlbnQgY29uc3RydWN0b3JcblxuICBCYXNlLmNhbGwodGhpcywgZWxtLCBzZXR0aW5ncywgdHJ1ZSk7XG4gIHRoYXQuX19pbml0ID0gbm9vcDtcbiAgdGhhdC5fX2Rlc3Ryb3kgPSBub29wO1xuXG4gIHRoYXQuX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHdhc0luaXQ7XG4gICAgcyA9IHRoYXQuc2V0dGluZ3M7XG4gICAgJGVsbSA9ICQkMShlbG0pOyAvLyBDaGVjayBpZiB0aGUgZWxlbWVudCB3YXMgYWxyZWFkeSBpbml0aWFsaXplZFxuXG4gICAgd2FzSW5pdCA9ICEhJHBhcmVudDtcbiAgICAkcGFyZW50ID0gJGVsbS5wYXJlbnQoKTtcbiAgICAkcGFyZW50ID0gJHBhcmVudC5oYXNDbGFzcygnbWJzYy1pbnB1dC13cmFwJykgPyAkcGFyZW50LnBhcmVudCgpIDogJHBhcmVudDtcbiAgICB0aGF0Ll8kcGFyZW50ID0gJHBhcmVudDtcblxuICAgIGlmIChjc3NDbGFzcykge1xuICAgICAgJHBhcmVudC5yZW1vdmVDbGFzcyhjc3NDbGFzcyk7XG4gICAgfVxuXG4gICAgY3NzQ2xhc3MgPSB0aGF0Ll9jc3MgKyAnIG1ic2MtcHJvZ3Jlc3MtdyBtYnNjLWNvbnRyb2wtdyAnICsgZ2V0Q3NzQ2xhc3Mocyk7XG4gICAgJHBhcmVudC5hZGRDbGFzcyhjc3NDbGFzcyk7XG4gICAgJGVsbS5hZGRDbGFzcygnbWJzYy1jb250cm9sJyk7XG5cbiAgICB0aGF0Ll9faW5pdCgpO1xuXG4gICAgaWYgKCF3YXNJbml0KSB7XG4gICAgICB0aGF0Ll9hdHRhY2hDaGFuZ2UoKTtcbiAgICB9IC8vIFNob3cgaW5pdGlhbCB2YWx1ZVxuXG5cbiAgICB0aGF0LnJlZnJlc2goKTtcbiAgICBlbG0ubWJzY0luc3QgPSB0aGF0O1xuICB9O1xuXG4gIHRoYXQuX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhhdC5fX2Rlc3Ryb3koKTtcblxuICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoY3NzQ2xhc3MpO1xuICAgICRlbG0ucmVtb3ZlQ2xhc3MoJ21ic2MtY29udHJvbCcpO1xuICAgIGRlbGV0ZSBlbG0ubWJzY0luc3Q7XG4gIH07XG5cbiAgaWYgKCFpbmhlcml0KSB7XG4gICAgdGhhdC5pbml0KCk7XG4gIH1cbn07XG5cbnZhciBTbGlkZXJCYXNlID0gZnVuY3Rpb24gU2xpZGVyQmFzZShlbG0sIHNldHRpbmdzLCBpbmhlcml0KSB7XG4gIHZhciAkZWxtLFxuICAgICAgJGhhbmRsZSxcbiAgICAgICRoYW5kbGVDb250LFxuICAgICAgJGhhbmRsZXMsXG4gICAgICAkbGlzdGVuZXJzLFxuICAgICAgJHBhcmVudCxcbiAgICAgICR0cmFjayxcbiAgICAgIGFjdGlvbixcbiAgICAgIGJhc2UsXG4gICAgICBjaGFuZ2VkLFxuICAgICAgZGlmZlgsXG4gICAgICBkaWZmWSxcbiAgICAgIGRpZmYsXG4gICAgICBlbmRYLFxuICAgICAgZW5kWSxcbiAgICAgIGhhbmRsZUluZGV4LFxuICAgICAgaXNIb3ZlcixcbiAgICAgIGlzUHJlc3NlZCxcbiAgICAgIGlzUnRsLFxuICAgICAgbGl2ZSxcbiAgICAgIG1heCxcbiAgICAgIG1pbixcbiAgICAgIG1vdmVkLFxuICAgICAgbXVsdGlwbGUsXG4gICAgICBvbGRWYWx1ZSxcbiAgICAgIHN0ZXAsXG4gICAgICBzLFxuICAgICAgc2NhbGUsXG4gICAgICBzdGFydFgsXG4gICAgICBzdGFydFksXG4gICAgICBzdGVwRGVjaW1hbCxcbiAgICAgIHRpbWVyLFxuICAgICAgdG90YWxXaWR0aCxcbiAgICAgIHZhbHVlLFxuICAgICAgdGhhdCA9IHRoaXMsXG4gICAgICBsYXN0VXBkYXRlID0gbmV3IERhdGUoKTtcblxuICBmdW5jdGlvbiBvblN0YXJ0KGV2KSB7XG4gICAgaWYgKGV2LnR5cGUgPT09ICdtb3VzZWRvd24nKSB7XG4gICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmICh0ZXN0VG91Y2goZXYsIHRoaXMpICYmICghYWN0aW9uIHx8IGlzSG92ZXIpICYmICFlbG0uZGlzYWJsZWQgJiYgIWVsbS5yZWFkT25seVxuICAgIC8qIFRSSUFMQ09ORCAqL1xuICAgICkge1xuICAgICAgICBpZiAocy5zdG9wUHJvcCkge1xuICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgYWN0aW9uID0gdHJ1ZTtcbiAgICAgICAgbW92ZWQgPSBmYWxzZTtcbiAgICAgICAgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICBzdGFydFggPSBnZXRDb29yZChldiwgJ1gnKTtcbiAgICAgICAgc3RhcnRZID0gZ2V0Q29vcmQoZXYsICdZJyk7XG4gICAgICAgIGVuZFggPSBzdGFydFg7XG4gICAgICAgICR0cmFjay5yZW1vdmVDbGFzcygnbWJzYy1wcm9ncmVzcy1hbmltJyk7XG4gICAgICAgICRoYW5kbGUgPSBtdWx0aXBsZSA/ICQkMSgnLm1ic2Mtc2xpZGVyLWhhbmRsZScsIHRoaXMpIDogJGhhbmRsZXM7XG5cbiAgICAgICAgaWYgKCRoYW5kbGVDb250KSB7XG4gICAgICAgICAgJGhhbmRsZUNvbnQucmVtb3ZlQ2xhc3MoJ21ic2MtaGFuZGxlLWN1cnInKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRoYW5kbGVDb250ID0gJGhhbmRsZS5wYXJlbnQoKS5hZGRDbGFzcygnbWJzYy1hY3RpdmUgbWJzYy1oYW5kbGUtY3VycicpO1xuICAgICAgICAkZWxtLmFkZENsYXNzKCdtYnNjLWFjdGl2ZScpO1xuICAgICAgICBoYW5kbGVJbmRleCA9ICskaGFuZGxlLmF0dHIoJ2RhdGEtaW5kZXgnKTtcbiAgICAgICAgdG90YWxXaWR0aCA9ICR0cmFja1swXS5vZmZzZXRXaWR0aDtcbiAgICAgICAgZGlmZiA9ICR0cmFja1swXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXG4gICAgICAgIGlmIChldi50eXBlID09PSAnbW91c2Vkb3duJykge1xuICAgICAgICAgIGlzUHJlc3NlZCA9IHRydWU7XG4gICAgICAgICAgJCQxKGRvY3VtZW50KS5vbignbW91c2Vtb3ZlJywgb25Nb3ZlKS5vbignbW91c2V1cCcsIG9uRW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldi50eXBlID09PSAnbW91c2VlbnRlcicpIHtcbiAgICAgICAgICBpc0hvdmVyID0gdHJ1ZTtcbiAgICAgICAgICAkJDEoZG9jdW1lbnQpLm9uKCdtb3VzZW1vdmUnLCBvbk1vdmUpO1xuICAgICAgICB9XG4gICAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbk1vdmUoZXYpIHtcbiAgICBpZiAoYWN0aW9uKSB7XG4gICAgICBlbmRYID0gZ2V0Q29vcmQoZXYsICdYJyk7XG4gICAgICBlbmRZID0gZ2V0Q29vcmQoZXYsICdZJyk7XG4gICAgICBkaWZmWCA9IGVuZFggLSBzdGFydFg7XG4gICAgICBkaWZmWSA9IGVuZFkgLSBzdGFydFk7XG5cbiAgICAgIGlmIChNYXRoLmFicyhkaWZmWCkgPiA1KSB7XG4gICAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1vdmVkIHx8IGlzUHJlc3NlZCB8fCBpc0hvdmVyKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhsYXN0VXBkYXRlIC0gbmV3IERhdGUoKSkgPiA1MCkge1xuICAgICAgICAgIGxhc3RVcGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgIHVwZGF0ZVNsaWRlcihlbmRYLCBzLnJvdW5kLCBsaXZlICYmICghaXNIb3ZlciB8fCBpc1ByZXNzZWQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobW92ZWQpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoZGlmZlkpID4gNyAmJiBldi50eXBlID09ICd0b3VjaG1vdmUnKSB7XG4gICAgICAgIGNsZWFuVXAoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkVuZChldikge1xuICAgIGlmIChhY3Rpb24pIHtcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIGlmICghbXVsdGlwbGUpIHtcbiAgICAgICAgJHRyYWNrLmFkZENsYXNzKCdtYnNjLXByb2dyZXNzLWFuaW0nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzSG92ZXIgJiYgIWlzUHJlc3NlZCkge1xuICAgICAgICB1cGRhdGVWYWx1ZSh2YWx1ZVtoYW5kbGVJbmRleF0sIGhhbmRsZUluZGV4LCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdXBkYXRlU2xpZGVyKGVuZFgsIHRydWUsIHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW1vdmVkICYmICFjaGFuZ2VkKSB7XG4gICAgICAgIGlmIChldi50eXBlID09ICd0b3VjaGVuZCcpIHtcbiAgICAgICAgICAvLyBQcmV2ZW50IGdob3N0IGNsaWNrXG4gICAgICAgICAgcHJldmVudENsaWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGF0Ll9vblRhcCh2YWx1ZVtoYW5kbGVJbmRleF0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXYudHlwZSA9PSAnbW91c2V1cCcpIHtcbiAgICAgICAgaXNQcmVzc2VkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChldi50eXBlID09ICdtb3VzZWxlYXZlJykge1xuICAgICAgICBpc0hvdmVyID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNIb3Zlcikge1xuICAgICAgICBjbGVhblVwKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25DYW5jZWwoKSB7XG4gICAgaWYgKGFjdGlvbikge1xuICAgICAgY2xlYW5VcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlKCkge1xuICAgIHZhciB2ID0gdGhhdC5fcmVhZFZhbHVlKCQkMSh0aGlzKSksXG4gICAgICAgIGkgPSArJCQxKHRoaXMpLmF0dHIoJ2RhdGEtaW5kZXgnKTtcblxuICAgIGlmICh2ICE9PSB2YWx1ZVtpXSkge1xuICAgICAgdmFsdWVbaV0gPSB2O1xuICAgICAgb2xkVmFsdWVbaV0gPSB2O1xuICAgICAgdXBkYXRlVmFsdWUodiwgaSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25DbGljayhldikge1xuICAgIC8vIFByZXZlbnQgcHJvcGFnYXRpbmcgY2xpY2sgdG8gbGFiZWxcbiAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uTGFiZWxDbGljayhldikge1xuICAgIC8vIFByZXZlbnQgY2hhbmdlIG9uIGxhYmVsIGNsaWNrIGZvciBzd2l0aGVzXG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uS2V5RG93bihldikge1xuICAgIHZhciBkaXI7XG5cbiAgICBpZiAoIWVsbS5kaXNhYmxlZCkge1xuICAgICAgc3dpdGNoIChldi5rZXlDb2RlKSB7XG4gICAgICAgIGNhc2UgMzg6XG4gICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgZGlyID0gMTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDQwOlxuICAgICAgICBjYXNlIDM3OlxuICAgICAgICAgIGRpciA9IC0xO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKCF0aW1lcikge1xuICAgICAgICAgIGhhbmRsZUluZGV4ID0gKyQkMSh0aGlzKS5hdHRyKCdkYXRhLWluZGV4Jyk7XG4gICAgICAgICAgdXBkYXRlVmFsdWUodmFsdWVbaGFuZGxlSW5kZXhdICsgc3RlcCAqIGRpciwgaGFuZGxlSW5kZXgsIHRydWUpO1xuICAgICAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdXBkYXRlVmFsdWUodmFsdWVbaGFuZGxlSW5kZXhdICsgc3RlcCAqIGRpciwgaGFuZGxlSW5kZXgsIHRydWUpO1xuICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbktleVVwKGV2KSB7XG4gICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICB0aW1lciA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBjbGVhblVwKCkge1xuICAgIGFjdGlvbiA9IGZhbHNlO1xuICAgICRoYW5kbGVDb250LnJlbW92ZUNsYXNzKCdtYnNjLWFjdGl2ZScpO1xuICAgICRlbG0ucmVtb3ZlQ2xhc3MoJ21ic2MtYWN0aXZlJyk7IC8vIERldGFjaCBkb2N1bWVudCBldmVudHNcblxuICAgICQkMShkb2N1bWVudCkub2ZmKCdtb3VzZW1vdmUnLCBvbk1vdmUpLm9mZignbW91c2V1cCcsIG9uRW5kKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNsaWRlcihwb3MsIHJvdW5kLCBmaWxsKSB7XG4gICAgdmFyIHBlcmNlbnQgPSByb3VuZCA/IE1hdGgubWluKE1hdGhbdGhhdC5fcm91bmRpbmcgfHwgJ3JvdW5kJ10oTWF0aC5tYXgoKHBvcyAtIGRpZmYpICogMTAwIC8gdG90YWxXaWR0aCwgMCkgLyBzY2FsZSAvIHN0ZXApICogc3RlcCAqIDEwMCAvIChtYXggLSBtaW4gKyBiYXNlKSwgMTAwKSA6IE1hdGgubWF4KDAsIE1hdGgubWluKChwb3MgLSBkaWZmKSAqIDEwMCAvIHRvdGFsV2lkdGgsIDEwMCkpO1xuXG4gICAgaWYgKGlzUnRsKSB7XG4gICAgICBwZXJjZW50ID0gMTAwIC0gcGVyY2VudDtcbiAgICB9XG5cbiAgICB1cGRhdGVWYWx1ZShNYXRoLnJvdW5kKChtaW4gLSBiYXNlICsgcGVyY2VudCAvIHNjYWxlKSAqIHN0ZXBEZWNpbWFsKSAvIHN0ZXBEZWNpbWFsLCBoYW5kbGVJbmRleCwgZmlsbCwgcGVyY2VudCk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVWYWx1ZSh2LCBpbmRleCwgZmlsbCwgcGVyY2VudCwgcmVmcmVzaCwgY2hhbmdlKSB7XG4gICAgdmFyICRoYW5kbGUgPSAkaGFuZGxlcy5lcShpbmRleCksXG4gICAgICAgICRoYW5kbGVDb250ID0gJGhhbmRsZS5wYXJlbnQoKTtcbiAgICB2ID0gTWF0aC5taW4obWF4LCBNYXRoLm1heCh2LCBtaW4pKTtcblxuICAgIGlmIChjaGFuZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2hhbmdlID0gZmlsbDtcbiAgICB9XG5cbiAgICBpZiAodGhhdC5fdXBkYXRlKSB7XG4gICAgICB2ID0gdGhhdC5fdXBkYXRlKHYsIHZhbHVlLCBpbmRleCwgcGVyY2VudCwgbXVsdGlwbGUsIHJlZnJlc2gsICRoYW5kbGVDb250KTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGhhbmRsZUNvbnQuY3NzKHtcbiAgICAgICAgbGVmdDogaXNSdGwgPyAnYXV0bycgOiAocGVyY2VudCB8fCBnZXRQZXJjZW50KHYsIG1pbiwgbWF4KSkgKyAnJScsXG4gICAgICAgIHJpZ2h0OiBpc1J0bCA/IChwZXJjZW50IHx8IGdldFBlcmNlbnQodiwgbWluLCBtYXgpKSArICclJyA6ICdhdXRvJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHYgPiBtaW4pIHtcbiAgICAgICRoYW5kbGVDb250LnJlbW92ZUNsYXNzKCdtYnNjLXNsaWRlci1zdGFydCcpO1xuICAgIH0gZWxzZSBpZiAodmFsdWVbaW5kZXhdID4gbWluIHx8IHJlZnJlc2gpIHtcbiAgICAgICRoYW5kbGVDb250LmFkZENsYXNzKCdtYnNjLXNsaWRlci1zdGFydCcpO1xuICAgIH0gLy8gU3RvcmUgbmV3IHZhbHVlXG5cblxuICAgIGlmIChmaWxsKSB7XG4gICAgICB2YWx1ZVtpbmRleF0gPSB2O1xuICAgIH0gLy8gQ2hlY2sgaWYgdmFsdWUgY2hhbmdlZFxuXG5cbiAgICBpZiAoZmlsbCAmJiBvbGRWYWx1ZVtpbmRleF0gIT0gdikge1xuICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICBvbGRWYWx1ZVtpbmRleF0gPSB2OyAvLyBTZXQgbmV3IHZhbHVlIHRvIHRoZSBpbnB1dFxuXG4gICAgICB0aGF0Ll9maWxsVmFsdWUodiwgaW5kZXgsIGNoYW5nZSk7XG4gICAgfVxuXG4gICAgJGhhbmRsZS5hdHRyKCdhcmlhLXZhbHVlbm93Jywgdik7XG4gIH0gLy8gQ2FsbCB0aGUgcGFyZW50IGNvbnN0cnVjdG9yXG5cblxuICBQcm9ncmVzc0Jhc2UuY2FsbCh0aGlzLCBlbG0sIHNldHRpbmdzLCB0cnVlKTtcbiAgdGhhdC5fb25UYXAgPSBub29wO1xuICB0aGF0Ll9fX2luaXQgPSBub29wO1xuICB0aGF0Ll9fX2Rlc3Ryb3kgPSBub29wO1xuXG4gIHRoYXQuX2F0dGFjaENoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAkZWxtLm9uKHMuY2hhbmdlRXZlbnQsIG9uQ2hhbmdlKTtcbiAgfTtcblxuICB0aGF0Ll9faW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgd2FzSW5pdDtcblxuICAgIGlmICgkaGFuZGxlcykge1xuICAgICAgd2FzSW5pdCA9IHRydWU7XG4gICAgICAkaGFuZGxlcy5wYXJlbnQoKS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICB0aGF0Ll9fX2luaXQoKTtcblxuICAgICRwYXJlbnQgPSB0aGF0Ll8kcGFyZW50O1xuICAgICR0cmFjayA9IHRoYXQuXyR0cmFjaztcbiAgICAkZWxtID0gJHBhcmVudC5maW5kKCdpbnB1dCcpO1xuICAgIHMgPSB0aGF0LnNldHRpbmdzO1xuICAgIG1pbiA9IHRoYXQuX21pbjtcbiAgICBtYXggPSB0aGF0Ll9tYXg7XG4gICAgYmFzZSA9IHRoYXQuX2Jhc2UgfHwgMDtcbiAgICBzdGVwID0gdGhhdC5fc3RlcDtcbiAgICBsaXZlID0gdGhhdC5fbGl2ZTtcbiAgICBzdGVwRGVjaW1hbCA9IHN0ZXAgJSAxICE9PSAwID8gMTAwIC8gKCsoc3RlcCAlIDEpLnRvRml4ZWQoMikgKiAxMDApIDogMTtcbiAgICBzY2FsZSA9IDEwMCAvIChtYXggLSBtaW4gKyBiYXNlKSB8fCAxMDA7XG4gICAgbXVsdGlwbGUgPSAkZWxtLmxlbmd0aCA+IDE7XG4gICAgaXNSdGwgPSBzLnJ0bDtcbiAgICB2YWx1ZSA9IFtdO1xuICAgIG9sZFZhbHVlID0gW107IC8vIFJlYWQgdmFsdWVzXG5cbiAgICAkZWxtLmVhY2goZnVuY3Rpb24gKGkpIHtcbiAgICAgIHZhbHVlW2ldID0gdGhhdC5fcmVhZFZhbHVlKCQkMSh0aGlzKSk7XG4gICAgICAkJDEodGhpcykuYXR0cignZGF0YS1pbmRleCcsIGkpO1xuICAgIH0pO1xuICAgICRoYW5kbGVzID0gJHBhcmVudC5maW5kKCcubWJzYy1zbGlkZXItaGFuZGxlJyk7XG4gICAgJGxpc3RlbmVycyA9ICRwYXJlbnQuZmluZChtdWx0aXBsZSA/ICcubWJzYy1zbGlkZXItaGFuZGxlLWNvbnQnIDogJy5tYnNjLXByb2dyZXNzLWNvbnQnKTsgLy8gQXR0YWNoIGV2ZW50c1xuXG4gICAgJGhhbmRsZXMub24oJ2tleWRvd24nLCBvbktleURvd24pLm9uKCdrZXl1cCcsIG9uS2V5VXApLm9uKCdibHVyJywgb25LZXlVcCk7XG4gICAgJGxpc3RlbmVycy5lYWNoKGZ1bmN0aW9uIChpLCBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuKGxpc3RlbmVyLCAndG91Y2hzdGFydCcsIG9uU3RhcnQsIHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBsaXN0ZW4obGlzdGVuZXIsICdtb3VzZWRvd24nLCBvblN0YXJ0KTtcbiAgICAgIGxpc3RlbihsaXN0ZW5lciwgJ3RvdWNoZW5kJywgb25FbmQpO1xuICAgICAgbGlzdGVuKGxpc3RlbmVyLCAndG91Y2hjYW5jZWwnLCBvbkVuZCk7XG4gICAgICBsaXN0ZW4obGlzdGVuZXIsICdwb2ludGVyY2FuY2VsJywgb25DYW5jZWwpO1xuXG4gICAgICBpZiAocy5ob3Zlcikge1xuICAgICAgICBsaXN0ZW4obGlzdGVuZXIsICdtb3VzZWVudGVyJywgb25TdGFydCk7XG4gICAgICAgIGxpc3RlbihsaXN0ZW5lciwgJ21vdXNlbGVhdmUnLCBvbkVuZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIXdhc0luaXQpIHtcbiAgICAgICRlbG0ub24oJ2NsaWNrJywgb25DbGljayk7XG4gICAgICAkcGFyZW50Lm9uKCdjbGljaycsIG9uTGFiZWxDbGljayk7IC8vIEF0dGFjaCB0byBkb2N1bWVudCB0byBhdm9pZCBub24tcGFzc2l2ZSBsaXN0ZW5lciB3YXJuaW5nc1xuXG4gICAgICBsaXN0ZW4oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBvbk1vdmUsIHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB0aGF0Ll9fZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAkcGFyZW50Lm9mZignY2xpY2snLCBvbkxhYmVsQ2xpY2spO1xuICAgICRlbG0ub2ZmKHMuY2hhbmdlRXZlbnQsIG9uQ2hhbmdlKS5vZmYoJ2NsaWNrJywgb25DbGljayk7XG4gICAgJGhhbmRsZXMub2ZmKCdrZXlkb3duJywgb25LZXlEb3duKS5vZmYoJ2tleXVwJywgb25LZXlVcCkub2ZmKCdibHVyJywgb25LZXlVcCk7XG4gICAgJGxpc3RlbmVycy5lYWNoKGZ1bmN0aW9uIChpLCBsaXN0ZW5lcikge1xuICAgICAgdW5saXN0ZW4obGlzdGVuZXIsICd0b3VjaHN0YXJ0Jywgb25TdGFydCwge1xuICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHVubGlzdGVuKGxpc3RlbmVyLCAnbW91c2Vkb3duJywgb25TdGFydCk7XG4gICAgICB1bmxpc3RlbihsaXN0ZW5lciwgJ3RvdWNoZW5kJywgb25FbmQpO1xuICAgICAgdW5saXN0ZW4obGlzdGVuZXIsICd0b3VjaGNhbmNlbCcsIG9uRW5kKTtcbiAgICAgIHVubGlzdGVuKGxpc3RlbmVyLCAncG9pbnRlcmNhbmNlbCcsIG9uQ2FuY2VsKTtcbiAgICAgIHVubGlzdGVuKGxpc3RlbmVyLCAnbW91c2VlbnRlcicsIG9uU3RhcnQpO1xuICAgICAgdW5saXN0ZW4obGlzdGVuZXIsICdtb3VzZWxlYXZlJywgb25FbmQpO1xuICAgICAgdW5saXN0ZW4oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCBvbk1vdmUsIHtcbiAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgdGhhdC5fX19kZXN0cm95KCk7XG4gIH07XG5cbiAgdGhhdC5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgICRlbG0uZWFjaChmdW5jdGlvbiAoaSkge1xuICAgICAgdXBkYXRlVmFsdWUodGhhdC5fcmVhZFZhbHVlKCQkMSh0aGlzKSksIGksIHRydWUsIGZhbHNlLCB0cnVlLCBmYWxzZSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdGhhdC5nZXRWYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG11bHRpcGxlID8gdmFsdWUuc2xpY2UoMCkgOiB2YWx1ZVswXTtcbiAgfTtcblxuICB0aGF0LnNldFZhbCA9IHRoYXQuX3NldFZhbCA9IGZ1bmN0aW9uICh2YWwsIGZpbGwsIGNoYW5nZSkge1xuICAgIGlmICghJCQxLmlzQXJyYXkodmFsKSkge1xuICAgICAgdmFsID0gW3ZhbF07XG4gICAgfVxuXG4gICAgJCQxLmVhY2godmFsLCBmdW5jdGlvbiAoaSwgdikge1xuICAgICAgdmFsdWVbaV0gPSB2O1xuICAgIH0pO1xuICAgICQkMS5lYWNoKHZhbCwgZnVuY3Rpb24gKGksIHYpIHtcbiAgICAgIHVwZGF0ZVZhbHVlKHYsIGksIHRydWUsIGZhbHNlLCB0cnVlLCBjaGFuZ2UpO1xuICAgIH0pO1xuICB9O1xuXG4gIGlmICghaW5oZXJpdCkge1xuICAgIHRoYXQuaW5pdCgpO1xuICB9XG59O1xuXG52YXIgU3dpdGNoID0gZnVuY3Rpb24gU3dpdGNoKGVsbSwgc2V0dGluZ3MpIHtcbiAgdmFyICRlbG0sXG4gICAgICAkcGFyZW50LFxuICAgICAgcyxcbiAgICAgIGZvcm1Db250cm9sLFxuICAgICAgdGhhdCA9IHRoaXM7XG4gIHNldHRpbmdzID0gc2V0dGluZ3MgfHwge307XG4gIGV4dGVuZCQxKHNldHRpbmdzLCB7XG4gICAgY2hhbmdlRXZlbnQ6ICdjbGljaycsXG4gICAgcm91bmQ6IGZhbHNlXG4gIH0pOyAvLyBDYWxsIHRoZSBwYXJlbnQgY29uc3RydWN0b3JcblxuICBTbGlkZXJCYXNlLmNhbGwodGhpcywgZWxtLCBzZXR0aW5ncywgdHJ1ZSk7XG5cbiAgdGhhdC5fcmVhZFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlbG0uY2hlY2tlZCA/IDEgOiAwO1xuICB9O1xuXG4gIHRoYXQuX2ZpbGxWYWx1ZSA9IGZ1bmN0aW9uICh2LCBpbmRleCwgY2hhbmdlKSB7XG4gICAgJGVsbS5wcm9wKCdjaGVja2VkJywgISF2KTtcblxuICAgIGlmIChjaGFuZ2UpIHtcbiAgICAgICRlbG0udHJpZ2dlcignY2hhbmdlJyk7XG4gICAgfVxuICB9O1xuXG4gIHRoYXQuX29uVGFwID0gZnVuY3Rpb24gKHYpIHtcbiAgICB0aGF0Ll9zZXRWYWwodiA/IDAgOiAxKTtcbiAgfTtcblxuICB0aGF0Ll9fX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcyA9IHRoYXQuc2V0dGluZ3M7XG4gICAgJGVsbSA9ICQkMShlbG0pO1xuICAgICRwYXJlbnQgPSAkZWxtLnBhcmVudCgpO1xuICAgICRwYXJlbnQuZmluZCgnLm1ic2Mtc3dpdGNoLXRyYWNrJykucmVtb3ZlKCk7XG4gICAgJHBhcmVudC5wcmVwZW5kKCRlbG0pO1xuICAgICRlbG0uYXR0cignZGF0YS1yb2xlJywgJ3N3aXRjaCcpLmFmdGVyKCc8c3BhbiBjbGFzcz1cIm1ic2MtcHJvZ3Jlc3MtY29udCBtYnNjLXN3aXRjaC10cmFja1wiPicgKyAnPHNwYW4gY2xhc3M9XCJtYnNjLXByb2dyZXNzLXRyYWNrIG1ic2MtcHJvZ3Jlc3MtYW5pbVwiPicgKyAnPHNwYW4gY2xhc3M9XCJtYnNjLXNsaWRlci1oYW5kbGUtY29udFwiPicgKyAnPHNwYW4gY2xhc3M9XCJtYnNjLXNsaWRlci1oYW5kbGUgbWJzYy1zd2l0Y2gtaGFuZGxlXCIgZGF0YS1pbmRleD1cIjBcIj4nICsgJzxzcGFuIGNsYXNzPVwibWJzYy1zd2l0Y2gtdHh0LW9mZlwiPicgKyBzLm9mZlRleHQgKyAnPC9zcGFuPicgKyAnPHNwYW4gY2xhc3M9XCJtYnNjLXN3aXRjaC10eHQtb25cIj4nICsgcy5vblRleHQgKyAnPC9zcGFuPicgKyAnPC9zcGFuPjwvc3Bhbj48L3NwYW4+PC9zcGFuPicpO1xuXG4gICAgaWYgKGZvcm1Db250cm9sKSB7XG4gICAgICBmb3JtQ29udHJvbC5kZXN0cm95KCk7XG4gICAgfVxuXG4gICAgZm9ybUNvbnRyb2wgPSBuZXcgRm9ybUNvbnRyb2woZWxtLCBzKTtcbiAgICB0aGF0Ll8kdHJhY2sgPSAkcGFyZW50LmZpbmQoJy5tYnNjLXByb2dyZXNzLXRyYWNrJyk7XG4gICAgdGhhdC5fbWluID0gMDtcbiAgICB0aGF0Ll9tYXggPSAxO1xuICAgIHRoYXQuX3N0ZXAgPSAxO1xuICB9O1xuXG4gIHRoYXQuX19fZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmb3JtQ29udHJvbC5kZXN0cm95KCk7XG4gIH07XG5cbiAgdGhhdC5nZXRWYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVsbS5jaGVja2VkO1xuICB9O1xuXG4gIHRoYXQuc2V0VmFsID0gZnVuY3Rpb24gKHZhbCwgZmlsbCwgY2hhbmdlKSB7XG4gICAgdGhhdC5fc2V0VmFsKHZhbCA/IDEgOiAwLCBmaWxsLCBjaGFuZ2UpO1xuICB9O1xuXG4gIHRoYXQuaW5pdCgpO1xufTtcblN3aXRjaC5wcm90b3R5cGUgPSB7XG4gIF9jbGFzczogJ3N3aXRjaCcsXG4gIF9jc3M6ICdtYnNjLXN3aXRjaCcsXG4gIF9oYXNUaGVtZTogdHJ1ZSxcbiAgX2hhc0xhbmc6IHRydWUsXG4gIF9oYXNEZWY6IHRydWUsXG4gIF9kZWZhdWx0czoge1xuICAgIHN0b3BQcm9wOiB0cnVlLFxuICAgIG9mZlRleHQ6ICdPZmYnLFxuICAgIG9uVGV4dDogJ09uJ1xuICB9XG59O1xuY2xhc3Nlcy5Td2l0Y2ggPSBTd2l0Y2g7IC8vIEluaXQgbWJzYy1zd2l0Y2ggZWxlbWVudHMgb24gcGFnZSBsb2FkXG5cbmF1dG9Jbml0KCdbbWJzYy1zd2l0Y2hdJywgU3dpdGNoKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG52YXIgUHJvZ3Jlc3MgPSBmdW5jdGlvbiBQcm9ncmVzcyhlbG0sIHNldHRpbmdzLCBpbmhlcml0KSB7XG4gIHZhciAkZGlzcGxheSxcbiAgICAgICRlbG0sXG4gICAgICAkcGFyZW50LFxuICAgICAgJHByb2dyZXNzLFxuICAgICAgJHRhcmdldCxcbiAgICAgICR0cmFjayxcbiAgICAgIG1pbixcbiAgICAgIG1heCxcbiAgICAgIGlucHV0U3R5bGUsXG4gICAgICBsYWJlbFN0eWxlLFxuICAgICAgcyxcbiAgICAgIHRlbXBsYXRlLFxuICAgICAgdmFsdWUsXG4gICAgICB2YWx1ZVRleHQsXG4gICAgICB0aGF0ID0gdGhpcztcblxuICBmdW5jdGlvbiBvbkNoYW5nZSgpIHtcbiAgICB2YXIgdiA9IGdldEF0dHIoJ3ZhbHVlJywgbWluKTtcblxuICAgIGlmICh2ICE9PSB2YWx1ZSkge1xuICAgICAgdXBkYXRlVmFsdWUodik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QXR0cihhdHRyLCBkZWYsIHN0cikge1xuICAgIHZhciB2ID0gJGVsbS5hdHRyKGF0dHIpO1xuICAgIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gJycgPyBkZWYgOiBzdHIgPyB2IDogK3Y7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVWYWx1ZSh2LCByZWZyZXNoLCBmaWxsLCBjaGFuZ2UpIHtcbiAgICB2ID1cbiAgICAvKiBUUklBTENPTkRSRVYgKi9cbiAgICBNYXRoLm1pbihtYXgsIE1hdGgubWF4KHYsIG1pbikpO1xuICAgICRwcm9ncmVzcy5jc3MoJ3dpZHRoJywgKHYgLSBtaW4pICogMTAwIC8gKG1heCAtIG1pbikgKyAnJScpO1xuXG4gICAgaWYgKGZpbGwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZmlsbCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjaGFuZ2UgPSBmaWxsO1xuICAgIH1cblxuICAgIGlmICh2ICE9PSB2YWx1ZSB8fCByZWZyZXNoKSB7XG4gICAgICAvLyBEaXNwbGF5IHZhbHVlXG4gICAgICB0aGF0Ll9kaXNwbGF5KHYpO1xuICAgIH1cblxuICAgIGlmICh2ICE9PSB2YWx1ZSkge1xuICAgICAgLy8gU2V0IG5ldyB2YWx1ZVxuICAgICAgdmFsdWUgPSB2OyAvLyBQdXQgbmV3IHZhbHVlIGluIHRoZSBwcm9ncmVzcyBlbGVtZW50XG5cbiAgICAgIGlmIChmaWxsKSB7XG4gICAgICAgICRlbG0uYXR0cigndmFsdWUnLCB2YWx1ZSk7XG4gICAgICB9IC8vIFRyaWdnZXIgY2hhbmdlIG9uIHRoZSBlbGVtZW50XG5cblxuICAgICAgaWYgKGNoYW5nZSkge1xuICAgICAgICAkZWxtLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBDYWxsIHRoZSBwYXJlbnQgY29uc3RydWN0b3JcblxuXG4gIFByb2dyZXNzQmFzZS5jYWxsKHRoaXMsIGVsbSwgc2V0dGluZ3MsIHRydWUpO1xuXG4gIHRoYXQuX2Rpc3BsYXkgPSBmdW5jdGlvbiAodikge1xuICAgIHZhbHVlVGV4dCA9IHRlbXBsYXRlICYmIHMucmV0dXJuQWZmaXggPyB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHt2YWx1ZVxcfS8sIHYpLnJlcGxhY2UoL1xce21heFxcfS8sIG1heCkgOiB2O1xuXG4gICAgaWYgKCR0YXJnZXQpIHtcbiAgICAgICR0YXJnZXQuaHRtbCh2YWx1ZVRleHQpO1xuICAgIH1cblxuICAgIGlmICgkZGlzcGxheSkge1xuICAgICAgJGRpc3BsYXkuaHRtbCh2YWx1ZVRleHQpO1xuICAgIH1cbiAgfTtcblxuICB0aGF0Ll9hdHRhY2hDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgJGVsbS5vbignY2hhbmdlJywgb25DaGFuZ2UpO1xuICB9O1xuXG4gIHRoYXQuX19pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkaXNwbGF5VmFsdWUsIGksIHN0ZXBMYWJlbHMsIHdhc0luaXQ7XG4gICAgcyA9IHRoYXQuc2V0dGluZ3M7XG4gICAgJGVsbSA9ICQkMShlbG0pOyAvLyBDaGVjayBpZiB0aGUgZWxlbWVudCB3YXMgYWxyZWFkeSBpbml0aWFsaXplZFxuXG4gICAgd2FzSW5pdCA9ICEhJHBhcmVudDtcbiAgICAkcGFyZW50ID0gdGhhdC5fJHBhcmVudDsgLy8gUmVhZCBzZXR0aW5ncyBmcm9tIGRhdGEgYXR0cmlidXRlcyBvciBzZXR0aW5ncyBvYmplY3RcblxuICAgIG1pbiA9IHRoYXQuX21pbiA9IHNldHRpbmdzLm1pbiA9PT0gdW5kZWZpbmVkID8gZ2V0QXR0cignbWluJywgcy5taW4pIDogc2V0dGluZ3MubWluO1xuICAgIG1heCA9IHRoYXQuX21heCA9IHNldHRpbmdzLm1heCA9PT0gdW5kZWZpbmVkID8gZ2V0QXR0cignbWF4Jywgcy5tYXgpIDogc2V0dGluZ3MubWF4O1xuICAgIGlucHV0U3R5bGUgPSBzZXR0aW5ncy5pbnB1dFN0eWxlID09PSB1bmRlZmluZWQgPyBnZXRBdHRyKCdkYXRhLWlucHV0LXN0eWxlJywgcy5pbnB1dFN0eWxlLCB0cnVlKSA6IHNldHRpbmdzLmlucHV0U3R5bGU7XG4gICAgbGFiZWxTdHlsZSA9IHNldHRpbmdzLmxhYmVsU3R5bGUgPT09IHVuZGVmaW5lZCA/IGdldEF0dHIoJ2RhdGEtbGFiZWwtc3R5bGUnLCBzLmxhYmVsU3R5bGUsIHRydWUpIDogc2V0dGluZ3MubGFiZWxTdHlsZTtcbiAgICB2YWx1ZSA9IGdldEF0dHIoJ3ZhbHVlJywgbWluKTtcbiAgICBkaXNwbGF5VmFsdWUgPSAkZWxtLmF0dHIoJ2RhdGEtdmFsJykgfHwgcy52YWw7XG4gICAgc3RlcExhYmVscyA9ICRlbG0uYXR0cignZGF0YS1zdGVwLWxhYmVscycpO1xuICAgIHN0ZXBMYWJlbHMgPSBzdGVwTGFiZWxzID8gSlNPTi5wYXJzZShzdGVwTGFiZWxzKSA6IHMuc3RlcExhYmVscztcbiAgICB0ZW1wbGF0ZSA9ICRlbG0uYXR0cignZGF0YS10ZW1wbGF0ZScpIHx8IChtYXggPT0gMTAwICYmICFzLnRlbXBsYXRlID8gJ3t2YWx1ZX0lJyA6IHMudGVtcGxhdGUpO1xuXG4gICAgaWYgKCF3YXNJbml0KSB7XG4gICAgICB3cmFwTGFiZWwoJHBhcmVudCwgbnVsbCwgaW5wdXRTdHlsZSwgbGFiZWxTdHlsZSwgZWxtKTtcbiAgICAgIGFkZEljb24oJGVsbSk7IC8vIEdlbmVyYXRlIHRyYWNrIGFuZCBwcm9ncmVzc1xuXG4gICAgICAkcGFyZW50LmZpbmQoJy5tYnNjLWlucHV0LXdyYXAnKS5hcHBlbmQoJzxzcGFuIGNsYXNzPVwibWJzYy1wcm9ncmVzcy1jb250XCI+PHNwYW4gY2xhc3M9XCJtYnNjLXByb2dyZXNzLXRyYWNrIG1ic2MtcHJvZ3Jlc3MtYW5pbVwiPjxzcGFuIGNsYXNzPVwibWJzYy1wcm9ncmVzcy1iYXJcIj48L3NwYW4+PC9zcGFuPjwvc3Bhbj4nKTtcbiAgICAgICRwcm9ncmVzcyA9IHRoYXQuXyRwcm9ncmVzcyA9ICRwYXJlbnQuZmluZCgnLm1ic2MtcHJvZ3Jlc3MtYmFyJyk7XG4gICAgICAkdHJhY2sgPSB0aGF0Ll8kdHJhY2sgPSAkcGFyZW50LmZpbmQoJy5tYnNjLXByb2dyZXNzLXRyYWNrJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChkaXNwbGF5VmFsdWUpIHtcbiAgICAgICAgJGRpc3BsYXkucmVtb3ZlKCk7XG4gICAgICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ21ic2MtcHJvZ3Jlc3MtdmFsdWUtJyArIChkaXNwbGF5VmFsdWUgPT0gJ3JpZ2h0JyA/ICdyaWdodCcgOiAnbGVmdCcpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0ZXBMYWJlbHMpIHtcbiAgICAgICAgJCQxKCcubWJzYy1wcm9ncmVzcy1zdGVwLWxhYmVsJywgJHRyYWNrKS5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICB9IC8vIFNldCBhdHRyaWJ1dGVzXG5cblxuICAgICRlbG0uYXR0cignbWluJywgbWluKS5hdHRyKCdtYXgnLCBtYXgpOyAvLyBHZW5lcmF0ZSB2YWx1ZSBjb250YWluZXIgb24gbGVmdCBvciByaWdodCBzaWRlXG5cbiAgICBpZiAoZGlzcGxheVZhbHVlKSB7XG4gICAgICAkZGlzcGxheSA9ICQkMSgnPHNwYW4gY2xhc3M9XCJtYnNjLXByb2dyZXNzLXZhbHVlXCI+PC9zcGFuPicpO1xuICAgICAgJHBhcmVudC5hZGRDbGFzcygnbWJzYy1wcm9ncmVzcy12YWx1ZS0nICsgKGRpc3BsYXlWYWx1ZSA9PSAncmlnaHQnID8gJ3JpZ2h0JyA6ICdsZWZ0JykpLmZpbmQoJy5tYnNjLWlucHV0LXdyYXAnKS5hcHBlbmQoJGRpc3BsYXkpO1xuICAgIH0gLy8gR2VuZXJhdGUgc3RlcCBsYWJlbHNcblxuXG4gICAgaWYgKHN0ZXBMYWJlbHMpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBzdGVwTGFiZWxzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICR0cmFjay5hcHBlbmQoJzxzcGFuIGNsYXNzPVwibWJzYy1wcm9ncmVzcy1zdGVwLWxhYmVsXCIgc3R5bGU9XCInICsgKHMucnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JykgKyAnOiAnICsgKHN0ZXBMYWJlbHNbaV0gLSBtaW4pICogMTAwIC8gKG1heCAtIG1pbikgKyAnJVwiID4nICsgc3RlcExhYmVsc1tpXSArICc8L3NwYW4+Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHRhcmdldCA9ICQkMSgkZWxtLmF0dHIoJ2RhdGEtdGFyZ2V0JykgfHwgcy50YXJnZXQpO1xuICB9O1xuXG4gIHRoYXQuX19kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ21ic2MtaWMtbGVmdCBtYnNjLWljLXJpZ2h0JykuZmluZCgnLm1ic2MtcHJvZ3Jlc3MtY29udCcpLnJlbW92ZSgpO1xuICAgICRwYXJlbnQuZmluZCgnLm1ic2MtaW5wdXQtaWMnKS5yZW1vdmUoKTtcbiAgICAkZWxtLm9mZignY2hhbmdlJywgb25DaGFuZ2UpO1xuICB9O1xuXG4gIHRoYXQucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB1cGRhdGVWYWx1ZShnZXRBdHRyKCd2YWx1ZScsIG1pbiksIHRydWUsIGZhbHNlKTtcbiAgfTtcblxuICB0aGF0LmdldFZhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgdGhhdC5zZXRWYWwgPSBmdW5jdGlvbiAodiwgZmlsbCwgY2hhbmdlKSB7XG4gICAgdXBkYXRlVmFsdWUodiwgdHJ1ZSwgZmlsbCwgY2hhbmdlKTtcbiAgfTtcblxuICBpZiAoIWluaGVyaXQpIHtcbiAgICB0aGF0LmluaXQoKTtcbiAgfVxufTtcblByb2dyZXNzLnByb3RvdHlwZSA9IHtcbiAgX2NsYXNzOiAncHJvZ3Jlc3MnLFxuICBfY3NzOiAnbWJzYy1wcm9ncmVzcycsXG4gIF9oYXNUaGVtZTogdHJ1ZSxcbiAgX2hhc0xhbmc6IHRydWUsXG4gIF9oYXNEZWY6IHRydWUsXG4gIF9kZWZhdWx0czoge1xuICAgIG1pbjogMCxcbiAgICBtYXg6IDEwMCxcbiAgICByZXR1cm5BZmZpeDogdHJ1ZVxuICB9XG59O1xuY2xhc3Nlcy5Qcm9ncmVzcyA9IFByb2dyZXNzOyAvLyBJbml0IG1ic2MtcHJvZ3Jlc3MgZWxlbWVudHMgb24gcGFnZSBsb2FkXG5cbmF1dG9Jbml0KCdbbWJzYy1wcm9ncmVzc10nLCBQcm9ncmVzcyk7XG5cbnZhciBTbGlkZXIgPSBmdW5jdGlvbiBTbGlkZXIoZWxtLCBzZXR0aW5ncywgaW5oZXJpdCkge1xuICB2YXIgJGVsbSxcbiAgICAgICRwYXJlbnQsXG4gICAgICAkcHJvZ3Jlc3MsXG4gICAgICAkdG9vbHRpcHMsXG4gICAgICAkdHJhY2ssXG4gICAgICBoYXNQcm9ncmVzcyxcbiAgICAgIGhhc1Rvb2x0aXAsXG4gICAgICBpc1JhbmdlLFxuICAgICAgaXNSdGwsXG4gICAgICBtYXgsXG4gICAgICBtaW4sXG4gICAgICBzdGVwLFxuICAgICAgcyxcbiAgICAgIHRoYXQgPSB0aGlzOyAvLyBDYWxsIHRoZSBwYXJlbnQgY29uc3RydWN0b3JcblxuICBQcm9ncmVzcy5jYWxsKHRoaXMsIGVsbSwgc2V0dGluZ3MsIHRydWUpO1xuICB2YXIgcHJvZ3Jlc3NJbml0ID0gdGhhdC5fX2luaXQsXG4gICAgICBwcm9ncmVzc0Rlc3Ryb3kgPSB0aGF0Ll9fZGVzdHJveTtcbiAgU2xpZGVyQmFzZS5jYWxsKHRoaXMsIGVsbSwgc2V0dGluZ3MsIHRydWUpO1xuICB2YXIgc2xpZGVySW5pdCA9IHRoYXQuX19pbml0LFxuICAgICAgc2xpZGVyRGVzdHJveSA9IHRoYXQuX19kZXN0cm95OyAvLyAtLS1cblxuICB0aGF0Ll9faW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9ncmVzc0luaXQoKTtcbiAgICBzbGlkZXJJbml0KCk7XG4gIH07XG5cbiAgdGhhdC5fX2Rlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvZ3Jlc3NEZXN0cm95KCk7XG4gICAgc2xpZGVyRGVzdHJveSgpO1xuICB9O1xuXG4gIHRoYXQuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2LCB2YWx1ZSwgaW5kZXgsIHBlcmNlbnQsIG11bHRpcGxlLCByZWZyZXNoLCAkaGFuZGxlQ29udCkge1xuICAgIGlmIChpc1JhbmdlKSB7XG4gICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgdiA9IE1hdGgubWluKHYsIHZhbHVlWzFdKTtcbiAgICAgICAgJHByb2dyZXNzLmNzcyh7XG4gICAgICAgICAgd2lkdGg6IGdldFBlcmNlbnQodmFsdWVbMV0sIG1pbiwgbWF4KSAtIGdldFBlcmNlbnQodiwgbWluLCBtYXgpICsgJyUnLFxuICAgICAgICAgIGxlZnQ6IGlzUnRsID8gJ2F1dG8nIDogZ2V0UGVyY2VudCh2LCBtaW4sIG1heCkgKyAnJScsXG4gICAgICAgICAgcmlnaHQ6IGlzUnRsID8gZ2V0UGVyY2VudCh2LCBtaW4sIG1heCkgKyAnJScgOiAnYXV0bydcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2ID0gTWF0aC5tYXgodiwgdmFsdWVbMF0pO1xuICAgICAgICAkcHJvZ3Jlc3MuY3NzKHtcbiAgICAgICAgICB3aWR0aDogZ2V0UGVyY2VudCh2LCBtaW4sIG1heCkgLSBnZXRQZXJjZW50KHZhbHVlWzBdLCBtaW4sIG1heCkgKyAnJSdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChtdWx0aXBsZSB8fCAhaGFzUHJvZ3Jlc3MpIHtcbiAgICAgICRoYW5kbGVDb250LmNzcyh7XG4gICAgICAgIGxlZnQ6IGlzUnRsID8gJ2F1dG8nIDogKHBlcmNlbnQgfHwgZ2V0UGVyY2VudCh2LCBtaW4sIG1heCkpICsgJyUnLFxuICAgICAgICByaWdodDogaXNSdGwgPyAocGVyY2VudCB8fCBnZXRQZXJjZW50KHYsIG1pbiwgbWF4KSkgKyAnJScgOiAnYXV0bydcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAkcHJvZ3Jlc3MuY3NzKCd3aWR0aCcsIChwZXJjZW50IHx8IGdldFBlcmNlbnQodiwgbWluLCBtYXgpKSArICclJyk7XG4gICAgfVxuXG4gICAgaWYgKGhhc1Rvb2x0aXApIHtcbiAgICAgICR0b29sdGlwcy5lcShpbmRleCkuaHRtbCh2KTtcbiAgICB9IC8vIERpc3BsYXkgdmFsdWUgaW4gdGhlIHNwZWNpZmllZCBjb250YWluZXIocylcblxuXG4gICAgaWYgKCFtdWx0aXBsZSAmJiAodmFsdWVbaW5kZXhdICE9IHYgfHwgcmVmcmVzaCkpIHtcbiAgICAgIHRoYXQuX2Rpc3BsYXkodik7XG4gICAgfSAvLyBSZXR1cm4gdmFsaWRhdGVkIHZhbHVlXG5cblxuICAgIHJldHVybiB2O1xuICB9O1xuXG4gIHRoYXQuX3JlYWRWYWx1ZSA9IGZ1bmN0aW9uICgkZWxtKSB7XG4gICAgcmV0dXJuICskZWxtLnZhbCgpO1xuICB9O1xuXG4gIHRoYXQuX2ZpbGxWYWx1ZSA9IGZ1bmN0aW9uICh2LCBpbmRleCwgY2hhbmdlKSB7XG4gICAgJGVsbS5lcShpbmRleCkudmFsKHYpO1xuXG4gICAgaWYgKGNoYW5nZSkge1xuICAgICAgJGVsbS5lcShpbmRleCkudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgfVxuICB9O1xuXG4gIHRoYXQuX21hcmt1cFJlYWR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpLCBzdGVwTnI7XG5cbiAgICBpZiAoaGFzVG9vbHRpcCkge1xuICAgICAgJHBhcmVudC5hZGRDbGFzcygnbWJzYy1zbGlkZXItaGFzLXRvb2x0aXAnKTtcbiAgICB9IC8vIEdlbmVyYXRlIHN0ZXAgbWFya3NcblxuXG4gICAgaWYgKHN0ZXAgIT0gMSkge1xuICAgICAgc3RlcE5yID0gKG1heCAtIG1pbikgLyBzdGVwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDw9IHN0ZXBOcjsgKytpKSB7XG4gICAgICAgICR0cmFjay5hcHBlbmQoJzxzcGFuIGNsYXNzPVwibWJzYy1zbGlkZXItc3RlcFwiIHN0eWxlPVwiJyArIChpc1J0bCA/ICdyaWdodCcgOiAnbGVmdCcpICsgJzonICsgMTAwIC8gc3RlcE5yICogaSArICclXCI+PC9zcGFuPicpO1xuICAgICAgfVxuICAgIH0gLy8gR2VuZXJhdGUgc2xpZGVyIGhhbmRsZXNcblxuXG4gICAgJGVsbS5lYWNoKGZ1bmN0aW9uIChpLCBlbG0pIHtcbiAgICAgIHZhciB2YWx1ZSA9ICtlbG0udmFsdWU7XG5cbiAgICAgIGlmIChlbG0udHlwZSA9PSAncmFuZ2UnKSB7XG4gICAgICAgIC8vIFNldCBtaW4gLyBtYXggLyBzdGVwIHByb3BlcnRpZXMgZm9yIGFsbCBpbnB1dHNcbiAgICAgICAgJCQxKGVsbSkuYXR0cignbWluJywgbWluKS5hdHRyKCdtYXgnLCBtYXgpLmF0dHIoJ3N0ZXAnLCBzdGVwKTtcbiAgICAgIH1cblxuICAgICAgKGhhc1Byb2dyZXNzID8gJHByb2dyZXNzIDogJHRyYWNrKS5hcHBlbmQoJzxzcGFuIGNsYXNzPVwibWJzYy1zbGlkZXItaGFuZGxlLWNvbnQnICsgKGlzUmFuZ2UgJiYgIWkgPyAnIG1ic2Mtc2xpZGVyLWhhbmRsZS1sZWZ0JyA6ICcnKSArIChpc1JhbmdlICYmICFpICYmIHZhbHVlID4gKG1heCAtIG1pbikgLyAyID8gJyBtYnNjLWhhbmRsZS1jdXJyJyA6ICcnKSArICdcIj4nICsgJzxzcGFuIHRhYmluZGV4PVwiMFwiIGNsYXNzPVwibWJzYy1zbGlkZXItaGFuZGxlXCIgYXJpYS12YWx1ZW1pbj1cIicgKyBtaW4gKyAnXCIgYXJpYS12YWx1ZW1heD1cIicgKyBtYXggKyAnXCIgZGF0YS1pbmRleD1cIicgKyBpICsgJ1wiPjwvc3Bhbj4nICsgKGhhc1Rvb2x0aXAgPyAnPHNwYW4gY2xhc3M9XCJtYnNjLXNsaWRlci10b29sdGlwXCI+PC9zcGFuPicgOiAnJykgKyAnPC9zcGFuPicpO1xuICAgIH0pO1xuICAgICR0b29sdGlwcyA9ICRwYXJlbnQuZmluZCgnLm1ic2Mtc2xpZGVyLXRvb2x0aXAnKTtcbiAgfTtcblxuICB0aGF0Ll9fX2luaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCRwYXJlbnQpIHtcbiAgICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ21ic2Mtc2xpZGVyLWhhcy10b29sdGlwJyk7XG5cbiAgICAgIGlmIChzdGVwICE9IDEpIHtcbiAgICAgICAgJCQxKCcubWJzYy1zbGlkZXItc3RlcCcsICR0cmFjaykucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHBhcmVudCA9IHRoYXQuXyRwYXJlbnQ7XG4gICAgJHRyYWNrID0gdGhhdC5fJHRyYWNrO1xuICAgICRwcm9ncmVzcyA9IHRoYXQuXyRwcm9ncmVzcztcbiAgICAkZWxtID0gJHBhcmVudC5maW5kKCdpbnB1dCcpO1xuICAgIHMgPSB0aGF0LnNldHRpbmdzO1xuICAgIG1pbiA9IHRoYXQuX21pbjtcbiAgICBtYXggPSB0aGF0Ll9tYXg7XG4gICAgdGhhdC5fc3RlcCA9IHN0ZXAgPSBzZXR0aW5ncy5zdGVwID09PSB1bmRlZmluZWQgPyArJGVsbS5hdHRyKCdzdGVwJykgfHwgcy5zdGVwIDogc2V0dGluZ3Muc3RlcDtcbiAgICB0aGF0Ll9saXZlID0gZ2V0Qm9vbEF0dHIoJ2RhdGEtbGl2ZScsIHMubGl2ZSwgJGVsbSk7XG4gICAgaGFzVG9vbHRpcCA9IGdldEJvb2xBdHRyKCdkYXRhLXRvb2x0aXAnLCBzLnRvb2x0aXAsICRlbG0pO1xuICAgIGhhc1Byb2dyZXNzID0gZ2V0Qm9vbEF0dHIoJ2RhdGEtaGlnaGxpZ2h0Jywgcy5oaWdobGlnaHQsICRlbG0pICYmICRlbG0ubGVuZ3RoIDwgMztcbiAgICBpc1JhbmdlID0gaGFzUHJvZ3Jlc3MgJiYgJGVsbS5sZW5ndGggPT0gMjtcbiAgICBpc1J0bCA9IHMucnRsO1xuXG4gICAgdGhhdC5fbWFya3VwUmVhZHkoKTtcbiAgfTtcblxuICBpZiAoIWluaGVyaXQpIHtcbiAgICB0aGF0LmluaXQoKTtcbiAgfVxufTtcblNsaWRlci5wcm90b3R5cGUgPSB7XG4gIF9jbGFzczogJ3Byb2dyZXNzJyxcbiAgX2NzczogJ21ic2MtcHJvZ3Jlc3MgbWJzYy1zbGlkZXInLFxuICBfaGFzVGhlbWU6IHRydWUsXG4gIF9oYXNMYW5nOiB0cnVlLFxuICBfaGFzRGVmOiB0cnVlLFxuICBfZGVmYXVsdHM6IHtcbiAgICBjaGFuZ2VFdmVudDogJ2NoYW5nZScsXG4gICAgc3RvcFByb3A6IHRydWUsXG4gICAgbWluOiAwLFxuICAgIG1heDogMTAwLFxuICAgIHN0ZXA6IDEsXG4gICAgbGl2ZTogdHJ1ZSxcbiAgICBoaWdobGlnaHQ6IHRydWUsXG4gICAgcm91bmQ6IHRydWUsXG4gICAgcmV0dXJuQWZmaXg6IHRydWVcbiAgfVxufTtcbmNsYXNzZXMuU2xpZGVyID0gU2xpZGVyOyAvLyBJbml0IG1ic2Mtc2xpZGVyIGVsZW1lbnRzIG9uIHBhZ2UgbG9hZFxuXG5hdXRvSW5pdCgnW21ic2Mtc2xpZGVyXScsIFNsaWRlcik7XG5cbnZhciBSYXRpbmcgPSBmdW5jdGlvbiBSYXRpbmcoZWxtLCBzZXR0aW5ncywgaW5oZXJpdCkge1xuICB2YXIgJHByb2dyZXNzLFxuICAgICAgJHRyYWNrLFxuICAgICAgbWF4LFxuICAgICAgbWluLFxuICAgICAgZW1wdHksXG4gICAgICBmaWxsZWQsXG4gICAgICBzLFxuICAgICAgdGhhdCA9IHRoaXMsXG4gICAgICAkZWxtID0gJCQxKGVsbSk7IC8vIENhbGwgdGhlIHBhcmVudCBjb25zdHJ1Y3RvclxuXG4gIFNsaWRlci5jYWxsKHRoaXMsIGVsbSwgc2V0dGluZ3MsIHRydWUpO1xuXG4gIHRoYXQuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2LCB2YWx1ZSwgaW5kZXgsIHBlcmNlbnQsIG11bHRpcGxlLCByZWZyZXNoKSB7XG4gICAgJHByb2dyZXNzLmNzcygnd2lkdGgnLCBnZXRQZXJjZW50KHYsIDAsIG1heCkgKyAnJScpOyAvLyBEaXNwbGF5IHZhbHVlIGluIHRoZSBzcGVjaWZpZWQgY29udGFpbmVyKHMpXG5cbiAgICBpZiAoIW11bHRpcGxlICYmICh2YWx1ZVtpbmRleF0gIT0gdiB8fCByZWZyZXNoKSkge1xuICAgICAgdGhhdC5fZGlzcGxheSh2KTtcbiAgICB9IC8vIFJldHVybiB2YWxpZGF0ZWQgdmFsdWVcblxuXG4gICAgcmV0dXJuIHY7XG4gIH07XG5cbiAgdGhhdC5fbWFya3VwUmVhZHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGksXG4gICAgICAgIGVtcHR5U3RyaW5nID0gJycsXG4gICAgICAgIGZpbGxlZFN0cmluZyA9ICcnO1xuICAgICR0cmFjayA9IHRoYXQuXyR0cmFjaztcbiAgICAkcHJvZ3Jlc3MgPSB0aGF0Ll8kcHJvZ3Jlc3M7XG4gICAgcyA9IHRoYXQuc2V0dGluZ3M7XG4gICAgbWluID0gdGhhdC5fbWluO1xuICAgIG1heCA9IHRoYXQuX21heDtcbiAgICB0aGF0Ll9iYXNlID0gbWluO1xuICAgIHRoYXQuX3JvdW5kaW5nID0gcy5ydGwgPyAnZmxvb3InIDogJ2NlaWwnO1xuICAgIGVtcHR5ID0gJGVsbS5hdHRyKCdkYXRhLWVtcHR5JykgfHwgcy5lbXB0eTtcbiAgICBmaWxsZWQgPSAkZWxtLmF0dHIoJ2RhdGEtZmlsbGVkJykgfHwgcy5maWxsZWQ7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbWF4OyArK2kpIHtcbiAgICAgIGVtcHR5U3RyaW5nICs9ICc8c3BhbiBjbGFzcz1cIm1ic2MtaWMgbWJzYy1pYy0nICsgZW1wdHkgKyAnXCI+PC9zcGFuPic7XG4gICAgICBmaWxsZWRTdHJpbmcgKz0gJzxzcGFuIGNsYXNzPVwibWJzYy1pYyBtYnNjLWljLScgKyBmaWxsZWQgKyAnXCI+PC9zcGFuPic7XG4gICAgfVxuXG4gICAgJHRyYWNrLmh0bWwoZW1wdHlTdHJpbmcpO1xuICAgICR0cmFjay5hcHBlbmQoJHByb2dyZXNzKTtcbiAgICAkcHJvZ3Jlc3MuaHRtbChmaWxsZWRTdHJpbmcpO1xuICAgICR0cmFjay5hcHBlbmQoJzxzcGFuIGNsYXNzPVwibWJzYy1yYXRpbmctaGFuZGxlLWNvbnQnICsgJ1wiPicgKyAnPHNwYW4gdGFiaW5kZXg9XCIwXCIgY2xhc3M9XCJtYnNjLXNsaWRlci1oYW5kbGVcIiBhcmlhLXZhbHVlbWluPVwiJyArIG1pbiArICdcIiBhcmlhLXZhbHVlbWF4PVwiJyArIG1heCArICdcIiBkYXRhLWluZGV4PVwiMFwiPjwvc3Bhbj4nICsgJzwvc3Bhbj4nKTtcbiAgfTtcblxuICBpZiAoIWluaGVyaXQpIHtcbiAgICB0aGF0LmluaXQoKTtcbiAgfVxufTtcblJhdGluZy5wcm90b3R5cGUgPSB7XG4gIF9jbGFzczogJ3Byb2dyZXNzJyxcbiAgX2NzczogJ21ic2MtcHJvZ3Jlc3MgbWJzYy1yYXRpbmcnLFxuICBfaGFzVGhlbWU6IHRydWUsXG4gIF9oYXNMYW5nOiB0cnVlLFxuICBfaGFzRGVmOiB0cnVlLFxuICBfZGVmYXVsdHM6IHtcbiAgICBjaGFuZ2VFdmVudDogJ2NoYW5nZScsXG4gICAgc3RvcFByb3A6IHRydWUsXG4gICAgbWluOiAxLFxuICAgIG1heDogNSxcbiAgICBzdGVwOiAxLFxuICAgIGxpdmU6IHRydWUsXG4gICAgcm91bmQ6IHRydWUsXG4gICAgaG92ZXI6IHRydWUsXG4gICAgaGlnaGxpZ2h0OiB0cnVlLFxuICAgIHJldHVybkFmZml4OiB0cnVlLFxuICAgIGVtcHR5OiAnc3RhcicsXG4gICAgZmlsbGVkOiAnc3RhcjMnXG4gIH1cbn07XG5jbGFzc2VzLlJhdGluZyA9IFJhdGluZzsgLy8gSW5pdCBtYnNjLXJhdGluZyBlbGVtZW50cyBvbiBwYWdlIGxvYWRcblxuYXV0b0luaXQoJ1ttYnNjLXJhdGluZ10nLCBSYXRpbmcpO1xuXG52YXIgbnIgPSAxO1xudmFyIENvbGxhcHNpYmxlQmFzZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbGxhcHNpYmxlQmFzZShlbG0sIHNldHRpbmdzKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBjb250ZW50O1xuICAgIHZhciAkaGVhZGVyO1xuICAgIHZhciAkY29udGVudDtcbiAgICB2YXIgJGVsbSA9ICQkMShlbG0pO1xuICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICB0aGlzLl9pc09wZW4gPSBzZXR0aW5ncy5pc09wZW4gfHwgZmFsc2U7XG4gICAgJGVsbS5hZGRDbGFzcygnbWJzYy1jb2xsYXBzaWJsZSAnICsgKHRoaXMuX2lzT3BlbiA/ICdtYnNjLWNvbGxhcHNpYmxlLW9wZW4nIDogJycpKTtcblxuICAgIGlmICgkZWxtLmhhc0NsYXNzKCdtYnNjLWNhcmQnKSkge1xuICAgICAgLy8gY2FyZCBlbmhhbmNlXG4gICAgICAkaGVhZGVyID0gJGVsbS5maW5kKCcubWJzYy1jYXJkLWhlYWRlcicpLmVxKDApLmFkZENsYXNzKCdtYnNjLWNvbGxhcHNpYmxlLWhlYWRlcicpO1xuICAgICAgJGNvbnRlbnQgPSAkZWxtLmZpbmQoJy5tYnNjLWNhcmQtY29udGVudCcpLmVxKDApLmFkZENsYXNzKCdtYnNjLWNvbGxhcHNpYmxlLWNvbnRlbnQnKTtcbiAgICB9IGVsc2UgaWYgKCRlbG0uaGFzQ2xhc3MoJ21ic2MtZm9ybS1ncm91cCcpIHx8ICRlbG0uaGFzQ2xhc3MoJ21ic2MtZm9ybS1ncm91cC1pbnNldCcpKSB7XG4gICAgICAvLyBmb3JtIGdyb3VwIGVuaGFuY2VcbiAgICAgICRoZWFkZXIgPSAkZWxtLmZpbmQoJy5tYnNjLWZvcm0tZ3JvdXAtdGl0bGUnKS5lcSgwKS5hZGRDbGFzcygnbWJzYy1jb2xsYXBzaWJsZS1oZWFkZXInKTtcbiAgICAgICRjb250ZW50ID0gJGVsbS5maW5kKCcubWJzYy1mb3JtLWdyb3VwLWNvbnRlbnQnKS5lcSgwKS5hZGRDbGFzcygnbWJzYy1jb2xsYXBzaWJsZS1jb250ZW50Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGl0IGlzIHVzZWQgaW5kZXBlbmRlbnRseVxuICAgICAgJGhlYWRlciA9ICRlbG0uZmluZCgnLm1ic2MtY29sbGFwc2libGUtaGVhZGVyJykuZXEoMCk7XG4gICAgICAkY29udGVudCA9ICRlbG0uZmluZCgnLm1ic2MtY29sbGFwc2libGUtY29udGVudCcpLmVxKDApO1xuICAgIH1cblxuICAgIGNvbnRlbnQgPSAkY29udGVudFswXTtcblxuICAgIGlmIChjb250ZW50ICYmICFjb250ZW50LmlkKSB7XG4gICAgICBjb250ZW50LmlkID0gJ21ic2MtY29sbGFwc2libGUtJyArIG5yKys7XG4gICAgfVxuXG4gICAgaWYgKCRoZWFkZXIubGVuZ3RoICYmIGNvbnRlbnQpIHtcbiAgICAgIHZhciAkY29sbGFwc2libGVJY29uID0gJCQxKCc8c3BhbiBjbGFzcz1cIm1ic2MtY29sbGFwc2libGUtaWNvbiBtYnNjLWljIG1ic2MtaWMtYXJyb3ctZG93bjVcIj48L3NwYW4+Jyk7XG4gICAgICB0YXAodGhpcywgJGhlYWRlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICBfdGhpcy5jb2xsYXBzZSgpO1xuICAgICAgfSk7XG4gICAgICAkaGVhZGVyLmF0dHIoJ3JvbGUnLCAnYnV0dG9uJykuYXR0cignYXJpYS1leHBhbmRlZCcsIHRoaXMuX2lzT3BlbikuYXR0cignYXJpYS1jb250cm9scycsIGNvbnRlbnQuaWQpLmF0dHIoJ3RhYmluZGV4JywgJzAnKS5vbignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bikub24oJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bikuYXBwZW5kKCRjb2xsYXBzaWJsZUljb24pO1xuICAgIH1cblxuICAgIGVsbS5tYnNjSW5zdCA9IHRoaXM7XG4gICAgdGhpcy5fJGhlYWRlciA9ICRoZWFkZXI7XG4gICAgdGhpcy5fJGNvbnRlbnQgPSAkY29udGVudDtcbiAgICB0aGlzLl8kZWxtID0gJGVsbTtcbiAgICB0aGlzLl8kYWNjb3JkaW9uUGFyZW50ID0gJGVsbS5wYXJlbnQoJ1ttYnNjLWFjY29yZGlvbl0sIG1ic2MtYWNjb3JkaW9uLCAubWJzYy1hY2NvcmRpb24nKTtcbiAgICB0aGlzLnNob3cgPSB0aGlzLnNob3cuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhpZGUgPSB0aGlzLmhpZGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLnRvZ2dsZSA9IHRoaXMudG9nZ2xlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbktleURvd24gPSB0aGlzLm9uS2V5RG93bi5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Nb3VzZURvd24gPSB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ29sbGFwc2libGVCYXNlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29sbGFwc2UgPSBmdW5jdGlvbiBjb2xsYXBzZShzaG93KSB7XG4gICAgdmFyICRlbG0gPSB0aGlzLl8kZWxtO1xuICAgIHZhciAkY29udGVudCA9IHRoaXMuXyRjb250ZW50O1xuXG4gICAgdmFyIHJlbW92ZUhlaWdodCA9IGZ1bmN0aW9uIHJlbW92ZUhlaWdodCgpIHtcbiAgICAgICRjb250ZW50Lm9mZigndHJhbnNpdGlvbmVuZCcsIHJlbW92ZUhlaWdodCkuY3NzKCdoZWlnaHQnLCAnJyk7XG4gICAgfTtcblxuICAgIGlmIChzaG93ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHNob3cgPSAhdGhpcy5faXNPcGVuO1xuICAgIH1cblxuICAgIGlmIChzaG93ICYmIHRoaXMuX2lzT3BlbiB8fCAhc2hvdyAmJiAhdGhpcy5faXNPcGVuIHx8ICEkY29udGVudC5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoc2hvdykge1xuICAgICAgaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgJGNvbnRlbnQub24oJ3RyYW5zaXRpb25lbmQnLCByZW1vdmVIZWlnaHQpLmNzcygnaGVpZ2h0JywgJGNvbnRlbnRbMF0uc2Nyb2xsSGVpZ2h0KTtcbiAgICAgIH1cblxuICAgICAgJGVsbS5hZGRDbGFzcygnbWJzYy1jb2xsYXBzaWJsZS1vcGVuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXNUcmFuc2l0aW9uKSB7XG4gICAgICAgICRjb250ZW50LmNzcygnaGVpZ2h0JywgZ2V0Q29tcHV0ZWRTdHlsZSgkY29udGVudFswXSkuaGVpZ2h0KTtcbiAgICAgIH1cblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICRjb250ZW50LmNzcygnaGVpZ2h0JywgMCk7XG4gICAgICAgICRlbG0ucmVtb3ZlQ2xhc3MoJ21ic2MtY29sbGFwc2libGUtb3BlbicpO1xuICAgICAgfSwgNTApO1xuICAgIH1cblxuICAgIGlmIChzaG93ICYmIHRoaXMuXyRhY2NvcmRpb25QYXJlbnQpIHtcbiAgICAgIHRoaXMuXyRhY2NvcmRpb25QYXJlbnQuZmluZCgnLm1ic2MtY29sbGFwc2libGUtb3BlbicpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyAhPT0gJGVsbVswXSkge1xuICAgICAgICAgIHRoaXMubWJzY0luc3QuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLl9pc09wZW4gPSBzaG93O1xuXG4gICAgdGhpcy5fJGhlYWRlci5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdGhpcy5faXNPcGVuKTtcbiAgfTtcblxuICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgdGhpcy5jb2xsYXBzZSh0cnVlKTtcbiAgfTtcblxuICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgdGhpcy5jb2xsYXBzZShmYWxzZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRvZ2dsZSA9IGZ1bmN0aW9uIHRvZ2dsZSgpIHtcbiAgICB0aGlzLmNvbGxhcHNlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIHRoaXMuXyRlbG0ucmVtb3ZlQ2xhc3MoJ21ic2MtY29sbGFwc2libGUgbWJzYy1jb2xsYXBzaWJsZS1vcGVuJyk7XG5cbiAgICB0aGlzLl8kY29udGVudC5yZW1vdmVDbGFzcygnbWJzYy1jb2xsYXBzaWJsZS1jb250ZW50Jyk7XG5cbiAgICB0aGlzLl8kaGVhZGVyLnJlbW92ZUNsYXNzKCdtYnNjLWNvbGxhcHNpYmxlLWhlYWRlcicpLm9mZignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bikub2ZmKCdrZXlkb3duJywgdGhpcy5vbktleURvd24pLmZpbmQoJy5tYnNjLWNvbGxhcHNpYmxlLWljb24nKS5yZW1vdmUoKTtcblxuICAgIHRhcE9mZih0aGlzLl8kaGVhZGVyKTtcbiAgfTtcblxuICBfcHJvdG8ub25LZXlEb3duID0gZnVuY3Rpb24gb25LZXlEb3duKGV2KSB7XG4gICAgaWYgKGV2LndoaWNoID09PSAzMiB8fCBldi5rZXlDb2RlID09IDEzKSB7XG4gICAgICAvL3NwYWNlIG9yIGVudGVyIFxuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuY29sbGFwc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uTW91c2VEb3duID0gZnVuY3Rpb24gb25Nb3VzZURvd24oZXYpIHtcbiAgICAvLyBwcmV2ZW50IGZvY3VzIG9uIG1vdXNlIGRvd25cbiAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICB9O1xuXG4gIHJldHVybiBDb2xsYXBzaWJsZUJhc2U7XG59KCk7XG5jbGFzc2VzLkNvbGxhcHNpYmxlQmFzZSA9IENvbGxhcHNpYmxlQmFzZTtcblxudmFyIGlkJDEgPSAwO1xuXG5mdW5jdGlvbiBpbml0Q29udHJvbHMoJGN0eCwgY29udHJvbHMsIHMsIHNoYWxsb3cpIHtcbiAgJCQxKCdpbnB1dCxzZWxlY3QsdGV4dGFyZWEscHJvZ3Jlc3MsYnV0dG9uJywgJGN0eCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbnRyb2wgPSB0aGlzLFxuICAgICAgICAkY29udHJvbCA9ICQkMShjb250cm9sKSxcbiAgICAgICAgLy8kcGFyZW50ID0gJGNvbnRyb2wucGFyZW50KCksXG4gICAgdHlwZSA9IGdldENvbnRyb2xUeXBlKCRjb250cm9sKTsgLy8gU2tpcCBlbGVtZW50cyB3aXRoIGRhdGEtZW5oYW5jZT1cImZhbHNlXCJcblxuICAgIGlmICgkY29udHJvbC5hdHRyKCdkYXRhLWVuaGFuY2UnKSAhPSAnZmFsc2UnXG4gICAgLyogVFJJQUxDT05EICovXG4gICAgKSB7XG4gICAgICAgIGlmICgkY29udHJvbC5oYXNDbGFzcygnbWJzYy1jb250cm9sJykpIHtcbiAgICAgICAgICBpZiAoY29udHJvbC5tYnNjSW5zdCkge1xuICAgICAgICAgICAgY29udHJvbC5tYnNjSW5zdC5vcHRpb24oe1xuICAgICAgICAgICAgICB0aGVtZTogcy50aGVtZSxcbiAgICAgICAgICAgICAgbGFuZzogcy5sYW5nLFxuICAgICAgICAgICAgICBydGw6IHMucnRsLFxuICAgICAgICAgICAgICBvblRleHQ6IHMub25UZXh0LFxuICAgICAgICAgICAgICBvZmZUZXh0OiBzLm9mZlRleHQsXG4gICAgICAgICAgICAgIHN0b3BQcm9wOiBzLnN0b3BQcm9wXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFjb250cm9sLmlkKSB7XG4gICAgICAgICAgICBjb250cm9sLmlkID0gJ21ic2MtZm9ybS1jb250cm9sLScgKyArK2lkJDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdidXR0b24nOlxuICAgICAgICAgICAgY2FzZSAnc3VibWl0JzpcbiAgICAgICAgICAgICAgY29udHJvbHNbY29udHJvbC5pZF0gPSBuZXcgQnV0dG9uKGNvbnRyb2wsIHtcbiAgICAgICAgICAgICAgICB0aGVtZTogcy50aGVtZSxcbiAgICAgICAgICAgICAgICBydGw6IHMucnRsLFxuICAgICAgICAgICAgICAgIHRhcDogcy50YXBcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdzd2l0Y2gnOlxuICAgICAgICAgICAgICBjb250cm9sc1tjb250cm9sLmlkXSA9IG5ldyBTd2l0Y2goY29udHJvbCwge1xuICAgICAgICAgICAgICAgIHRoZW1lOiBzLnRoZW1lLFxuICAgICAgICAgICAgICAgIGxhbmc6IHMubGFuZyxcbiAgICAgICAgICAgICAgICBydGw6IHMucnRsLFxuICAgICAgICAgICAgICAgIHRhcDogcy50YXAsXG4gICAgICAgICAgICAgICAgb25UZXh0OiBzLm9uVGV4dCxcbiAgICAgICAgICAgICAgICBvZmZUZXh0OiBzLm9mZlRleHQsXG4gICAgICAgICAgICAgICAgc3RvcFByb3A6IHMuc3RvcFByb3BcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XG4gICAgICAgICAgICAgIGNvbnRyb2xzW2NvbnRyb2wuaWRdID0gbmV3IENoZWNrQm94KGNvbnRyb2wsIHtcbiAgICAgICAgICAgICAgICB0YXA6IHMudGFwLFxuICAgICAgICAgICAgICAgIHRoZW1lOiBzLnRoZW1lLFxuICAgICAgICAgICAgICAgIHJ0bDogcy5ydGxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdyYW5nZSc6XG4gICAgICAgICAgICAgIGlmICghJCQxKGNvbnRyb2wpLnBhcmVudCgpLmhhc0NsYXNzKCdtYnNjLXNsaWRlcicpKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbHNbY29udHJvbC5pZF0gPSBuZXcgU2xpZGVyKGNvbnRyb2wsIHtcbiAgICAgICAgICAgICAgICAgIHRoZW1lOiBzLnRoZW1lLFxuICAgICAgICAgICAgICAgICAgbGFuZzogcy5sYW5nLFxuICAgICAgICAgICAgICAgICAgcnRsOiBzLnJ0bCxcbiAgICAgICAgICAgICAgICAgIHN0b3BQcm9wOiBzLnN0b3BQcm9wLFxuICAgICAgICAgICAgICAgICAgbGFiZWxTdHlsZTogcy5sYWJlbFN0eWxlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAncmF0aW5nJzpcbiAgICAgICAgICAgICAgY29udHJvbHNbY29udHJvbC5pZF0gPSBuZXcgUmF0aW5nKGNvbnRyb2wsIHtcbiAgICAgICAgICAgICAgICB0aGVtZTogcy50aGVtZSxcbiAgICAgICAgICAgICAgICBsYW5nOiBzLmxhbmcsXG4gICAgICAgICAgICAgICAgcnRsOiBzLnJ0bCxcbiAgICAgICAgICAgICAgICBzdG9wUHJvcDogcy5zdG9wUHJvcFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3Byb2dyZXNzJzpcbiAgICAgICAgICAgICAgY29udHJvbHNbY29udHJvbC5pZF0gPSBuZXcgUHJvZ3Jlc3MoY29udHJvbCwge1xuICAgICAgICAgICAgICAgIHRoZW1lOiBzLnRoZW1lLFxuICAgICAgICAgICAgICAgIGxhbmc6IHMubGFuZyxcbiAgICAgICAgICAgICAgICBydGw6IHMucnRsLFxuICAgICAgICAgICAgICAgIGxhYmVsU3R5bGU6IHMubGFiZWxTdHlsZVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3JhZGlvJzpcbiAgICAgICAgICAgICAgY29udHJvbHNbY29udHJvbC5pZF0gPSBuZXcgUmFkaW8oY29udHJvbCwge1xuICAgICAgICAgICAgICAgIHRhcDogcy50YXAsXG4gICAgICAgICAgICAgICAgdGhlbWU6IHMudGhlbWUsXG4gICAgICAgICAgICAgICAgcnRsOiBzLnJ0bFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgICAgICBjYXNlICdzZWxlY3Qtb25lJzpcbiAgICAgICAgICAgIGNhc2UgJ3NlbGVjdC1tdWx0aXBsZSc6XG4gICAgICAgICAgICAgIGNvbnRyb2xzW2NvbnRyb2wuaWRdID0gbmV3IFNlbGVjdChjb250cm9sLCB7XG4gICAgICAgICAgICAgICAgdGFwOiBzLnRhcCxcbiAgICAgICAgICAgICAgICBpbnB1dFN0eWxlOiBzLmlucHV0U3R5bGUsXG4gICAgICAgICAgICAgICAgbGFiZWxTdHlsZTogcy5sYWJlbFN0eWxlLFxuICAgICAgICAgICAgICAgIHRoZW1lOiBzLnRoZW1lLFxuICAgICAgICAgICAgICAgIHJ0bDogcy5ydGxcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgICAgICAgIGNvbnRyb2xzW2NvbnRyb2wuaWRdID0gbmV3IFRleHRBcmVhKGNvbnRyb2wsIHtcbiAgICAgICAgICAgICAgICB0YXA6IHMudGFwLFxuICAgICAgICAgICAgICAgIGlucHV0U3R5bGU6IHMuaW5wdXRTdHlsZSxcbiAgICAgICAgICAgICAgICBsYWJlbFN0eWxlOiBzLmxhYmVsU3R5bGUsXG4gICAgICAgICAgICAgICAgdGhlbWU6IHMudGhlbWUsXG4gICAgICAgICAgICAgICAgcnRsOiBzLnJ0bFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3NlZ21lbnRlZCc6XG4gICAgICAgICAgICAgIGNvbnRyb2xzW2NvbnRyb2wuaWRdID0gbmV3IFNlZ21lbnRlZEl0ZW0oY29udHJvbCwge1xuICAgICAgICAgICAgICAgIHRoZW1lOiBzLnRoZW1lLFxuICAgICAgICAgICAgICAgIHJ0bDogcy5ydGwsXG4gICAgICAgICAgICAgICAgdGFwOiBzLnRhcCxcbiAgICAgICAgICAgICAgICBpbnB1dFN0eWxlOiBzLmlucHV0U3R5bGVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdzdGVwcGVyJzpcbiAgICAgICAgICAgICAgY29udHJvbHNbY29udHJvbC5pZF0gPSBuZXcgU3RlcHBlcihjb250cm9sLCB7XG4gICAgICAgICAgICAgICAgdGhlbWU6IHMudGhlbWUsXG4gICAgICAgICAgICAgICAgcnRsOiBzLnJ0bFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2hpZGRlbic6XG4gICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgY29udHJvbHNbY29udHJvbC5pZF0gPSBuZXcgSW5wdXQoY29udHJvbCwge1xuICAgICAgICAgICAgICAgIHRhcDogcy50YXAsXG4gICAgICAgICAgICAgICAgaW5wdXRTdHlsZTogcy5pbnB1dFN0eWxlLFxuICAgICAgICAgICAgICAgIGxhYmVsU3R5bGU6IHMubGFiZWxTdHlsZSxcbiAgICAgICAgICAgICAgICB0aGVtZTogcy50aGVtZSxcbiAgICAgICAgICAgICAgICBydGw6IHMucnRsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfSk7XG4gICQkMSgnW2RhdGEtY29sbGFwc2libGVdOm5vdCgubWJzYy1jb2xsYXBzaWJsZSknLCAkY3R4KS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29udHJvbCA9IHRoaXMsXG4gICAgICAgICRjb250cm9sID0gJCQxKGNvbnRyb2wpLFxuICAgICAgICBpc09wZW4gPSAkY29udHJvbC5hdHRyKCdkYXRhLW9wZW4nKTtcblxuICAgIGlmICghY29udHJvbC5pZCkge1xuICAgICAgY29udHJvbC5pZCA9ICdtYnNjLWZvcm0tY29udHJvbC0nICsgKytpZCQxO1xuICAgIH1cblxuICAgIGNvbnRyb2xzW2NvbnRyb2wuaWRdID0gbmV3IENvbGxhcHNpYmxlQmFzZShjb250cm9sLCB7XG4gICAgICBpc09wZW46IGlzT3BlbiAhPT0gdW5kZWZpbmVkICYmIGlzT3BlbiAhPSAnZmFsc2UnXG4gICAgfSk7XG4gICAgaW5zdGFuY2VzW2NvbnRyb2wuaWRdID0gY29udHJvbHNbY29udHJvbC5pZF07XG4gIH0pOyAvLyBTZXQgaW5pdGlhbCBoZWlnaHQgZm9yIHRleHRhcmVhc1xuXG4gIGlmICghc2hhbGxvdykge1xuICAgIHNpemVUZXh0QXJlYXMoKTtcbiAgfVxufVxuXG52YXIgaW5uZXJTdHlsZSA9ICdwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjA7JztcbnZhciBzdHlsZSA9IGlubmVyU3R5bGUgKyAncmlnaHQ6MDtib3R0b206MDtvdmVyZmxvdzpoaWRkZW47ei1pbmRleDotMTsnO1xudmFyIG1hcmt1cCA9ICc8ZGl2IHN0eWxlPVwiJyArIHN0eWxlICsgJ1wiPjxkaXYgc3R5bGU9XCInICsgaW5uZXJTdHlsZSArICdcIj48L2Rpdj48L2Rpdj4nICsgJzxkaXYgc3R5bGU9XCInICsgc3R5bGUgKyAnXCI+PGRpdiBzdHlsZT1cIicgKyBpbm5lclN0eWxlICsgJ3dpZHRoOjIwMCU7aGVpZ2h0OjIwMCU7XCI+PC9kaXY+PC9kaXY+JztcbnZhciBvYnNlcnZlcjtcbnZhciBjb3VudCA9IDA7XG5mdW5jdGlvbiByZXNpemVPYnNlcnZlcihlbCwgY2FsbGJhY2ssIHpvbmUpIHtcbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgZXhwYW5kQ2hpbGQuc3R5bGUud2lkdGggPSAnMTAwMDAwcHgnO1xuICAgIGV4cGFuZENoaWxkLnN0eWxlLmhlaWdodCA9ICcxMDAwMDBweCc7XG4gICAgZXhwYW5kLnNjcm9sbExlZnQgPSAxMDAwMDA7XG4gICAgZXhwYW5kLnNjcm9sbFRvcCA9IDEwMDAwMDtcbiAgICBzaHJpbmsuc2Nyb2xsTGVmdCA9IDEwMDAwMDtcbiAgICBzaHJpbmsuc2Nyb2xsVG9wID0gMTAwMDAwO1xuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tIaWRkZW4oKSB7XG4gICAgdmFyIG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgaGlkZGVuUmFmSWQgPSAwO1xuXG4gICAgaWYgKCFzdG9wQ2hlY2spIHtcbiAgICAgIGlmIChub3cgLSBsYXN0Q2hlY2sgPiAyMDAgJiYgIWV4cGFuZC5zY3JvbGxUb3AgJiYgIWV4cGFuZC5zY3JvbGxMZWZ0KSB7XG4gICAgICAgIGxhc3RDaGVjayA9IG5vdztcbiAgICAgICAgcmVzZXQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFoaWRkZW5SYWZJZCkge1xuICAgICAgICBoaWRkZW5SYWZJZCA9IHJhZihjaGVja0hpZGRlbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gICAgaWYgKCFyYWZJZCkge1xuICAgICAgcmFmSWQgPSByYWYob25SZXNpemUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICAgIHJhZklkID0gMDtcbiAgICByZXNldCgpO1xuICAgIGNhbGxiYWNrKCk7XG4gIH1cblxuICB2YXIgZXhwYW5kO1xuICB2YXIgZXhwYW5kQ2hpbGQ7XG4gIHZhciBoZWxwZXI7XG4gIHZhciBoaWRkZW5SYWZJZDtcbiAgdmFyIHJhZklkO1xuICB2YXIgc2hyaW5rO1xuICB2YXIgc3RvcENoZWNrO1xuICB2YXIgbGFzdENoZWNrID0gMDsgLy9sZXQgaXNIaWRkZW4gPSB0cnVlO1xuXG4gIGlmICh3aW5kb3cuUmVzaXplT2JzZXJ2ZXIpIHtcbiAgICBpZiAoIW9ic2VydmVyKSB7XG4gICAgICBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBlbnRyaWVzLCBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yKSwgX2kgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgICAgIHZhciBfcmVmO1xuXG4gICAgICAgICAgaWYgKF9pc0FycmF5KSB7XG4gICAgICAgICAgICBpZiAoX2kgPj0gX2l0ZXJhdG9yLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfaSA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgICAgICBfcmVmID0gX2kudmFsdWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGVudHJ5ID0gX3JlZjtcblxuICAgICAgICAgIGVudHJ5LnRhcmdldC5fX21ic2NSZXNpemUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgY291bnQrKztcbiAgICBlbC5fX21ic2NSZXNpemUgPSBjYWxsYmFjaztcbiAgICBvYnNlcnZlci5vYnNlcnZlKGVsKTtcbiAgfSBlbHNlIHtcbiAgICBoZWxwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBoZWxwZXIuaW5uZXJIVE1MID0gbWFya3VwO1xuICAgIGhlbHBlci5kaXIgPSAnbHRyJzsgLy8gTmVlZCB0aGlzIHRvIHdvcmsgaW4gcnRsIGFzIHdlbGw7XG5cbiAgICBzaHJpbmsgPSBoZWxwZXIuY2hpbGROb2Rlc1sxXTtcbiAgICBleHBhbmQgPSBoZWxwZXIuY2hpbGROb2Rlc1swXTtcbiAgICBleHBhbmRDaGlsZCA9IGV4cGFuZC5jaGlsZE5vZGVzWzBdO1xuICAgIGVsLmFwcGVuZENoaWxkKGhlbHBlcik7XG4gICAgZXhwYW5kLmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIG9uU2Nyb2xsKTtcbiAgICBzaHJpbmsuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwpO1xuXG4gICAgaWYgKHpvbmUpIHtcbiAgICAgIHpvbmUucnVuT3V0c2lkZUFuZ3VsYXIoZnVuY3Rpb24gKCkge1xuICAgICAgICByYWYoY2hlY2tIaWRkZW4pO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhZihjaGVja0hpZGRlbik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBkZXRhY2g6IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICAgIGlmIChvYnNlcnZlcikge1xuICAgICAgICBjb3VudC0tO1xuICAgICAgICBvYnNlcnZlci51bm9ic2VydmUoZWwpO1xuXG4gICAgICAgIGlmICghY291bnQpIHtcbiAgICAgICAgICBvYnNlcnZlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnJlbW92ZUNoaWxkKGhlbHBlcik7XG4gICAgICAgIHN0b3BDaGVjayA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG52YXIgJGFjdGl2ZUVsbSxcbiAgICBwcmV2ZW50U2hvdyxcbiAgICB0aGVtZXMgPSBtb2Jpc2Nyb2xsLnRoZW1lcyxcbiAgICBuZWVkc0ZpeGVkID0gLyhpcGhvbmV8aXBvZCkvaS50ZXN0KHVzZXJBZ2VudCkgJiYgbWFqb3JWZXJzaW9uID49IDcsXG4gICAgaXNBbmRyb2lkID0gb3MgPT0gJ2FuZHJvaWQnLFxuICAgIGlzSU9TID0gb3MgPT0gJ2lvcycsXG4gICAgaXNJT1M4ID0gaXNJT1MgJiYgbWFqb3JWZXJzaW9uID09IDgsXG4gICAgaGFsZkJvcmRlciA9IGlzSU9TICYmIG1ham9yVmVyc2lvbiA+IDcsXG4gICAgcHJldmRlZiA9IGZ1bmN0aW9uIHByZXZkZWYoZXYpIHtcbiAgZXYucHJldmVudERlZmF1bHQoKTtcbn07XG5cbnZhciBFRElUQUJMRSA9ICdpbnB1dCxzZWxlY3QsdGV4dGFyZWEsYnV0dG9uJztcbnZhciBBTExPV19FTlRFUiA9ICd0ZXh0YXJlYSxidXR0b24saW5wdXRbdHlwZT1cImJ1dHRvblwiXSxpbnB1dFt0eXBlPVwic3VibWl0XCJdJztcbnZhciBGT0NVU0FCTEUgPSBFRElUQUJMRSArICcsW3RhYmluZGV4PVwiMFwiXSc7XG52YXIgRnJhbWUgPSBmdW5jdGlvbiBGcmFtZShlbCwgc2V0dGluZ3MsIGluaGVyaXQpIHtcbiAgdmFyIC8vJGFyaWFEaXYsXG4gICRjdHgsXG4gICAgICAkaGVhZGVyLFxuICAgICAgJGxvY2ssXG4gICAgICAkbWFya3VwLFxuICAgICAgJG92ZXJsYXksXG4gICAgICAkcGVyc3AsXG4gICAgICAkcG9wdXAsXG4gICAgICAkd25kLFxuICAgICAgJHdyYXBwZXIsXG4gICAgICBidXR0b25zLFxuICAgICAgYnRuLFxuICAgICAgY3R4LFxuICAgICAgZG9BbmltLFxuICAgICAgaGFzQ29udGV4dCxcbiAgICAgIGlzTW9kYWwsXG4gICAgICBpc0luc2VydGVkLFxuICAgICAgaXNQb2ludGVyLFxuICAgICAgbWFya3VwLFxuICAgICAgbW9kYWxXaWR0aCxcbiAgICAgIG1vZGFsSGVpZ2h0LFxuICAgICAgbmVlZHNEaW1lbnNpb25zLFxuICAgICAgbmVlZHNMb2NrLFxuICAgICAgb2JzZXJ2ZXIsXG4gICAgICBvdmVybGF5LFxuICAgICAgcG9wdXAsXG4gICAgICBwb3NEZWJvdW5jZSxcbiAgICAgIHByZXZJbnN0LFxuICAgICAgcyxcbiAgICAgIHNjcm9sbExvY2ssXG4gICAgICB0b3VjaGVkLFxuICAgICAgdHJpZ2dlcixcbiAgICAgIHduZFdpZHRoLFxuICAgICAgd25kSGVpZ2h0LFxuICAgICAgdGhhdCA9IHRoaXMsXG4gICAgICAkZWxtID0gJCQxKGVsKSxcbiAgICAgIGVsbUxpc3QgPSBbXSxcbiAgICAgIGxhc3RGb2N1cyA9IG5ldyBEYXRlKCk7XG5cbiAgZnVuY3Rpb24gb25CdG5TdGFydChldikge1xuICAgIC8vIE5lZWQgdGhpcyB0byBwcmV2ZW50IG9wZW5pbmcgb2Ygc2lkZW1lbnVzIG9yIHNpbWlsYXJcbiAgICBpZiAocy5zdG9wUHJvcCkge1xuICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgdmFyIGIgPSBjbG9zZXN0KHRoaXMsIGV2LnRhcmdldCwgJy5tYnNjLWZyLWJ0bi1lJyk7XG5cbiAgICBpZiAoIWIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIENhbid0IGNhbGwgcHJldmVudERlZmF1bHQgaGVyZSwgaXQga2lsbHMgcGFnZSBzY3JvbGxcblxuXG4gICAgaWYgKGJ0bikge1xuICAgICAgYnRuLnJlbW92ZUNsYXNzKCdtYnNjLWFjdGl2ZScpO1xuICAgIH1cblxuICAgIGJ0biA9ICQkMShiKTsgLy8gQWN0aXZlIGJ1dHRvblxuXG4gICAgaWYgKCFidG4uaGFzQ2xhc3MoJ21ic2MtZGlzYWJsZWQnKSAmJiAhYnRuLmhhc0NsYXNzKCdtYnNjLWZyLWJ0bi1uaGwnKSkge1xuICAgICAgYnRuLmFkZENsYXNzKCdtYnNjLWFjdGl2ZScpO1xuICAgIH1cblxuICAgIGlmIChldi50eXBlID09PSAnbW91c2Vkb3duJykge1xuICAgICAgJCQxKGRvY3VtZW50KS5vbignbW91c2V1cCcsIG9uQnRuRW5kKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkJ0bkVuZChldikge1xuICAgIGlmIChidG4pIHtcbiAgICAgIGJ0bi5yZW1vdmVDbGFzcygnbWJzYy1hY3RpdmUnKTtcbiAgICAgIGJ0biA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGV2LnR5cGUgPT09ICdtb3VzZXVwJykge1xuICAgICAgJCQxKGRvY3VtZW50KS5vZmYoJ21vdXNldXAnLCBvbkJ0bkVuZCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb25TY3JvbGwoZXYpIHtcbiAgICBpZiAoc2Nyb2xsTG9jayAmJiBtYXJrdXAuY29udGFpbnMoZXYudGFyZ2V0KSkge1xuICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvblduZEtleURvd24oZXYpIHtcbiAgICBpZiAobW9iaXNjcm9sbC5hY3RpdmVJbnN0YW5jZSA9PSB0aGF0KSB7XG4gICAgICBpZiAoZXYua2V5Q29kZSA9PSAxMyAmJiAoISQkMShldi50YXJnZXQpLmlzKEFMTE9XX0VOVEVSKSB8fCBldi5zaGlmdEtleSkpIHtcbiAgICAgICAgdGhhdC5zZWxlY3QoKTtcbiAgICAgIH0gZWxzZSBpZiAoZXYua2V5Q29kZSA9PSAyNykge1xuICAgICAgICB0aGF0LmNhbmNlbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uU2hvdyhwcmV2Rm9jdXMpIHtcbiAgICBpZiAoIXByZXZGb2N1cyAmJiAhaXNBbmRyb2lkICYmIHRoYXQuX2FjdGl2ZUVsbSkge1xuICAgICAgLy9vdmVybGF5LmZvY3VzKCk7XG4gICAgICBsYXN0Rm9jdXMgPSBuZXcgRGF0ZSgpO1xuXG4gICAgICB0aGF0Ll9hY3RpdmVFbG0uZm9jdXMoKTtcbiAgICB9IC8vdGhhdC5hcmlhTWVzc2FnZShzLmFyaWFNZXNzYWdlKTtcblxuICB9XG5cbiAgZnVuY3Rpb24gb25IaWRlKHByZXZBbmltKSB7XG4gICAgdmFyICRhY3RpdmVFbCA9ICRhY3RpdmVFbG0sXG4gICAgICAgIGZvY3VzID0gcy5mb2N1c09uQ2xvc2U7XG5cbiAgICB0aGF0Ll9tYXJrdXBSZW1vdmUoKTtcblxuICAgICRtYXJrdXAucmVtb3ZlKCk7XG5cbiAgICBpZiAoaXNNb2RhbCkge1xuICAgICAgY3R4Lm1ic2NNb2RhbHMtLTtcblxuICAgICAgaWYgKHMuc2Nyb2xsTG9jaykge1xuICAgICAgICBjdHgubWJzY0xvY2stLTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjdHgubWJzY0xvY2spIHtcbiAgICAgICAgJGxvY2sucmVtb3ZlQ2xhc3MoJ21ic2MtZnItbG9jaycpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZHNMb2NrKSB7XG4gICAgICAgIGN0eC5tYnNjSU9TTG9jay0tO1xuXG4gICAgICAgIGlmICghY3R4Lm1ic2NJT1NMb2NrKSB7XG4gICAgICAgICAgJGxvY2sucmVtb3ZlQ2xhc3MoJ21ic2MtZnItbG9jay1pb3MnKTtcbiAgICAgICAgICAkY3R4LmNzcyh7XG4gICAgICAgICAgICB0b3A6ICcnLFxuICAgICAgICAgICAgbGVmdDogJydcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAkd25kLnNjcm9sbExlZnQoY3R4Lm1ic2NTY3JvbGxMZWZ0KTtcbiAgICAgICAgICAkd25kLnNjcm9sbFRvcChjdHgubWJzY1Njcm9sbFRvcCk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gVGhlIGZvbGx3aW5nIHNob3VsZCBiZSBkb25lIG9ubHkgaWYgbm8gb3RoZXJcbiAgICAgIC8vIGluc3RhbmNlIHdhcyBvcGVuZWQgZHVyaW5nIHRoZSBoaWRlIGFuaW1hdGlvblxuXG5cbiAgICAgIGlmICghY3R4Lm1ic2NNb2RhbHMpIHtcbiAgICAgICAgJGxvY2sucmVtb3ZlQ2xhc3MoJ21ic2MtZnItbG9jay1jdHgnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFjdHgubWJzY01vZGFscyB8fCBwcmV2SW5zdCkge1xuICAgICAgICAvLyBQdXQgZm9jdXMgYmFjayB0byB0aGUgbGFzdCBhY3RpdmUgZWxlbWVudFxuICAgICAgICBpZiAoIXByZXZBbmltKSB7XG4gICAgICAgICAgaWYgKCEkYWN0aXZlRWwpIHtcbiAgICAgICAgICAgICRhY3RpdmVFbCA9ICRlbG07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoZm9jdXMgPT09IHVuZGVmaW5lZCB8fCBmb2N1cyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICBwcmV2ZW50U2hvdyA9IHRydWU7XG4gICAgICAgICAgICAgICRhY3RpdmVFbFswXS5mb2N1cygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb2N1cykge1xuICAgICAgICAgICAgICAkJDEoZm9jdXMpWzBdLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgMjAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHByZXZJbnN0ID0gdW5kZWZpbmVkO1xuICAgIGlzSW5zZXJ0ZWQgPSBmYWxzZTtcbiAgICB0cmlnZ2VyKCdvbkhpZGUnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUG9zaXRpb24oKSB7XG4gICAgY2xlYXJUaW1lb3V0KHBvc0RlYm91bmNlKTtcbiAgICBwb3NEZWJvdW5jZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoYXQucG9zaXRpb24odHJ1ZSkpIHtcbiAgICAgICAgLy8gVHJpZ2dlciByZWZsb3csIG5lZWRlZCBvbiBpT1Mgc2FmYXJpLCB3aGVuIG9yaWVudGF0aW9uIGlzIGNoYW5nZWRcbiAgICAgICAgcG9wdXAuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgICAgICBwb3B1cC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHBvcHVwLnN0eWxlLnZpc2liaWxpdHkgPSAnJztcbiAgICAgIH1cbiAgICB9LCAyMDApO1xuICB9XG5cbiAgZnVuY3Rpb24gb25Gb2N1cyhldikge1xuICAgIGlmIChtb2Jpc2Nyb2xsLmFjdGl2ZUluc3RhbmNlID09IHRoYXQgJiYgZXYudGFyZ2V0Lm5vZGVUeXBlICYmICFvdmVybGF5LmNvbnRhaW5zKGV2LnRhcmdldCkgJiYgbmV3IERhdGUoKSAtIGxhc3RGb2N1cyA+IDEwMCkge1xuICAgICAgbGFzdEZvY3VzID0gbmV3IERhdGUoKTtcblxuICAgICAgdGhhdC5fYWN0aXZlRWxtLmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0TWFya3VwKHByZXZBbmltLCBwcmV2Rm9jdXMpIHtcbiAgICBmdW5jdGlvbiBvbkFuaW1FbmQoKSB7XG4gICAgICAkbWFya3VwLm9mZihhbmltRW5kLCBvbkFuaW1FbmQpLnJlbW92ZUNsYXNzKCdtYnNjLWFuaW0taW4gbWJzYy1hbmltLXRyYW5zIG1ic2MtYW5pbS10cmFucy0nICsgZG9BbmltKS5maW5kKCcubWJzYy1mci1wb3B1cCcpLnJlbW92ZUNsYXNzKCdtYnNjLWFuaW0tJyArIGRvQW5pbSk7XG4gICAgICBvblNob3cocHJldkZvY3VzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk92ZXJsYXlTdGFydChldikge1xuICAgICAgaWYgKCF0YXJnZXQgJiYgZXYudGFyZ2V0ID09IG92ZXJsYXkpIHtcbiAgICAgICAgdGFyZ2V0ID0gdHJ1ZTtcbiAgICAgICAgbW92ZWQgPSBmYWxzZTtcbiAgICAgICAgc3RhcnRYID0gZ2V0Q29vcmQoZXYsICdYJyk7XG4gICAgICAgIHN0YXJ0WSA9IGdldENvb3JkKGV2LCAnWScpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uT3ZlcmxheU1vdmUoZXYpIHtcbiAgICAgIGlmICh0YXJnZXQgJiYgIW1vdmVkICYmIChNYXRoLmFicyhnZXRDb29yZChldiwgJ1gnKSAtIHN0YXJ0WCkgPiA5IHx8IE1hdGguYWJzKGdldENvb3JkKGV2LCAnWScpIC0gc3RhcnRZKSA+IDkpKSB7XG4gICAgICAgIG1vdmVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IC8vIE1pZ2h0IGJlIG5vdCB2aXNpYmxlIGlmIGltbWVkaWF0ZWx5IGhpZGRlblxuXG5cbiAgICBpZiAoIXRoYXQuX2lzVmlzaWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gU2hvd1xuXG5cbiAgICBpZiAoaXNNb2RhbCkge1xuICAgICAgJG1hcmt1cC5hcHBlbmRUbygkY3R4KTtcbiAgICB9IGVsc2UgaWYgKCRlbG0uaXMoJ2RpdicpICYmICF0aGF0Ll9oYXNDb250ZW50KSB7XG4gICAgICAvLyBJbnNlcnQgaW5zaWRlIHRoZSBlbGVtZW50IG9uIHdoaWNoIHdhcyBpbml0aWFsaXplZFxuICAgICAgJGVsbS5lbXB0eSgpLmFwcGVuZCgkbWFya3VwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSW5zZXJ0IGFmdGVyIHRoZSBlbGVtZW50XG4gICAgICBpZiAoJGVsbS5oYXNDbGFzcygnbWJzYy1jb250cm9sJykpIHtcbiAgICAgICAgdmFyICR3cmFwID0gJGVsbS5jbG9zZXN0KCcubWJzYy1jb250cm9sLXcnKTtcbiAgICAgICAgJG1hcmt1cC5pbnNlcnRBZnRlcigkd3JhcCk7XG5cbiAgICAgICAgaWYgKCR3cmFwLmhhc0NsYXNzKCdtYnNjLXNlbGVjdCcpKSB7XG4gICAgICAgICAgJHdyYXAuYWRkQ2xhc3MoJ21ic2Mtc2VsZWN0LWlubGluZScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkbWFya3VwLmluc2VydEFmdGVyKCRlbG0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlzSW5zZXJ0ZWQgPSB0cnVlO1xuXG4gICAgdGhhdC5fbWFya3VwSW5zZXJ0ZWQoJG1hcmt1cCk7XG5cbiAgICB0cmlnZ2VyKCdvbk1hcmt1cEluc2VydGVkJywge1xuICAgICAgdGFyZ2V0OiBtYXJrdXBcbiAgICB9KTtcblxuICAgIGlmIChpc01vZGFsICYmIHMuY2xvc2VPbk92ZXJsYXlUYXApIHtcbiAgICAgIHZhciBtb3ZlZCwgdGFyZ2V0LCBzdGFydFgsIHN0YXJ0WTtcbiAgICAgIGxpc3RlbihvdmVybGF5LCAndG91Y2hzdGFydCcsIG9uT3ZlcmxheVN0YXJ0LCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgbGlzdGVuKG92ZXJsYXksICd0b3VjaG1vdmUnLCBvbk92ZXJsYXlNb3ZlLCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgJG92ZXJsYXkub24oJ21vdXNlZG93bicsIG9uT3ZlcmxheVN0YXJ0KS5vbignbW91c2Vtb3ZlJywgb25PdmVybGF5TW92ZSkub24oJ3RvdWNoY2FuY2VsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB0YXJnZXQgPSBmYWxzZTtcbiAgICAgIH0pLm9uKCd0b3VjaGVuZCBjbGljaycsIGZ1bmN0aW9uIChldikge1xuICAgICAgICBpZiAodGFyZ2V0ICYmICFtb3ZlZCkge1xuICAgICAgICAgIHRoYXQuY2FuY2VsKCk7XG5cbiAgICAgICAgICBpZiAoZXYudHlwZSA9PSAndG91Y2hlbmQnKSB7XG4gICAgICAgICAgICBwcmV2ZW50Q2xpY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXQgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgICRtYXJrdXAub24oJ21vdXNlZG93bicsICcubWJzYy1idG4tZSwubWJzYy1mci1idG4tZScsIHByZXZkZWYpLm9uKCdrZXlkb3duJywgJy5tYnNjLWZyLWJ0bi1lJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICBpZiAoZXYua2V5Q29kZSA9PSAzMikge1xuICAgICAgICAvLyBTcGFjZVxuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdGhpcy5jbGljaygpO1xuICAgICAgfVxuICAgIH0pLm9uKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAvLyBUcmFwIGZvY3VzIGluc2lkZSBtb2RhbFxuICAgICAgaWYgKGV2LmtleUNvZGUgPT0gMzIgJiYgISQkMShldi50YXJnZXQpLmlzKEVESVRBQkxFKSkge1xuICAgICAgICAvLyBQcmV2ZW50IHBhZ2Ugc2Nyb2xsIG9uIHNwYWNlIHByZXNzXG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9IGVsc2UgaWYgKGV2LmtleUNvZGUgPT0gOSAmJiBpc01vZGFsICYmIHMuZm9jdXNUcmFwKSB7XG4gICAgICAgIC8vIFRhYlxuICAgICAgICB2YXIgJGZvY3VzYWJsZSA9ICRtYXJrdXAuZmluZChGT0NVU0FCTEUpLmZpbHRlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0V2lkdGggPiAwIHx8IHRoaXMub2Zmc2V0SGVpZ2h0ID4gMDtcbiAgICAgICAgfSksXG4gICAgICAgICAgICBpbmRleCA9ICRmb2N1c2FibGUuaW5kZXgoJCQxKCc6Zm9jdXMnLCAkbWFya3VwKSksXG4gICAgICAgICAgICBpID0gJGZvY3VzYWJsZS5sZW5ndGggLSAxLFxuICAgICAgICAgICAgdGFyZ2V0ID0gMDtcblxuICAgICAgICBpZiAoZXYuc2hpZnRLZXkpIHtcbiAgICAgICAgICBpID0gMDtcbiAgICAgICAgICB0YXJnZXQgPSAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbmRleCA9PT0gaSkge1xuICAgICAgICAgICRmb2N1c2FibGUuZXEodGFyZ2V0KVswXS5mb2N1cygpO1xuICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KS5vbigndG91Y2hlbmQnLCAnLm1ic2MtZnItYnRuLWUnLCBvbkJ0bkVuZCk7XG4gICAgbGlzdGVuKG1hcmt1cCwgJ3RvdWNoc3RhcnQnLCBvbkJ0blN0YXJ0LCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgbGlzdGVuKG1hcmt1cCwgJ21vdXNlZG93bicsIG9uQnRuU3RhcnQpOyAvLyBOZWVkIGV2ZW50IGNhcHR1cmUgZm9yIHRoaXNcblxuICAgIGxpc3RlbihtYXJrdXAsICd0b3VjaHN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0b3VjaGVkKSB7XG4gICAgICAgIHRvdWNoZWQgPSB0cnVlO1xuICAgICAgICAkY3R4LmZpbmQoJy5tYnNjLW5vLXRvdWNoJykucmVtb3ZlQ2xhc3MoJ21ic2Mtbm8tdG91Y2gnKTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0pOyAvLyBJbml0IGJ1dHRvbnNcblxuICAgICQkMS5lYWNoKGJ1dHRvbnMsIGZ1bmN0aW9uIChpLCBiKSB7XG4gICAgICB0aGF0LnRhcCgkJDEoJy5tYnNjLWZyLWJ0bicgKyBpLCAkbWFya3VwKSwgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIGIgPSBpc1N0cmluZyhiKSA/IHRoYXQuYnV0dG9uc1tiXSA6IGI7XG4gICAgICAgIChpc1N0cmluZyhiLmhhbmRsZXIpID8gdGhhdC5oYW5kbGVyc1tiLmhhbmRsZXJdIDogYi5oYW5kbGVyKS5jYWxsKHRoaXMsIGV2LCB0aGF0KTtcbiAgICAgIH0sIHRydWUpO1xuICAgIH0pO1xuXG4gICAgdGhhdC5fYXR0YWNoRXZlbnRzKCRtYXJrdXApOyAvLyBTZXQgcG9zaXRpb25cblxuXG4gICAgaWYgKHRoYXQucG9zaXRpb24oKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNNb2RhbCB8fCB0aGF0Ll9jaGVja1NpemUpIHtcbiAgICAgIG9ic2VydmVyID0gcmVzaXplT2JzZXJ2ZXIobWFya3VwLCBvblBvc2l0aW9uLCBzLnpvbmUpO1xuICAgIH1cblxuICAgIGlmIChpc01vZGFsKSB7XG4gICAgICAkbWFya3VwLnJlbW92ZUNsYXNzKCdtYnNjLWZyLXBvcycpO1xuXG4gICAgICBpZiAoZG9BbmltICYmICFwcmV2QW5pbSkge1xuICAgICAgICAkbWFya3VwLmFkZENsYXNzKCdtYnNjLWFuaW0taW4gbWJzYy1hbmltLXRyYW5zIG1ic2MtYW5pbS10cmFucy0nICsgZG9BbmltKS5vbihhbmltRW5kLCBvbkFuaW1FbmQpLmZpbmQoJy5tYnNjLWZyLXBvcHVwJykuYWRkQ2xhc3MoJ21ic2MtYW5pbS0nICsgZG9BbmltKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uU2hvdyhwcmV2Rm9jdXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyaWdnZXIoJ29uU2hvdycsIHtcbiAgICAgIHRhcmdldDogbWFya3VwLFxuICAgICAgdmFsdWVUZXh0OiB0aGF0Ll90ZW1wVmFsdWVcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3coYmVmb3JlU2hvdywgJGVsbSkge1xuICAgIGlmICh0aGF0Ll9pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoYmVmb3JlU2hvdykge1xuICAgICAgYmVmb3JlU2hvdygpO1xuICAgIH1cblxuICAgIGlmICh0aGF0LnNob3coKSAhPT0gZmFsc2UpIHtcbiAgICAgICRhY3RpdmVFbG0gPSAkZWxtO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldCgpIHtcbiAgICB0aGF0Ll9maWxsVmFsdWUoKTtcblxuICAgIHRyaWdnZXIoJ29uU2V0Jywge1xuICAgICAgdmFsdWVUZXh0OiB0aGF0Ll92YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuY2VsKCkge1xuICAgIHRyaWdnZXIoJ29uQ2FuY2VsJywge1xuICAgICAgdmFsdWVUZXh0OiB0aGF0Ll92YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgdGhhdC5zZXRWYWwobnVsbCwgdHJ1ZSk7XG4gIH0gLy8gQ2FsbCB0aGUgcGFyZW50IGNvbnN0cnVjdG9yXG5cblxuICBCYXNlLmNhbGwodGhpcywgZWwsIHNldHRpbmdzLCB0cnVlKTtcbiAgLyoqXG4gICAqIFBvc2l0aW9ucyB0aGUgc2Nyb2xsZXIgb24gdGhlIHNjcmVlbi5cbiAgICovXG5cbiAgdGhhdC5wb3NpdGlvbiA9IGZ1bmN0aW9uIChjaGVjaykge1xuICAgIHZhciBhbmNob3IsXG4gICAgICAgIGFuY2hvcldpZHRoLFxuICAgICAgICBhbmNob3JIZWlnaHQsXG4gICAgICAgIGFuY2hvclBvcyxcbiAgICAgICAgYW5jaG9yVG9wLFxuICAgICAgICBhbmNob3JMZWZ0LFxuICAgICAgICBhcnJvdyxcbiAgICAgICAgYXJyb3dXaWR0aCxcbiAgICAgICAgYXJyb3dIZWlnaHQsXG4gICAgICAgIGRvY0hlaWdodCxcbiAgICAgICAgZG9jV2lkdGgsXG4gICAgICAgIGlzV3JhcHBlZCxcbiAgICAgICAgbmV3SGVpZ2h0LFxuICAgICAgICBuZXdXaWR0aCxcbiAgICAgICAgb2xkSGVpZ2h0LFxuICAgICAgICBvbGRXaWR0aCxcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIHRvcCxcbiAgICAgICAgbGVmdCxcbiAgICAgICAgY3NzID0ge30sXG4gICAgICAgIHNjcm9sbExlZnQgPSAwLFxuICAgICAgICBzY3JvbGxUb3AgPSAwLFxuICAgICAgICBtaW5XaWR0aCA9IDAsXG4gICAgICAgIHRvdGFsV2lkdGggPSAwO1xuXG4gICAgaWYgKCFpc0luc2VydGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgb2xkV2lkdGggPSB3bmRXaWR0aDtcbiAgICBvbGRIZWlnaHQgPSB3bmRIZWlnaHQ7XG4gICAgbmV3SGVpZ2h0ID0gTWF0aC5taW4obWFya3VwLm9mZnNldEhlaWdodCwgaGFzQ29udGV4dCA/IEluZmluaXR5IDogd2luZG93LmlubmVySGVpZ2h0KTtcbiAgICBuZXdXaWR0aCA9IE1hdGgubWluKG1hcmt1cC5vZmZzZXRXaWR0aCwgaGFzQ29udGV4dCA/IEluZmluaXR5IDogd2luZG93LmlubmVyV2lkdGgpO1xuXG4gICAgaWYgKCFuZXdXaWR0aCB8fCAhbmV3SGVpZ2h0IHx8IHduZFdpZHRoID09PSBuZXdXaWR0aCAmJiB3bmRIZWlnaHQgPT09IG5ld0hlaWdodCAmJiBjaGVjaykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGF0Ll9jaGVja1Jlc3AobmV3V2lkdGgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgd25kV2lkdGggPSBuZXdXaWR0aDtcbiAgICB3bmRIZWlnaHQgPSBuZXdIZWlnaHQ7XG5cbiAgICBpZiAodGhhdC5faXNGdWxsU2NyZWVuIHx8IC90b3B8Ym90dG9tLy50ZXN0KHMuZGlzcGxheSkpIHtcbiAgICAgIC8vIFNldCB3aWR0aCwgaWYgZG9jdW1lbnQgaXMgbGFyZ2VyIHRoYW4gdmlld3BvcnQsIG5lZWRzIHRvIGJlIHNldCBiZWZvcmUgb25Qb3NpdGlvbiAoZm9yIGNhbGVuZGFyKVxuICAgICAgJHBvcHVwLndpZHRoKG5ld1dpZHRoKTtcbiAgICB9IGVsc2UgaWYgKGlzTW9kYWwpIHtcbiAgICAgIC8vIFJlc2V0IHdpZHRoXG4gICAgICAkd3JhcHBlci53aWR0aCgnJyk7XG4gICAgfVxuXG4gICAgdGhhdC5fcG9zaXRpb24oJG1hcmt1cCk7IC8vIENhbGwgcG9zaXRpb24gZm9yIG5lc3RlZCBtb2Jpc2Nyb2xsIGNvbXBvbmVudHNcbiAgICAvLyAkKCcubWJzYy1jb21wJywgJG1hcmt1cCkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgLy8gICAgIHZhciBpbnN0ID0gaW5zdGFuY2VzW3RoaXMuaWRdO1xuICAgIC8vICAgICBpZiAoaW5zdCAmJiBpbnN0ICE9PSB0aGF0ICYmIGluc3QucG9zaXRpb24pIHtcbiAgICAvLyAgICAgICAgIGluc3QucG9zaXRpb24oKTtcbiAgICAvLyAgICAgfVxuICAgIC8vIH0pO1xuXG5cbiAgICBpZiAoIXRoYXQuX2lzRnVsbFNjcmVlbiAmJiAvY2VudGVyfGJ1YmJsZS8udGVzdChzLmRpc3BsYXkpKSB7XG4gICAgICAkJDEoJy5tYnNjLXctcCcsICRtYXJrdXApLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBOZWVkIGZyYWN0aW9uYWwgdmFsdWVzIGhlcmUsIHNvIG9mZnNldFdpZHRoIGlzIG5vdCBva1xuICAgICAgICB3aWR0aCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgIHRvdGFsV2lkdGggKz0gd2lkdGg7XG4gICAgICAgIG1pbldpZHRoID0gd2lkdGggPiBtaW5XaWR0aCA/IHdpZHRoIDogbWluV2lkdGg7XG4gICAgICB9KTtcbiAgICAgIGlzV3JhcHBlZCA9IHRvdGFsV2lkdGggPiBuZXdXaWR0aCAtIDE2IHx8IHMudGFicyA9PT0gdHJ1ZTtcbiAgICAgICR3cmFwcGVyLmNzcyh7XG4gICAgICAgICd3aWR0aCc6IHRoYXQuX2lzTGlxdWlkID8gTWF0aC5taW4ocy5tYXhQb3B1cFdpZHRoLCBuZXdXaWR0aCAtIDE2KSA6IE1hdGguY2VpbChpc1dyYXBwZWQgPyBtaW5XaWR0aCA6IHRvdGFsV2lkdGgpLFxuICAgICAgICAnd2hpdGUtc3BhY2UnOiBpc1dyYXBwZWQgPyAnJyA6ICdub3dyYXAnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodHJpZ2dlcignb25Qb3NpdGlvbicsIHtcbiAgICAgIHRhcmdldDogbWFya3VwLFxuICAgICAgcG9wdXA6IHBvcHVwLFxuICAgICAgaGFzVGFiczogaXNXcmFwcGVkLFxuICAgICAgb2xkV2lkdGg6IG9sZFdpZHRoLFxuICAgICAgb2xkSGVpZ2h0OiBvbGRIZWlnaHQsXG4gICAgICB3aW5kb3dXaWR0aDogbmV3V2lkdGgsXG4gICAgICB3aW5kb3dIZWlnaHQ6IG5ld0hlaWdodFxuICAgIH0pID09PSBmYWxzZSB8fCAhaXNNb2RhbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChuZWVkc0RpbWVuc2lvbnMpIHtcbiAgICAgIHNjcm9sbExlZnQgPSAkd25kLnNjcm9sbExlZnQoKTtcbiAgICAgIHNjcm9sbFRvcCA9ICR3bmQuc2Nyb2xsVG9wKCk7XG5cbiAgICAgIGlmICh3bmRXaWR0aCkge1xuICAgICAgICAkcGVyc3AuY3NzKHtcbiAgICAgICAgICB3aWR0aDogJycsXG4gICAgICAgICAgaGVpZ2h0OiAnJ1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtb2RhbFdpZHRoID0gcG9wdXAub2Zmc2V0V2lkdGg7XG4gICAgbW9kYWxIZWlnaHQgPSBwb3B1cC5vZmZzZXRIZWlnaHQ7XG4gICAgc2Nyb2xsTG9jayA9IG1vZGFsSGVpZ2h0IDw9IG5ld0hlaWdodCAmJiBtb2RhbFdpZHRoIDw9IG5ld1dpZHRoO1xuXG4gICAgaWYgKHMuZGlzcGxheSA9PSAnY2VudGVyJykge1xuICAgICAgbGVmdCA9IE1hdGgubWF4KDAsIHNjcm9sbExlZnQgKyAobmV3V2lkdGggLSBtb2RhbFdpZHRoKSAvIDIpO1xuICAgICAgdG9wID0gTWF0aC5tYXgoMCwgc2Nyb2xsVG9wICsgKG5ld0hlaWdodCAtIG1vZGFsSGVpZ2h0KSAvIDIpO1xuICAgIH0gZWxzZSBpZiAocy5kaXNwbGF5ID09ICdidWJibGUnKSB7XG4gICAgICBhbmNob3IgPSBzLmFuY2hvciA9PT0gdW5kZWZpbmVkID8gJGVsbSA6ICQkMShzLmFuY2hvcik7XG4gICAgICBhcnJvdyA9ICQkMSgnLm1ic2MtZnItYXJyLWknLCAkbWFya3VwKVswXTtcbiAgICAgIGFuY2hvclBvcyA9IGFuY2hvci5vZmZzZXQoKTtcbiAgICAgIGFuY2hvclRvcCA9IGFuY2hvclBvcy50b3AgKyAoaGFzQ29udGV4dCA/IHNjcm9sbFRvcCAtICRjdHgub2Zmc2V0KCkudG9wIDogMCk7XG4gICAgICBhbmNob3JMZWZ0ID0gYW5jaG9yUG9zLmxlZnQgKyAoaGFzQ29udGV4dCA/IHNjcm9sbExlZnQgLSAkY3R4Lm9mZnNldCgpLmxlZnQgOiAwKTtcbiAgICAgIGFuY2hvcldpZHRoID0gYW5jaG9yWzBdLm9mZnNldFdpZHRoO1xuICAgICAgYW5jaG9ySGVpZ2h0ID0gYW5jaG9yWzBdLm9mZnNldEhlaWdodDtcbiAgICAgIGFycm93V2lkdGggPSBhcnJvdy5vZmZzZXRXaWR0aDtcbiAgICAgIGFycm93SGVpZ2h0ID0gYXJyb3cub2Zmc2V0SGVpZ2h0OyAvLyBIb3Jpem9udGFsIHBvc2l0aW9uaW5nXG5cbiAgICAgIGxlZnQgPSBjb25zdHJhaW4oYW5jaG9yTGVmdCAtIChtb2RhbFdpZHRoIC0gYW5jaG9yV2lkdGgpIC8gMiwgc2Nyb2xsTGVmdCArIDMsIHNjcm9sbExlZnQgKyBuZXdXaWR0aCAtIG1vZGFsV2lkdGggLSAzKTsgLy8gVmVydGljYWwgcG9zaXRpb25pbmdcbiAgICAgIC8vIEJlbG93IHRoZSBpbnB1dFxuXG4gICAgICB0b3AgPSBhbmNob3JUb3AgKyBhbmNob3JIZWlnaHQgKyBhcnJvd0hlaWdodCAvIDI7XG5cbiAgICAgIGlmICh0b3AgKyBtb2RhbEhlaWdodCArIDggPiBzY3JvbGxUb3AgKyBuZXdIZWlnaHQgJiYgYW5jaG9yVG9wIC0gbW9kYWxIZWlnaHQgLSBhcnJvd0hlaWdodCAvIDIgPiBzY3JvbGxUb3ApIHtcbiAgICAgICAgJHBvcHVwLnJlbW92ZUNsYXNzKCdtYnNjLWZyLWJ1YmJsZS1ib3R0b20nKS5hZGRDbGFzcygnbWJzYy1mci1idWJibGUtdG9wJyk7IC8vIEFib3ZlIHRoZSBpbnB1dFxuXG4gICAgICAgIHRvcCA9IGFuY2hvclRvcCAtIG1vZGFsSGVpZ2h0IC0gYXJyb3dIZWlnaHQgLyAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHBvcHVwLnJlbW92ZUNsYXNzKCdtYnNjLWZyLWJ1YmJsZS10b3AnKS5hZGRDbGFzcygnbWJzYy1mci1idWJibGUtYm90dG9tJyk7XG4gICAgICB9IC8vIFNldCBhcnJvdyBwb3NpdGlvblxuXG5cbiAgICAgICQkMSgnLm1ic2MtZnItYXJyJywgJG1hcmt1cCkuY3NzKHtcbiAgICAgICAgbGVmdDogY29uc3RyYWluKGFuY2hvckxlZnQgKyBhbmNob3JXaWR0aCAvIDIgLSAobGVmdCArIChtb2RhbFdpZHRoIC0gYXJyb3dXaWR0aCkgLyAyKSwgMCwgYXJyb3dXaWR0aClcbiAgICAgIH0pOyAvLyBMb2NrIHNjcm9sbCBvbmx5IGlmIHBvcHVwIGlzIGVudGlyZWx5IGluIHRoZSB2aWV3cG9ydFxuXG4gICAgICBzY3JvbGxMb2NrID0gdG9wID4gc2Nyb2xsVG9wICYmIGxlZnQgPiBzY3JvbGxMZWZ0ICYmIHRvcCArIG1vZGFsSGVpZ2h0IDw9IHNjcm9sbFRvcCArIG5ld0hlaWdodCAmJiBsZWZ0ICsgbW9kYWxXaWR0aCA8PSBzY3JvbGxMZWZ0ICsgbmV3V2lkdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSBzY3JvbGxMZWZ0O1xuICAgICAgdG9wID0gcy5kaXNwbGF5ID09ICd0b3AnID8gc2Nyb2xsVG9wIDogTWF0aC5tYXgoMCwgc2Nyb2xsVG9wICsgbmV3SGVpZ2h0IC0gbW9kYWxIZWlnaHQpO1xuICAgIH1cblxuICAgIGlmIChuZWVkc0RpbWVuc2lvbnMpIHtcbiAgICAgIC8vIElmIHRvcCArIG1vZGFsIGhlaWdodCA+IGRvYyBoZWlnaHQsIGluY3JlYXNlIGRvYyBoZWlnaHRcbiAgICAgIGRvY0hlaWdodCA9IE1hdGgubWF4KHRvcCArIG1vZGFsSGVpZ2h0LCBoYXNDb250ZXh0ID8gY3R4LnNjcm9sbEhlaWdodCA6ICQkMShkb2N1bWVudCkuaGVpZ2h0KCkpO1xuICAgICAgZG9jV2lkdGggPSBNYXRoLm1heChsZWZ0ICsgbW9kYWxXaWR0aCwgaGFzQ29udGV4dCA/IGN0eC5zY3JvbGxXaWR0aCA6ICQkMShkb2N1bWVudCkud2lkdGgoKSk7XG4gICAgICAkcGVyc3AuY3NzKHtcbiAgICAgICAgd2lkdGg6IGRvY1dpZHRoLFxuICAgICAgICBoZWlnaHQ6IGRvY0hlaWdodFxuICAgICAgfSk7IC8vIENoZWNrIGlmIHNjcm9sbCBuZWVkZWRcblxuICAgICAgaWYgKHMuc2Nyb2xsICYmIHMuZGlzcGxheSA9PSAnYnViYmxlJyAmJiAodG9wICsgbW9kYWxIZWlnaHQgKyA4ID4gc2Nyb2xsVG9wICsgbmV3SGVpZ2h0IHx8IGFuY2hvclRvcCA+IHNjcm9sbFRvcCArIG5ld0hlaWdodCB8fCBhbmNob3JUb3AgKyBhbmNob3JIZWlnaHQgPCBzY3JvbGxUb3ApKSB7XG4gICAgICAgICR3bmQuc2Nyb2xsVG9wKE1hdGgubWluKGFuY2hvclRvcCwgdG9wICsgbW9kYWxIZWlnaHQgLSBuZXdIZWlnaHQgKyA4LCBkb2NIZWlnaHQgLSBuZXdIZWlnaHQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjc3MudG9wID0gTWF0aC5mbG9vcih0b3ApO1xuICAgIGNzcy5sZWZ0ID0gTWF0aC5mbG9vcihsZWZ0KTtcbiAgICAkcG9wdXAuY3NzKGNzcyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG4gIC8qKlxuICAgKiBTaG93IG1vYmlzY3JvbGwgb24gZm9jdXMgYW5kIGNsaWNrIGV2ZW50IG9mIHRoZSBwYXJhbWV0ZXIuXG4gICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsbSAtIEV2ZW50cyB3aWxsIGJlIGF0dGFjaGVkIHRvIHRoaXMgZWxlbWVudC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2JlZm9yZVNob3c9dW5kZWZpbmVkXSAtIE9wdGlvbmFsIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgYmVmb3JlIHNob3dpbmcgbW9iaXNjcm9sbC5cbiAgICovXG5cblxuICB0aGF0LmF0dGFjaFNob3cgPSBmdW5jdGlvbiAoZWxtLCBiZWZvcmVTaG93KSB7XG4gICAgdmFyICRsYWJlbCxcbiAgICAgICAgJGVsbSA9ICQkMShlbG0pLm9mZignLm1ic2MnKSxcbiAgICAgICAgcmVhZE9ubHkgPSAkZWxtLnByb3AoJ3JlYWRvbmx5Jyk7XG4gICAgdGFwT2ZmKCRlbG0pO1xuXG4gICAgaWYgKHMuZGlzcGxheSAhPT0gJ2lubGluZScpIHtcbiAgICAgIGlmICgocy5zaG93T25Gb2N1cyB8fCBzLnNob3dPblRhcCkgJiYgJGVsbS5pcygnaW5wdXQsc2VsZWN0JykpIHtcbiAgICAgICAgJGVsbS5wcm9wKCdyZWFkb25seScsIHRydWUpLm9uKCdtb3VzZWRvd24ubWJzYycsIGZ1bmN0aW9uIChldikge1xuICAgICAgICAgIC8vIFByZXZlbnQgaW5wdXQgdG8gZ2V0IGZvY3VzIG9uIHRhcCAodmlydHVhbCBrZXlib2FyZCBwb3BzIHVwIG9uIHNvbWUgZGV2aWNlcylcbiAgICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9KS5vbignZm9jdXMubWJzYycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodGhhdC5faXNWaXNpYmxlKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBhbGxvdyBpbnB1dCBmb2N1cyBpZiBtb2Jpc2Nyb2xsIGlzIGJlaW5nIG9wZW5lZFxuICAgICAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgJGxhYmVsID0gJCQxKCdsYWJlbFtmb3I9XCInICsgJGVsbS5hdHRyKCdpZCcpICsgJ1wiXScpO1xuXG4gICAgICAgIGlmICghJGxhYmVsLmxlbmd0aCkge1xuICAgICAgICAgICRsYWJlbCA9ICRlbG0uY2xvc2VzdCgnbGFiZWwnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoISRlbG0uaXMoJ3NlbGVjdCcpKSB7XG4gICAgICAgIGlmIChzLnNob3dPbkZvY3VzKSB7XG4gICAgICAgICAgJGVsbS5vbignZm9jdXMubWJzYycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghcHJldmVudFNob3cpIHtcbiAgICAgICAgICAgICAgc2hvdyhiZWZvcmVTaG93LCAkZWxtKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHByZXZlbnRTaG93ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocy5zaG93T25UYXApIHtcbiAgICAgICAgICAkZWxtLm9uKCdrZXlkb3duLm1ic2MnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIGlmIChldi5rZXlDb2RlID09IDMyIHx8IGV2LmtleUNvZGUgPT0gMTMpIHtcbiAgICAgICAgICAgICAgLy8gU3BhY2Ugb3IgRW50ZXJcbiAgICAgICAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgZXYuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgIHNob3coYmVmb3JlU2hvdywgJGVsbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhhdC50YXAoJGVsbSwgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICBpZiAoZXYuaXNNYnNjVGFwKSB7XG4gICAgICAgICAgICAgIHRvdWNoZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzaG93KGJlZm9yZVNob3csICRlbG0pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaWYgKCRsYWJlbCAmJiAkbGFiZWwubGVuZ3RoKSB7XG4gICAgICAgICAgICB0YXBPZmYoJGxhYmVsKTtcbiAgICAgICAgICAgIHRoYXQudGFwKCRsYWJlbCwgZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgICAgaWYgKGV2LnRhcmdldCAhPT0gJGVsbVswXSkge1xuICAgICAgICAgICAgICAgIHNob3coYmVmb3JlU2hvdywgJGVsbSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlbG1MaXN0LnB1c2goe1xuICAgICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICAgIGVsOiAkZWxtLFxuICAgICAgICBsYmw6ICRsYWJlbFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogU2V0IGJ1dHRvbiBoYW5kbGVyLlxuICAgKi9cblxuXG4gIHRoYXQuc2VsZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChpc01vZGFsKSB7XG4gICAgICB0aGF0LmhpZGUoZmFsc2UsICdzZXQnLCBmYWxzZSwgc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0KCk7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogQ2FuY2VsIGFuZCBoaWRlIHRoZSBzY3JvbGxlciBpbnN0YW5jZS5cbiAgICovXG5cblxuICB0aGF0LmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoaXNNb2RhbCkge1xuICAgICAgdGhhdC5oaWRlKGZhbHNlLCAnY2FuY2VsJywgZmFsc2UsIGNhbmNlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbmNlbCgpO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIENsZWFyIGJ1dHRvbiBoYW5kbGVyLlxuICAgKi9cblxuXG4gIHRoYXQuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhhdC5fY2xlYXJWYWx1ZSgpO1xuXG4gICAgdHJpZ2dlcignb25DbGVhcicpO1xuXG4gICAgaWYgKGlzTW9kYWwgJiYgdGhhdC5faXNWaXNpYmxlICYmICF0aGF0LmxpdmUpIHtcbiAgICAgIHRoYXQuaGlkZShmYWxzZSwgJ2NsZWFyJywgZmFsc2UsIGNsZWFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYXIoKTtcbiAgICB9XG4gIH07XG4gIC8qKlxuICAgKiBFbmFibGVzIHRoZSBzY3JvbGxlciBhbmQgdGhlIGFzc29jaWF0ZWQgaW5wdXQuXG4gICAqL1xuXG5cbiAgdGhhdC5lbmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICQkMS5lYWNoKGVsbUxpc3QsIGZ1bmN0aW9uIChpLCB2KSB7XG4gICAgICBpZiAodi5lbC5pcygnaW5wdXQsc2VsZWN0JykpIHtcbiAgICAgICAgdi5lbFswXS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIHNjcm9sbGVyIGFuZCB0aGUgYXNzb2NpYXRlZCBpbnB1dC5cbiAgICovXG5cblxuICB0aGF0LmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcy5kaXNhYmxlZCA9IHRydWU7XG4gICAgJCQxLmVhY2goZWxtTGlzdCwgZnVuY3Rpb24gKGksIHYpIHtcbiAgICAgIGlmICh2LmVsLmlzKCdpbnB1dCxzZWxlY3QnKSkge1xuICAgICAgICB2LmVsWzBdLmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgLyoqXG4gICAqIFNob3dzIHRoZSBzY3JvbGxlciBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtCb29sZWFufSBwcmV2QW5pbSAtIFByZXZlbnQgYW5pbWF0aW9uIGlmIHRydWVcbiAgICogQHBhcmFtIHtCb29sZWFufSBwcmV2Rm9jdXMgLSBQcmV2ZW50IGZvY3VzaW5nIGlmIHRydWVcbiAgICovXG5cblxuICB0aGF0LnNob3cgPSBmdW5jdGlvbiAocHJldkFuaW0sIHByZXZGb2N1cykge1xuICAgIHZhciBoYXNCdXR0b25zLCBodG1sLCBzY3JvbGxMZWZ0LCBzY3JvbGxUb3A7XG5cbiAgICBpZiAocy5kaXNhYmxlZCB8fCB0aGF0Ll9pc1Zpc2libGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFBhcnNlIHZhbHVlIGZyb20gaW5wdXRcblxuXG4gICAgdGhhdC5fcmVhZFZhbHVlKCk7XG5cbiAgICBpZiAodHJpZ2dlcignb25CZWZvcmVTaG93JykgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgJGFjdGl2ZUVsbSA9IG51bGw7XG4gICAgZG9BbmltID0gcy5hbmltYXRlO1xuICAgIGJ1dHRvbnMgPSBzLmJ1dHRvbnMgfHwgW107XG4gICAgbmVlZHNEaW1lbnNpb25zID0gaGFzQ29udGV4dCB8fCBzLmRpc3BsYXkgPT0gJ2J1YmJsZSc7XG4gICAgbmVlZHNMb2NrID0gbmVlZHNGaXhlZCAmJiAhbmVlZHNEaW1lbnNpb25zICYmIHMuc2Nyb2xsTG9jaztcbiAgICBoYXNCdXR0b25zID0gYnV0dG9ucy5sZW5ndGggPiAwOyAvL3RvdWNoZWQgPSBmYWxzZTtcblxuICAgIGlmIChkb0FuaW0gIT09IGZhbHNlKSB7XG4gICAgICBpZiAocy5kaXNwbGF5ID09ICd0b3AnKSB7XG4gICAgICAgIGRvQW5pbSA9IGRvQW5pbSB8fCAnc2xpZGVkb3duJztcbiAgICAgIH0gZWxzZSBpZiAocy5kaXNwbGF5ID09ICdib3R0b20nKSB7XG4gICAgICAgIGRvQW5pbSA9IGRvQW5pbSB8fCAnc2xpZGV1cCc7XG4gICAgICB9IGVsc2UgaWYgKHMuZGlzcGxheSA9PSAnY2VudGVyJyB8fCBzLmRpc3BsYXkgPT0gJ2J1YmJsZScpIHtcbiAgICAgICAgZG9BbmltID0gZG9BbmltIHx8ICdwb3AnO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc01vZGFsKSB7XG4gICAgICB3bmRXaWR0aCA9IDA7XG4gICAgICB3bmRIZWlnaHQgPSAwO1xuXG4gICAgICBpZiAobmVlZHNMb2NrICYmICEkbG9jay5oYXNDbGFzcygnbWJzYy1mci1sb2NrLWlvcycpKSB7XG4gICAgICAgIC8vJGxvY2suc2Nyb2xsVG9wKDApO1xuICAgICAgICBjdHgubWJzY1Njcm9sbFRvcCA9IHNjcm9sbFRvcCA9IE1hdGgubWF4KDAsICR3bmQuc2Nyb2xsVG9wKCkpO1xuICAgICAgICBjdHgubWJzY1Njcm9sbExlZnQgPSBzY3JvbGxMZWZ0ID0gTWF0aC5tYXgoMCwgJHduZC5zY3JvbGxMZWZ0KCkpO1xuICAgICAgICAkY3R4LmNzcyh7XG4gICAgICAgICAgdG9wOiAtc2Nyb2xsVG9wICsgJ3B4JyxcbiAgICAgICAgICBsZWZ0OiAtc2Nyb2xsTGVmdCArICdweCdcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgICRsb2NrLmFkZENsYXNzKChzLnNjcm9sbExvY2sgPyAnbWJzYy1mci1sb2NrJyA6ICcnKSArIChuZWVkc0xvY2sgPyAnIG1ic2MtZnItbG9jay1pb3MnIDogJycpICsgKGhhc0NvbnRleHQgPyAnIG1ic2MtZnItbG9jay1jdHgnIDogJycpKTsgLy8gSGlkZSB2aXJ0dWFsIGtleWJvYXJkXG5cbiAgICAgIGlmICgkJDEoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoJ2lucHV0LHRleHRhcmVhJykpIHtcbiAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgICB9IC8vIFNhdmUgYWN0aXZlIGluc3RhbmNlIHRvIHByZXZpb3VzXG5cblxuICAgICAgcHJldkluc3QgPSBtb2Jpc2Nyb2xsLmFjdGl2ZUluc3RhbmNlOyAvLyBTZXQgYWN0aXZlIGluc3RhbmNlXG5cbiAgICAgIG1vYmlzY3JvbGwuYWN0aXZlSW5zdGFuY2UgPSB0aGF0OyAvLyBLZWVwIHRyYWNrIG9mIG1vZGFscyBvcGVuZWQgcGVyIGNvbnRleHRcblxuICAgICAgY3R4Lm1ic2NNb2RhbHMgPSAoY3R4Lm1ic2NNb2RhbHMgfHwgMCkgKyAxO1xuXG4gICAgICBpZiAobmVlZHNMb2NrKSB7XG4gICAgICAgIGN0eC5tYnNjSU9TTG9jayA9IChjdHgubWJzY0lPU0xvY2sgfHwgMCkgKyAxO1xuICAgICAgfVxuXG4gICAgICBpZiAocy5zY3JvbGxMb2NrKSB7XG4gICAgICAgIGN0eC5tYnNjTG9jayA9IChjdHgubWJzY0xvY2sgfHwgMCkgKyAxO1xuICAgICAgfVxuICAgIH0gLy8gQ3JlYXRlIHdoZWVscyBjb250YWluZXJzXG5cblxuICAgIGh0bWwgPSAnPGRpdiBsYW5nPVwiJyArIHMubGFuZyArICdcIiBjbGFzcz1cIm1ic2MtZnIgbWJzYy0nICsgcy50aGVtZSArIChzLmJhc2VUaGVtZSA/ICcgbWJzYy0nICsgcy5iYXNlVGhlbWUgOiAnJykgKyAnIG1ic2MtZnItJyArIHMuZGlzcGxheSArICcgJyArIChzLmNzc0NsYXNzIHx8ICcnKSArICcgJyArIChzLmNvbXBDbGFzcyB8fCAnJykgKyAodGhhdC5faXNMaXF1aWQgPyAnIG1ic2MtZnItbGlxJyA6ICcnKSArIChpc01vZGFsID8gJyBtYnNjLWZyLXBvcycgKyAocy5zaG93T3ZlcmxheSA/ICcnIDogJyBtYnNjLWZyLW5vLW92ZXJsYXknKSA6ICcnKSArIChpc1BvaW50ZXIgPyAnIG1ic2MtZnItcG9pbnRlcicgOiAnJykgKyAoaGFsZkJvcmRlciA/ICcgbWJzYy1mci1oYicgOiAnJykgKyAodG91Y2hlZCA/ICcnIDogJyBtYnNjLW5vLXRvdWNoJykgKyAobmVlZHNMb2NrID8gJyBtYnNjLXBsYXRmb3JtLWlvcycgOiAnJykgKyAoaGFzQnV0dG9ucyA/IGJ1dHRvbnMubGVuZ3RoID49IDMgPyAnIG1ic2MtZnItYnRuLWJsb2NrICcgOiAnJyA6ICcgbWJzYy1mci1ub2J0bicpICsgJ1wiPicgKyAoaXNNb2RhbCA/ICc8ZGl2IGNsYXNzPVwibWJzYy1mci1wZXJzcFwiPicgKyAocy5zaG93T3ZlcmxheSA/ICc8ZGl2IGNsYXNzPVwibWJzYy1mci1vdmVybGF5XCI+PC9kaXY+JyA6ICcnKSArIC8vIE92ZXJsYXlcbiAgICAnPGRpdiByb2xlPVwiZGlhbG9nXCIgY2xhc3M9XCJtYnNjLWZyLXNjcm9sbFwiPicgOiAnJykgKyAnPGRpdiBjbGFzcz1cIm1ic2MtZnItcG9wdXAnICsgKHMucnRsID8gJyBtYnNjLXJ0bCcgOiAnIG1ic2MtbHRyJykgKyAocy5oZWFkZXJUZXh0ID8gJyBtYnNjLWZyLWhhcy1oZHInIDogJycpICsgJ1wiPicgKyAoIC8vIFBvcHVwXG4gICAgcy5kaXNwbGF5ID09PSAnYnViYmxlJyA/ICc8ZGl2IGNsYXNzPVwibWJzYy1mci1hcnItd1wiPjxkaXYgY2xhc3M9XCJtYnNjLWZyLWFyci1pXCI+PGRpdiBjbGFzcz1cIm1ic2MtZnItYXJyXCI+PC9kaXY+PC9kaXY+PC9kaXY+JyA6ICcnKSArICggLy8gQnViYmxlIGFycm93XG4gICAgaXNNb2RhbCA/ICc8ZGl2IGNsYXNzPVwibWJzYy1mci1mb2N1c1wiIHRhYmluZGV4PVwiLTFcIj48L2Rpdj4nIDogJycpICsgJzxkaXYgY2xhc3M9XCJtYnNjLWZyLXdcIj4nICsgKCAvLyBQb3B1cCBjb250ZW50XG4gICAgLy8nPGRpdiBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIiBjbGFzcz1cIm1ic2MtZnItYXJpYSBtYnNjLWZyLWhkblwiPjwvZGl2PicgK1xuICAgIHMuaGVhZGVyVGV4dCA/ICc8ZGl2IGNsYXNzPVwibWJzYy1mci1oZHJcIj4nICsgKGlzU3RyaW5nKHMuaGVhZGVyVGV4dCkgPyBzLmhlYWRlclRleHQgOiAnJykgKyAnPC9kaXY+JyA6ICcnKSArIC8vIEhlYWRlclxuICAgICc8ZGl2IGNsYXNzPVwibWJzYy1mci1jXCI+JzsgLy8gV2hlZWwgZ3JvdXAgY29udGFpbmVyXG5cbiAgICBodG1sICs9IHRoYXQuX2dlbmVyYXRlQ29udGVudCgpO1xuICAgIGh0bWwgKz0gJzwvZGl2Pic7XG5cbiAgICBpZiAoaGFzQnV0dG9ucykge1xuICAgICAgdmFyIGIsXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqLFxuICAgICAgICAgIGwgPSBidXR0b25zLmxlbmd0aDtcbiAgICAgIGh0bWwgKz0gJzxkaXYgY2xhc3M9XCJtYnNjLWZyLWJ0bi1jb250XCI+JztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaiA9IHMuYnRuUmV2ZXJzZSA/IGwgLSBpIC0gMSA6IGk7XG4gICAgICAgIGIgPSBidXR0b25zW2pdO1xuICAgICAgICBiID0gaXNTdHJpbmcoYikgPyB0aGF0LmJ1dHRvbnNbYl0gOiBiO1xuXG4gICAgICAgIGlmIChiLmhhbmRsZXIgPT09ICdzZXQnKSB7XG4gICAgICAgICAgYi5wYXJlbnRDbGFzcyA9ICdtYnNjLWZyLWJ0bi1zJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiLmhhbmRsZXIgPT09ICdjYW5jZWwnKSB7XG4gICAgICAgICAgYi5wYXJlbnRDbGFzcyA9ICdtYnNjLWZyLWJ0bi1jJztcbiAgICAgICAgfVxuXG4gICAgICAgIGh0bWwgKz0gJzxkaXYnICsgKHMuYnRuV2lkdGggPyAnIHN0eWxlPVwid2lkdGg6JyArIDEwMCAvIGJ1dHRvbnMubGVuZ3RoICsgJyVcIicgOiAnJykgKyAnIGNsYXNzPVwibWJzYy1mci1idG4tdyAnICsgKGIucGFyZW50Q2xhc3MgfHwgJycpICsgJ1wiPicgKyAnPGRpdiB0YWJpbmRleD1cIjBcIiByb2xlPVwiYnV0dG9uXCIgY2xhc3M9XCJtYnNjLWZyLWJ0bicgKyBqICsgJyBtYnNjLWZyLWJ0bi1lICcgKyAoYi5jc3NDbGFzcyA9PT0gdW5kZWZpbmVkID8gcy5idG5DbGFzcyA6IGIuY3NzQ2xhc3MpICsgKGIuaWNvbiA/ICcgbWJzYy1pYyBtYnNjLWljLScgKyBiLmljb24gOiAnJykgKyAnXCI+JyArIChiLnRleHQgfHwgJycpICsgJzwvZGl2PjwvZGl2Pic7XG4gICAgICB9XG5cbiAgICAgIGh0bWwgKz0gJzwvZGl2Pic7XG4gICAgfVxuXG4gICAgaHRtbCArPSAnPC9kaXY+PC9kaXY+PC9kaXY+PC9kaXY+JyArIChpc01vZGFsID8gJzwvZGl2PjwvZGl2PicgOiAnJyk7XG4gICAgJG1hcmt1cCA9ICQkMShodG1sKTtcbiAgICAkcGVyc3AgPSAkJDEoJy5tYnNjLWZyLXBlcnNwJywgJG1hcmt1cCk7XG4gICAgJG92ZXJsYXkgPSAkJDEoJy5tYnNjLWZyLXNjcm9sbCcsICRtYXJrdXApO1xuICAgICR3cmFwcGVyID0gJCQxKCcubWJzYy1mci13JywgJG1hcmt1cCk7XG4gICAgJHBvcHVwID0gJCQxKCcubWJzYy1mci1wb3B1cCcsICRtYXJrdXApO1xuICAgICRoZWFkZXIgPSAkJDEoJy5tYnNjLWZyLWhkcicsICRtYXJrdXApOyAvLyRhcmlhRGl2ID0gJCgnLm1ic2MtZnItYXJpYScsICRtYXJrdXApO1xuXG4gICAgbWFya3VwID0gJG1hcmt1cFswXTtcbiAgICBvdmVybGF5ID0gJG92ZXJsYXlbMF07XG4gICAgcG9wdXAgPSAkcG9wdXBbMF07XG4gICAgdGhhdC5fYWN0aXZlRWxtID0gJCQxKCcubWJzYy1mci1mb2N1cycsICRtYXJrdXApWzBdO1xuICAgIHRoYXQuX21hcmt1cCA9ICRtYXJrdXA7XG4gICAgdGhhdC5faXNWaXNpYmxlID0gdHJ1ZTtcbiAgICB0aGF0Lm1hcmt1cCA9IG1hcmt1cDtcblxuICAgIHRoYXQuX21hcmt1cFJlYWR5KCRtYXJrdXApO1xuXG4gICAgdHJpZ2dlcignb25NYXJrdXBSZWFkeScsIHtcbiAgICAgIHRhcmdldDogbWFya3VwXG4gICAgfSk7IC8vIEF0dGFjaCBldmVudHNcblxuICAgIGlmIChpc01vZGFsKSB7XG4gICAgICAvLyBFbnRlciAvIEVTQ1xuICAgICAgJCQxKHdpbmRvdykub24oJ2tleWRvd24nLCBvblduZEtleURvd24pOyAvLyBQcmV2ZW50IHNjcm9sbCBpZiBub3Qgc3BlY2lmaWVkIG90aGVyd2lzZVxuXG4gICAgICBpZiAocy5zY3JvbGxMb2NrKSB7XG4gICAgICAgIGxpc3Rlbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIG9uU2Nyb2xsLCB7XG4gICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIGxpc3Rlbihkb2N1bWVudCwgJ21vdXNld2hlZWwnLCBvblNjcm9sbCwge1xuICAgICAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBsaXN0ZW4oZG9jdW1lbnQsICd3aGVlbCcsIG9uU2Nyb2xsLCB7XG4gICAgICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzLmZvY3VzVHJhcCkge1xuICAgICAgICAkd25kLm9uKCdmb2N1c2luJywgb25Gb2N1cyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzTW9kYWwpIHtcbiAgICAgIC8vIFdhaXQgZm9yIHRoZSB0b29sYmFyIGFuZCBhZGRyZXNzYmFyIHRvIGFwcGVhciBvbiBpT1NcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBpbnNlcnRNYXJrdXAocHJldkFuaW0sIHByZXZGb2N1cyk7XG4gICAgICB9LCBuZWVkc0xvY2sgPyAxMDAgOiAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zZXJ0TWFya3VwKHByZXZBbmltLCBwcmV2Rm9jdXMpO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIEhpZGVzIHRoZSBzY3JvbGxlciBpbnN0YW5jZS5cbiAgICovXG5cblxuICB0aGF0LmhpZGUgPSBmdW5jdGlvbiAocHJldkFuaW0sIGJ0biwgZm9yY2UsIGNhbGxiYWNrKSB7XG4gICAgZnVuY3Rpb24gb25BbmltRW5kKCkge1xuICAgICAgJG1hcmt1cC5vZmYoYW5pbUVuZCwgb25BbmltRW5kKTtcbiAgICAgIG9uSGlkZShwcmV2QW5pbSk7XG4gICAgfSAvLyBJZiBvbkNsb3NlIGhhbmRsZXIgcmV0dXJucyBmYWxzZSwgcHJldmVudCBoaWRlXG5cblxuICAgIGlmICghdGhhdC5faXNWaXNpYmxlIHx8ICFmb3JjZSAmJiAhdGhhdC5faXNWYWxpZCAmJiBidG4gPT0gJ3NldCcgfHwgIWZvcmNlICYmIHRyaWdnZXIoJ29uQmVmb3JlQ2xvc2UnLCB7XG4gICAgICB2YWx1ZVRleHQ6IHRoYXQuX3RlbXBWYWx1ZSxcbiAgICAgIGJ1dHRvbjogYnRuXG4gICAgfSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhhdC5faXNWaXNpYmxlID0gZmFsc2U7XG5cbiAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgIG9ic2VydmVyLmRldGFjaCgpO1xuICAgICAgb2JzZXJ2ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChpc01vZGFsKSB7XG4gICAgICBpZiAoJCQxKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpLmlzKCdpbnB1dCx0ZXh0YXJlYScpICYmIHBvcHVwLmNvbnRhaW5zKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICAgICAgfVxuXG4gICAgICBpZiAobW9iaXNjcm9sbC5hY3RpdmVJbnN0YW5jZSA9PSB0aGF0KSB7XG4gICAgICAgIG1vYmlzY3JvbGwuYWN0aXZlSW5zdGFuY2UgPSBwcmV2SW5zdDtcbiAgICAgIH1cblxuICAgICAgJCQxKHdpbmRvdykub2ZmKCdrZXlkb3duJywgb25XbmRLZXlEb3duKTtcbiAgICAgICR3bmQub2ZmKCdmb2N1c2luJywgb25Gb2N1cyk7XG4gICAgICB1bmxpc3Rlbihkb2N1bWVudCwgJ3RvdWNobW92ZScsIG9uU2Nyb2xsLCB7XG4gICAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHVubGlzdGVuKGRvY3VtZW50LCAnbW91c2V3aGVlbCcsIG9uU2Nyb2xsLCB7XG4gICAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHVubGlzdGVuKGRvY3VtZW50LCAnd2hlZWwnLCBvblNjcm9sbCwge1xuICAgICAgICBwYXNzaXZlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSAvLyBIaWRlIHdoZWVscyBhbmQgb3ZlcmxheVxuXG5cbiAgICBpZiAoJG1hcmt1cCkge1xuICAgICAgaWYgKGlzTW9kYWwgJiYgaXNJbnNlcnRlZCAmJiBkb0FuaW0gJiYgIXByZXZBbmltKSB7XG4gICAgICAgICRtYXJrdXAuYWRkQ2xhc3MoJ21ic2MtYW5pbS1vdXQgbWJzYy1hbmltLXRyYW5zIG1ic2MtYW5pbS10cmFucy0nICsgZG9BbmltKS5vbihhbmltRW5kLCBvbkFuaW1FbmQpLmZpbmQoJy5tYnNjLWZyLXBvcHVwJykuYWRkQ2xhc3MoJ21ic2MtYW5pbS0nICsgZG9BbmltKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uSGlkZShwcmV2QW5pbSk7XG4gICAgICB9XG5cbiAgICAgIHRoYXQuX2RldGFjaEV2ZW50cygkbWFya3VwKTtcbiAgICB9XG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSAvLyBGb3IgdmFsaWRhdGlvblxuXG5cbiAgICAkZWxtLnRyaWdnZXIoJ2JsdXInKTtcbiAgICB0cmlnZ2VyKCdvbkNsb3NlJywge1xuICAgICAgdmFsdWVUZXh0OiB0aGF0Ll92YWx1ZVxuICAgIH0pO1xuICB9OyAvLyB0aGF0LmFyaWFNZXNzYWdlID0gZnVuY3Rpb24gKHR4dCkge1xuICAvLyAgICAgJGFyaWFEaXYuaHRtbCgnJyk7XG4gIC8vICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgLy8gICAgICAgICAkYXJpYURpdi5odG1sKHR4dCk7XG4gIC8vICAgICB9LCAxMDApO1xuICAvLyB9O1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgc2Nyb2xsZXIgaXMgY3VycmVudGx5IHZpc2libGUuXG4gICAqL1xuXG5cbiAgdGhhdC5pc1Zpc2libGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoYXQuX2lzVmlzaWJsZTtcbiAgfTsgLy8gUHJvdGVjdGVkIGZ1bmN0aW9ucyB0byBvdmVycmlkZVxuXG5cbiAgdGhhdC5zZXRWYWwgPSBub29wO1xuICB0aGF0LmdldFZhbCA9IG5vb3A7XG4gIHRoYXQuX2dlbmVyYXRlQ29udGVudCA9IG5vb3A7XG4gIHRoYXQuX2F0dGFjaEV2ZW50cyA9IG5vb3A7XG4gIHRoYXQuX2RldGFjaEV2ZW50cyA9IG5vb3A7XG4gIHRoYXQuX3JlYWRWYWx1ZSA9IG5vb3A7XG4gIHRoYXQuX2NsZWFyVmFsdWUgPSBub29wO1xuICB0aGF0Ll9maWxsVmFsdWUgPSBub29wO1xuICB0aGF0Ll9tYXJrdXBSZWFkeSA9IG5vb3A7XG4gIHRoYXQuX21hcmt1cEluc2VydGVkID0gbm9vcDtcbiAgdGhhdC5fbWFya3VwUmVtb3ZlID0gbm9vcDtcbiAgdGhhdC5fcG9zaXRpb24gPSBub29wO1xuICB0aGF0Ll9fcHJvY2Vzc1NldHRpbmdzID0gbm9vcDtcbiAgdGhhdC5fX2luaXQgPSBub29wO1xuICB0aGF0Ll9fZGVzdHJveSA9IG5vb3A7IC8vIEdlbmVyaWMgZnJhbWUgZnVuY3Rpb25zXG5cbiAgLyoqXG4gICAqIERlc3Ryb3lzIHRoZSBtb2Jpc2Nyb2xsIGluc3RhbmNlLlxuICAgKi9cblxuICB0aGF0Ll9kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIEZvcmNlIGhpZGUgd2l0aG91dCBhbmltYXRpb25cbiAgICB0aGF0LmhpZGUodHJ1ZSwgZmFsc2UsIHRydWUpO1xuICAgICRlbG0ub2ZmKCcubWJzYycpO1xuICAgIHRhcE9mZigkZWxtKTsgLy8gUmVtb3ZlIGFsbCBldmVudHMgZnJvbSBlbGVtZW50c1xuXG4gICAgJCQxLmVhY2goZWxtTGlzdCwgZnVuY3Rpb24gKGksIHYpIHtcbiAgICAgIHYuZWwub2ZmKCcubWJzYycpLnByb3AoJ3JlYWRvbmx5Jywgdi5yZWFkT25seSk7XG4gICAgICB0YXBPZmYodi5lbCk7XG5cbiAgICAgIGlmICh2LmxibCkge1xuICAgICAgICB2LmxibC5vZmYoJy5tYnNjJyk7XG4gICAgICAgIHRhcE9mZih2LmxibCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGF0Ll9fZGVzdHJveSgpO1xuICB9O1xuXG4gIHRoYXQuX3VwZGF0ZUhlYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdCA9IHMuaGVhZGVyVGV4dCxcbiAgICAgICAgdHh0ID0gdCA/IHR5cGVvZiB0ID09PSAnZnVuY3Rpb24nID8gdC5jYWxsKGVsLCB0aGF0Ll90ZW1wVmFsdWUpIDogdC5yZXBsYWNlKC9cXHt2YWx1ZVxcfS9pLCB0aGF0Ll90ZW1wVmFsdWUpIDogJyc7XG4gICAgJGhlYWRlci5odG1sKHR4dCB8fCAnJm5ic3A7Jyk7XG4gIH07XG5cbiAgdGhhdC5fZ2V0UmVzcENvbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaGFzQ29udGV4dCA9IHMuY29udGV4dCAhPSAnYm9keSc7XG4gICAgJHduZCA9ICQkMShoYXNDb250ZXh0ID8gcy5jb250ZXh0IDogd2luZG93KTtcbiAgICByZXR1cm4gcy5kaXNwbGF5ID09ICdpbmxpbmUnID8gJGVsbS5pcygnZGl2JykgPyAkZWxtIDogJGVsbS5wYXJlbnQoKSA6ICR3bmQ7XG4gIH07XG5cbiAgdGhhdC5fcHJvY2Vzc1NldHRpbmdzID0gZnVuY3Rpb24gKHJlc3ApIHtcbiAgICB2YXIgYiwgaTtcblxuICAgIHRoYXQuX19wcm9jZXNzU2V0dGluZ3MocmVzcCk7XG5cbiAgICBpc1BvaW50ZXIgPSAhcy50b3VjaFVpO1xuXG4gICAgaWYgKGlzUG9pbnRlcikge1xuICAgICAgcy5kaXNwbGF5ID0gcmVzcC5kaXNwbGF5IHx8IHNldHRpbmdzLmRpc3BsYXkgfHwgJ2J1YmJsZSc7XG4gICAgICBzLmJ1dHRvbnMgPSByZXNwLmJ1dHRvbnMgfHwgc2V0dGluZ3MuYnV0dG9ucyB8fCBbXTtcbiAgICAgIHMuc2hvd092ZXJsYXkgPSByZXNwLnNob3dPdmVybGF5IHx8IHNldHRpbmdzLnNob3dPdmVybGF5IHx8IGZhbHNlO1xuICAgIH0gLy8gQWRkIGRlZmF1bHQgYnV0dG9uc1xuXG5cbiAgICBzLmJ1dHRvbnMgPSBzLmJ1dHRvbnMgfHwgKHMuZGlzcGxheSAhPT0gJ2lubGluZScgPyBbJ2NhbmNlbCcsICdzZXQnXSA6IFtdKTsgLy8gSGlkZSBoZWFkZXIgdGV4dCBpbiBpbmxpbmUgbW9kZSBieSBkZWZhdWx0XG5cbiAgICBzLmhlYWRlclRleHQgPSBzLmhlYWRlclRleHQgPT09IHVuZGVmaW5lZCA/IHMuZGlzcGxheSAhPT0gJ2lubGluZScgPyAne3ZhbHVlfScgOiBmYWxzZSA6IHMuaGVhZGVyVGV4dDtcbiAgICBidXR0b25zID0gcy5idXR0b25zIHx8IFtdO1xuICAgIGlzTW9kYWwgPSBzLmRpc3BsYXkgIT09ICdpbmxpbmUnO1xuICAgICRjdHggPSAkJDEocy5jb250ZXh0KTtcbiAgICAkbG9jayA9IGhhc0NvbnRleHQgPyAkY3R4IDogJCQxKCdib2R5LGh0bWwnKTtcbiAgICBjdHggPSAkY3R4WzBdO1xuICAgIHRoYXQubGl2ZSA9IHRydWU7IC8vIElmIG5vIHNldCBidXR0b24gaXMgZm91bmQsIGxpdmUgbW9kZSBpcyBhY3RpdmF0ZWRcblxuICAgIGZvciAoaSA9IDA7IGkgPCBidXR0b25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBiID0gYnV0dG9uc1tpXTtcblxuICAgICAgaWYgKGIgPT0gJ29rJyB8fCBiID09ICdzZXQnIHx8IGIuaGFuZGxlciA9PSAnc2V0Jykge1xuICAgICAgICB0aGF0LmxpdmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGF0LmJ1dHRvbnMuc2V0ID0ge1xuICAgICAgdGV4dDogcy5zZXRUZXh0LFxuICAgICAgaWNvbjogcy5zZXRJY29uLFxuICAgICAgaGFuZGxlcjogJ3NldCdcbiAgICB9O1xuICAgIHRoYXQuYnV0dG9ucy5jYW5jZWwgPSB7XG4gICAgICB0ZXh0OiBzLmNhbmNlbFRleHQsXG4gICAgICBpY29uOiBzLmNhbmNlbEljb24sXG4gICAgICBoYW5kbGVyOiAnY2FuY2VsJ1xuICAgIH07XG4gICAgdGhhdC5idXR0b25zLmNsb3NlID0ge1xuICAgICAgdGV4dDogcy5jbG9zZVRleHQsXG4gICAgICBpY29uOiBzLmNsb3NlSWNvbixcbiAgICAgIGhhbmRsZXI6ICdjYW5jZWwnXG4gICAgfTtcbiAgICB0aGF0LmJ1dHRvbnMuY2xlYXIgPSB7XG4gICAgICB0ZXh0OiBzLmNsZWFyVGV4dCxcbiAgICAgIGljb246IHMuY2xlYXJJY29uLFxuICAgICAgaGFuZGxlcjogJ2NsZWFyJ1xuICAgIH07XG4gICAgdGhhdC5faXNJbnB1dCA9ICRlbG0uaXMoJ2lucHV0Jyk7XG4gIH07XG4gIC8qKlxuICAgKiBTY3JvbGxlciBpbml0aWFsaXphdGlvbi5cbiAgICovXG5cblxuICB0aGF0Ll9pbml0ID0gZnVuY3Rpb24gKG5ld1NldHRpbmdzKSB7XG4gICAgdmFyIHdhc1Zpc2libGUgPSB0aGF0Ll9pc1Zpc2libGUsXG4gICAgICAgIHdhc1JlYWR5ID0gd2FzVmlzaWJsZSAmJiAhJG1hcmt1cC5oYXNDbGFzcygnbWJzYy1mci1wb3MnKTtcblxuICAgIGlmICh3YXNWaXNpYmxlKSB7XG4gICAgICB0aGF0LmhpZGUodHJ1ZSwgZmFsc2UsIHRydWUpO1xuICAgIH0gLy8gVW5iaW5kIGFsbCBldmVudHMgKGlmIHJlLWluaXQpXG5cblxuICAgICRlbG0ub2ZmKCcubWJzYycpO1xuICAgIHRhcE9mZigkZWxtKTtcblxuICAgIHRoYXQuX19pbml0KG5ld1NldHRpbmdzKTtcblxuICAgIHRoYXQuX2lzTGlxdWlkID0gcy5sYXlvdXQgPT0gJ2xpcXVpZCc7XG5cbiAgICBpZiAoaXNNb2RhbCkge1xuICAgICAgdGhhdC5fcmVhZFZhbHVlKCk7XG5cbiAgICAgIGlmICghdGhhdC5faGFzQ29udGVudCAmJiAhcy5za2lwU2hvdykge1xuICAgICAgICB0aGF0LmF0dGFjaFNob3coJGVsbSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh3YXNWaXNpYmxlKSB7XG4gICAgICAgIHRoYXQuc2hvdyh3YXNSZWFkeSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuc2hvdygpO1xuICAgIH1cblxuICAgICRlbG0ucmVtb3ZlQ2xhc3MoJ21ic2MtY2xvYWsnKS5maWx0ZXIoJ2lucHV0LCBzZWxlY3QsIHRleHRhcmVhJykub24oJ2NoYW5nZS5tYnNjJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGF0Ll9wcmV2ZW50Q2hhbmdlKSB7XG4gICAgICAgIHRoYXQuc2V0VmFsKCRlbG0udmFsKCksIHRydWUsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgdGhhdC5fcHJldmVudENoYW5nZSA9IGZhbHNlO1xuICAgIH0pO1xuICB9O1xuXG4gIHRoYXQuYnV0dG9ucyA9IHt9O1xuICB0aGF0LmhhbmRsZXJzID0ge1xuICAgIHNldDogdGhhdC5zZWxlY3QsXG4gICAgY2FuY2VsOiB0aGF0LmNhbmNlbCxcbiAgICBjbGVhcjogdGhhdC5jbGVhclxuICB9O1xuICB0aGF0Ll92YWx1ZSA9IG51bGw7XG4gIHRoYXQuX2lzVmFsaWQgPSB0cnVlO1xuICB0aGF0Ll9pc1Zpc2libGUgPSBmYWxzZTsgLy8gQ29uc3RydWN0b3JcblxuICBzID0gdGhhdC5zZXR0aW5ncztcbiAgdHJpZ2dlciA9IHRoYXQudHJpZ2dlcjtcblxuICBpZiAoIWluaGVyaXQpIHtcbiAgICB0aGF0LmluaXQoKTtcbiAgfVxufTtcbkZyYW1lLnByb3RvdHlwZS5fZGVmYXVsdHMgPSB7XG4gIC8vIExvY2FsaXphdGlvblxuICBsYW5nOiAnZW4nLFxuICBzZXRUZXh0OiAnU2V0JyxcbiAgc2VsZWN0ZWRUZXh0OiAne2NvdW50fSBzZWxlY3RlZCcsXG4gIGNsb3NlVGV4dDogJ0Nsb3NlJyxcbiAgY2FuY2VsVGV4dDogJ0NhbmNlbCcsXG4gIGNsZWFyVGV4dDogJ0NsZWFyJyxcbiAgLy8gT3B0aW9uc1xuICBjb250ZXh0OiAnYm9keScsXG4gIG1heFBvcHVwV2lkdGg6IDYwMCxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBjbG9zZU9uT3ZlcmxheVRhcDogdHJ1ZSxcbiAgc2hvd09uRm9jdXM6IGlzQW5kcm9pZCB8fCBpc0lPUyxcbiAgLy8gTmVlZGVkIGZvciBpb24taW5wdXRcbiAgc2hvd09uVGFwOiB0cnVlLFxuICBkaXNwbGF5OiAnY2VudGVyJyxcbiAgc2Nyb2xsOiB0cnVlLFxuICBzY3JvbGxMb2NrOiB0cnVlLFxuICBzaG93T3ZlcmxheTogdHJ1ZSxcbiAgdGFwOiB0cnVlLFxuICB0b3VjaFVpOiB0cnVlLFxuICBidG5DbGFzczogJ21ic2MtZnItYnRuJyxcbiAgYnRuV2lkdGg6IHRydWUsXG4gIGZvY3VzVHJhcDogdHJ1ZSxcbiAgZm9jdXNPbkNsb3NlOiAhaXNJT1M4IC8vIFRlbXBvcmFyeSBmb3IgaU9TOFxuXG59O1xuY2xhc3Nlcy5GcmFtZSA9IEZyYW1lO1xudGhlbWVzLmZyYW1lLm1vYmlzY3JvbGwgPSB7XG4gIGhlYWRlclRleHQ6IGZhbHNlLFxuICBidG5XaWR0aDogZmFsc2Vcbn07XG50aGVtZXMuc2Nyb2xsZXIubW9iaXNjcm9sbCA9IGV4dGVuZCQxKHt9LCB0aGVtZXMuZnJhbWUubW9iaXNjcm9sbCwge1xuICByb3dzOiA1LFxuICBzaG93TGFiZWw6IGZhbHNlLFxuICBzZWxlY3RlZExpbmVCb3JkZXI6IDEsXG4gIHdlZWtEYXlzOiAnbWluJyxcbiAgY2hlY2tJY29uOiAnaW9uLWlvczctY2hlY2ttYXJrLWVtcHR5JyxcbiAgYnRuUGx1c0NsYXNzOiAnbWJzYy1pYyBtYnNjLWljLWFycm93LWRvd241JyxcbiAgYnRuTWludXNDbGFzczogJ21ic2MtaWMgbWJzYy1pYy1hcnJvdy11cDUnLFxuICBidG5DYWxQcmV2Q2xhc3M6ICdtYnNjLWljIG1ic2MtaWMtYXJyb3ctbGVmdDUnLFxuICBidG5DYWxOZXh0Q2xhc3M6ICdtYnNjLWljIG1ic2MtaWMtYXJyb3ctcmlnaHQ1J1xufSk7XG5cbmlmIChpc0Jyb3dzZXIpIHtcbiAgLy8gUHJldmVudCByZS1zaG93IG9uIHdpbmRvdyBmb2N1c1xuICAkJDEod2luZG93KS5vbignZm9jdXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCRhY3RpdmVFbG0pIHtcbiAgICAgIHByZXZlbnRTaG93ID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgUG9wdXAgPSBmdW5jdGlvbiBQb3B1cChlbCwgc2V0dGluZ3MsIGluaGVyaXQpIHtcbiAgZnVuY3Rpb24gYWRkQ29udGVudCgkbSkge1xuICAgIC8qIFRSSUFMICovXG4gICAgaWYgKCEkJDEoJy5tYnNjLWZyLWMnLCAkbSkuaGFzQ2xhc3MoJ21ic2Mtd2RnLWMnKVxuICAgIC8qIFRSSUFMQ09ORCAqL1xuICAgICkge1xuICAgICAgICAkJDEoJy5tYnNjLWZyLWMnLCAkbSkuYWRkQ2xhc3MoJ21ic2Mtd2RnLWMnKS5hcHBlbmQoJGVsbS5zaG93KCkpO1xuXG4gICAgICAgIGlmICghJCQxKCcubWJzYy13LXAnLCAkbSkubGVuZ3RoKSB7XG4gICAgICAgICAgJCQxKCcubWJzYy1mci1jJywgJG0pLmFkZENsYXNzKCdtYnNjLXctcCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gIH1cblxuICB2YXIgcyxcbiAgICAgICRwcmV2LFxuICAgICAgJGVsbSA9ICQkMShlbCksXG4gICAgICB0aGF0ID0gdGhpczsgLy8gQ2FsbCB0aGUgcGFyZW50IGNvbnN0cnVjdG9yXG5cbiAgRnJhbWUuY2FsbCh0aGlzLCBlbCwgc2V0dGluZ3MsIHRydWUpO1xuICAvKiBUUklBTEZVTkMgKi9cblxuICB0aGF0Ll9nZW5lcmF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9O1xuXG4gIHRoYXQuX21hcmt1cFJlYWR5ID0gZnVuY3Rpb24gKCRtKSB7XG4gICAgaWYgKHMuZGlzcGxheSAhPSAnaW5saW5lJykge1xuICAgICAgYWRkQ29udGVudCgkbSk7XG4gICAgfVxuICB9O1xuXG4gIHRoYXQuX21hcmt1cEluc2VydGVkID0gZnVuY3Rpb24gKCRtKSB7XG4gICAgaWYgKHMuZGlzcGxheSA9PSAnaW5saW5lJykge1xuICAgICAgYWRkQ29udGVudCgkbSk7XG4gICAgfVxuXG4gICAgJG0udHJpZ2dlcignbWJzYy1lbmhhbmNlJywgW3tcbiAgICAgIHRoZW1lOiBzLnRoZW1lLFxuICAgICAgbGFuZzogcy5sYW5nXG4gICAgfV0pO1xuICB9O1xuXG4gIHRoYXQuX21hcmt1cFJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAkZWxtLmhpZGUoKTtcblxuICAgIGlmICgkcHJldiAmJiAkcHJldi5wYXJlbnQoKS5sZW5ndGgpIHtcbiAgICAgICRwcmV2LmFmdGVyKCRlbG0pO1xuICAgIH1cbiAgfTtcblxuICB0aGF0Ll9fcHJvY2Vzc1NldHRpbmdzID0gZnVuY3Rpb24gKCkge1xuICAgIHMgPSB0aGF0LnNldHRpbmdzO1xuICAgIHRoYXQuYnV0dG9ucy5vayA9IHtcbiAgICAgIHRleHQ6IHMub2tUZXh0LFxuICAgICAgaWNvbjogcy5va0ljb24sXG4gICAgICBoYW5kbGVyOiAnc2V0J1xuICAgIH07XG4gICAgcy5idXR0b25zID0gcy5idXR0b25zIHx8IChzLmRpc3BsYXkgPT0gJ2lubGluZScgPyBbXSA6IFsnb2snXSk7XG5cbiAgICBpZiAoISRwcmV2ICYmICRlbG0ucGFyZW50KCkubGVuZ3RoKSB7XG4gICAgICAkcHJldiA9ICQkMShkb2N1bWVudC5jcmVhdGVDb21tZW50KCdwb3B1cCcpKTtcbiAgICAgICRlbG0uYmVmb3JlKCRwcmV2KTtcbiAgICB9XG5cbiAgICAkZWxtLmhpZGUoKTtcbiAgfTsgLy8gQ29uc3RydWN0b3JcblxuXG4gIGlmICghaW5oZXJpdCkge1xuICAgIHRoYXQuaW5pdCgpO1xuICB9XG59O1xuUG9wdXAucHJvdG90eXBlID0ge1xuICBfaGFzRGVmOiB0cnVlLFxuICBfaGFzVGhlbWU6IHRydWUsXG4gIF9oYXNDb250ZW50OiB0cnVlLFxuICBfaGFzTGFuZzogdHJ1ZSxcbiAgX3Jlc3BvbnNpdmU6IHRydWUsXG4gIF9jbGFzczogJ3BvcHVwJyxcbiAgX2RlZmF1bHRzOiBleHRlbmQkMSh7fSwgRnJhbWUucHJvdG90eXBlLl9kZWZhdWx0cywge1xuICAgIGNvbXBDbGFzczogJ21ic2Mtd2RnJyxcbiAgICBva1RleHQ6ICdPSycsXG4gICAgaGVhZGVyVGV4dDogZmFsc2VcbiAgfSlcbn07XG5jbGFzc2VzLlBvcHVwID0gUG9wdXA7XG5jbGFzc2VzLldpZGdldCA9IFBvcHVwO1xubW9iaXNjcm9sbC50aGVtZXMucG9wdXAgPSBtb2Jpc2Nyb2xsLnRoZW1lcy5mcmFtZTtcblxudmFyIGhhc1Byb21pc2UgPSBpc0Jyb3dzZXIgJiYgISF3aW5kb3cuUHJvbWlzZTtcbnZhciBwb3B1cFF1ZXVlID0gW107XG52YXIgbm90aWZpY2F0aW9uUXVldWUgPSBbXTtcbnZhciBhY3RpdmVOb3RpZmljYXRpb247XG5cbmZ1bmN0aW9uIHNob3dQb3B1cChwb3B1cCkge1xuICBpZiAoIXBvcHVwUXVldWUubGVuZ3RoKSB7XG4gICAgcG9wdXAuc2hvdygpO1xuICB9XG5cbiAgcG9wdXBRdWV1ZS5wdXNoKHBvcHVwKTtcbn1cblxuZnVuY3Rpb24gc2hvd05vdGlmaWNhdGlvbihub3RpZmljYXRpb24pIHtcbiAgdmFyIGlzQW55ID0gbm90aWZpY2F0aW9uUXVldWUubGVuZ3RoO1xuICBub3RpZmljYXRpb25RdWV1ZS5wdXNoKG5vdGlmaWNhdGlvbik7IC8vIE9ubHkgc2hvdyBub3RpZmljYXRpb24gaWYgbm8gcG9wdXAgaXMgdmlzaWJsZVxuICAvLyBvdGhlcndpc2UgcG9zdHBvbmUgaXQgdW50aWwgcG9wdXAgaXMgY2xvc2VkXG5cbiAgaWYgKCFwb3B1cFF1ZXVlLmxlbmd0aCkge1xuICAgIC8vIElmIHRoZXJlJ3MgYSB2aXNpYmxlIG5vdGlmaWNhdGlvbiwgaGlkZSBpdC5cbiAgICAvLyBUaGUgbm90aWZpY2F0aW9uIHdpbGwgYmUgc2hvd24gYWZ0ZXIgaGlkZSBhbmltYXRpb24gaXMgY29tcGxldGVcbiAgICBpZiAoaXNBbnkpIHtcbiAgICAgIG5vdGlmaWNhdGlvblF1ZXVlWzBdLmhpZGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUHJldmVudCBmb2N1cyBvbiBzaG93IGZvciBub3RpZmljYXRpb25zXG4gICAgICBub3RpZmljYXRpb24uc2hvdyhmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNldHRpbmdzKHF1ZXVlLCBzZXR0aW5ncywgcmVzb2x2ZSwgbW9yZSkge1xuICAvL2NvbnN0IGFjdGl2ZSA9IG1vYmlzY3JvbGwuYWN0aXZlSW5zdGFuY2U7XG4gIHJldHVybiBleHRlbmQkMSh7XG4gICAgZGlzcGxheTogc2V0dGluZ3MuZGlzcGxheSB8fCAnY2VudGVyJyxcbiAgICBjc3NDbGFzczogJ21ic2MtYWxlcnQnLFxuICAgIG9rVGV4dDogc2V0dGluZ3Mub2tUZXh0LFxuICAgIGNhbmNlbFRleHQ6IHNldHRpbmdzLmNhbmNlbFRleHQsXG4gICAgY29udGV4dDogc2V0dGluZ3MuY29udGV4dCxcbiAgICB0aGVtZTogc2V0dGluZ3MudGhlbWUsXG4gICAgY2xvc2VPbk92ZXJsYXlUYXA6IGZhbHNlLFxuICAgIG9uQmVmb3JlQ2xvc2U6IGZ1bmN0aW9uIG9uQmVmb3JlQ2xvc2UoKSB7XG4gICAgICBxdWV1ZS5zaGlmdCgpO1xuICAgIH0sXG4gICAgb25IaWRlOiBmdW5jdGlvbiBvbkhpZGUoZXYsIGluc3QpIHtcbiAgICAgIC8vbW9iaXNjcm9sbC5hY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZTtcbiAgICAgIGlmIChyZXNvbHZlKSB7XG4gICAgICAgIHJlc29sdmUoaW5zdC5fcmVzb2x2ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZXR0aW5ncy5jYWxsYmFjaykge1xuICAgICAgICBzZXR0aW5ncy5jYWxsYmFjayhpbnN0Ll9yZXNvbHZlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluc3QpIHtcbiAgICAgICAgaW5zdC5kZXN0cm95KCk7XG4gICAgICB9IC8vIFNob3cgbmV4dFxuXG5cbiAgICAgIGlmIChwb3B1cFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBwb3B1cFF1ZXVlWzBdLnNob3coKTtcbiAgICAgIH0gZWxzZSBpZiAobm90aWZpY2F0aW9uUXVldWUubGVuZ3RoKSB7XG4gICAgICAgIC8vIFByZXZlbnQgZm9jdXMgb24gc2hvdyBmb3Igbm90aWZpY2F0aW9uc1xuICAgICAgICBub3RpZmljYXRpb25RdWV1ZVswXS5zaG93KGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIG1vcmUpO1xufVxuXG5mdW5jdGlvbiBnZXRNZXNzYWdlKHNldHRpbmdzKSB7XG4gIHJldHVybiAoc2V0dGluZ3MudGl0bGUgPyAnPGgyPicgKyBzZXR0aW5ncy50aXRsZSArICc8L2gyPicgOiAnJykgKyAnPHA+JyArIChzZXR0aW5ncy5tZXNzYWdlIHx8ICcnKSArICc8L3A+Jztcbn1cblxuZnVuY3Rpb24gc2hvd0FsZXJ0KHBvcHVwLCBzZXR0aW5ncywgcmVzb2x2ZSkge1xuICB2YXIgaW5zdCA9IG5ldyBQb3B1cChwb3B1cCwgZ2V0U2V0dGluZ3MocG9wdXBRdWV1ZSwgc2V0dGluZ3MsIHJlc29sdmUpKTtcbiAgc2hvd1BvcHVwKGluc3QpO1xufVxuXG5mdW5jdGlvbiBzaG93Q29uZmlybShwb3B1cCwgc2V0dGluZ3MsIHJlc29sdmUpIHtcbiAgdmFyIGluc3QgPSBuZXcgUG9wdXAocG9wdXAsIGdldFNldHRpbmdzKHBvcHVwUXVldWUsIHNldHRpbmdzLCByZXNvbHZlLCB7XG4gICAgYnV0dG9uczogWydjYW5jZWwnLCAnb2snXSxcbiAgICBvblNldDogZnVuY3Rpb24gb25TZXQoKSB7XG4gICAgICBpbnN0Ll9yZXNvbHZlID0gdHJ1ZTtcbiAgICB9XG4gIH0pKTtcbiAgaW5zdC5fcmVzb2x2ZSA9IGZhbHNlO1xuICBzaG93UG9wdXAoaW5zdCk7XG59XG5cbmZ1bmN0aW9uIHNob3dQcm9tcHQocG9wdXAsIHNldHRpbmdzLCByZXNvbHZlKSB7XG4gIHZhciBpbnB1dCwgbGFiZWw7XG4gIHZhciBpbnN0ID0gbmV3IFBvcHVwKHBvcHVwLCBnZXRTZXR0aW5ncyhwb3B1cFF1ZXVlLCBzZXR0aW5ncywgcmVzb2x2ZSwge1xuICAgIGJ1dHRvbnM6IFsnY2FuY2VsJywgJ29rJ10sXG4gICAgb25NYXJrdXBSZWFkeTogZnVuY3Rpb24gb25NYXJrdXBSZWFkeShldmVudCwgaW5zdCkge1xuICAgICAgdmFyIHMgPSBpbnN0LnNldHRpbmdzO1xuICAgICAgbGFiZWwgPSBpbnN0Ll9tYXJrdXAuZmluZCgnbGFiZWwnKTtcbiAgICAgIGxhYmVsLmFkZENsYXNzKCdtYnNjLScgKyBzLnRoZW1lICsgKHMuYmFzZVRoZW1lID8gJyBtYnNjLScgKyBzLmJhc2VUaGVtZSA6ICcnKSk7XG4gICAgICBpbnB1dCA9IGluc3QuX21hcmt1cC5maW5kKCdpbnB1dCcpWzBdO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlucHV0LmZvY3VzKCk7XG4gICAgICAgIGlucHV0LnNldFNlbGVjdGlvblJhbmdlKDAsIGlucHV0LnZhbHVlLmxlbmd0aCk7XG4gICAgICB9LCAzMDApO1xuICAgIH0sXG4gICAgb25TZXQ6IGZ1bmN0aW9uIG9uU2V0KCkge1xuICAgICAgaW5zdC5fcmVzb2x2ZSA9IGlucHV0LnZhbHVlO1xuICAgIH1cbiAgfSkpO1xuICBpbnN0Ll9yZXNvbHZlID0gbnVsbDtcbiAgc2hvd1BvcHVwKGluc3QpO1xufVxuXG5mdW5jdGlvbiBzaG93U25hY2tiYXIocG9wdXAsIHNldHRpbmdzLCByZXNvbHZlLCBjc3NDbGFzcywgYW5pbWF0aW9uKSB7XG4gIHZhciBub3RpZmljYXRpb25UaW1lcjtcbiAgdmFyIGluc3QgPSBuZXcgUG9wdXAocG9wdXAsIGdldFNldHRpbmdzKG5vdGlmaWNhdGlvblF1ZXVlLCBzZXR0aW5ncywgcmVzb2x2ZSwge1xuICAgIGRpc3BsYXk6IHNldHRpbmdzLmRpc3BsYXkgfHwgJ2JvdHRvbScsXG4gICAgYW5pbWF0ZTogYW5pbWF0aW9uLFxuICAgIGNzc0NsYXNzOiAoY3NzQ2xhc3MgfHwgJ21ic2Mtc25hY2tiYXInKSArIChzZXR0aW5ncy5jb2xvciA/ICcgbWJzYy0nICsgc2V0dGluZ3MuY29sb3IgOiAnJyksXG4gICAgc2Nyb2xsTG9jazogZmFsc2UsXG4gICAgZm9jdXNUcmFwOiBmYWxzZSxcbiAgICBidXR0b25zOiBbXSxcbiAgICBvbk1hcmt1cFJlYWR5OiBmdW5jdGlvbiBvbk1hcmt1cFJlYWR5KGV2ZW50LCBpbnN0KSB7XG4gICAgICB2YXIgcyA9IGluc3Quc2V0dGluZ3M7XG5cbiAgICAgIHZhciBidXR0b24gPSBpbnN0Ll9tYXJrdXAuZmluZCgnYnV0dG9uJyk7XG5cbiAgICAgIGJ1dHRvbi5hZGRDbGFzcygnbWJzYy0nICsgcy50aGVtZSArIChzLmJhc2VUaGVtZSA/ICcgbWJzYy0nICsgcy5iYXNlVGhlbWUgOiAnJykpO1xuICAgIH0sXG4gICAgb25TaG93OiBmdW5jdGlvbiBvblNob3coZXYsIGluc3QpIHtcbiAgICAgIGFjdGl2ZU5vdGlmaWNhdGlvbiA9IGluc3Q7XG5cbiAgICAgIGlmIChzZXR0aW5ncy5kdXJhdGlvbiAhPT0gZmFsc2UpIHtcbiAgICAgICAgbm90aWZpY2F0aW9uVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoaW5zdCkge1xuICAgICAgICAgICAgaW5zdC5oaWRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBzZXR0aW5ncy5kdXJhdGlvbiB8fCAzMDAwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNldHRpbmdzLmJ1dHRvbikge1xuICAgICAgICBpbnN0LnRhcCgkJDEoJy5tYnNjLXNuYWNrYmFyLWJ0bicsIGV2LnRhcmdldCksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpbnN0LmhpZGUoKTtcblxuICAgICAgICAgIGlmIChzZXR0aW5ncy5idXR0b24uYWN0aW9uKSB7XG4gICAgICAgICAgICBzZXR0aW5ncy5idXR0b24uYWN0aW9uLmNhbGwodGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uQ2xvc2U6IGZ1bmN0aW9uIG9uQ2xvc2UoKSB7XG4gICAgICBhY3RpdmVOb3RpZmljYXRpb24gPSBudWxsO1xuICAgICAgY2xlYXJUaW1lb3V0KG5vdGlmaWNhdGlvblRpbWVyKTtcbiAgICB9XG4gIH0pKTtcbiAgc2hvd05vdGlmaWNhdGlvbihpbnN0KTtcbn1cblxuZnVuY3Rpb24gc2hvd1RvYXN0KHBvcHVwLCBzZXR0aW5ncywgcmVzb2x2ZSkge1xuICBzaG93U25hY2tiYXIocG9wdXAsIHNldHRpbmdzLCByZXNvbHZlLCAnbWJzYy10b2FzdCcsICdmYWRlJyk7XG59XG5cbmZ1bmN0aW9uIHNob3coZnVuYywgcG9wdXAsIHNldHRpbmdzKSB7XG4gIHZhciBwO1xuXG4gIGlmIChoYXNQcm9taXNlKSB7XG4gICAgcCA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICBmdW5jKHBvcHVwLCBzZXR0aW5ncywgcmVzb2x2ZSk7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgZnVuYyhwb3B1cCwgc2V0dGluZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHA7XG59XG5cbm1vYmlzY3JvbGwuYWxlcnQgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgdmFyIHBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHBvcHVwLmlubmVySFRNTCA9IGdldE1lc3NhZ2Uoc2V0dGluZ3MpO1xuICByZXR1cm4gc2hvdyhzaG93QWxlcnQsIHBvcHVwLCBzZXR0aW5ncyk7XG59O1xuXG5tb2Jpc2Nyb2xsLmNvbmZpcm0gPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgdmFyIHBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHBvcHVwLmlubmVySFRNTCA9IGdldE1lc3NhZ2Uoc2V0dGluZ3MpO1xuICByZXR1cm4gc2hvdyhzaG93Q29uZmlybSwgcG9wdXAsIHNldHRpbmdzKTtcbn07XG5cbm1vYmlzY3JvbGwucHJvbXB0ID0gZnVuY3Rpb24gKHNldHRpbmdzKSB7XG4gIHZhciBwb3B1cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBwb3B1cC5pbm5lckhUTUwgPSBnZXRNZXNzYWdlKHNldHRpbmdzKSArICc8bGFiZWwgY2xhc3M9XCJtYnNjLWlucHV0XCI+JyArIChzZXR0aW5ncy5sYWJlbCA/ICc8c3BhbiBjbGFzcz1cIm1ic2MtbGFiZWxcIj4nICsgc2V0dGluZ3MubGFiZWwgKyAnPC9zcGFuPicgOiAnJykgKyAnPGlucHV0IGNsYXNzPVwibWJzYy1jb250cm9sXCIgdGFiaW5kZXg9XCIwXCIgdHlwZT1cIicgKyAoc2V0dGluZ3MuaW5wdXRUeXBlIHx8ICd0ZXh0JykgKyAnXCIgcGxhY2Vob2xkZXI9XCInICsgKHNldHRpbmdzLnBsYWNlaG9sZGVyIHx8ICcnKSArICdcIiB2YWx1ZT1cIicgKyAoc2V0dGluZ3MudmFsdWUgfHwgJycpICsgJ1wiPicgKyAnPC9sYWJlbD4nO1xuICByZXR1cm4gc2hvdyhzaG93UHJvbXB0LCBwb3B1cCwgc2V0dGluZ3MpO1xufTtcblxubW9iaXNjcm9sbC5zbmFja2JhciA9IGZ1bmN0aW9uIChzZXR0aW5ncykge1xuICB2YXIgcG9wdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgIGJ0biA9IHNldHRpbmdzLmJ1dHRvbjtcbiAgcG9wdXAuaW5uZXJIVE1MID0gJzxkaXYgY2xhc3M9XCJtYnNjLXNuYWNrYmFyLWNvbnRcIj48ZGl2IGNsYXNzPVwibWJzYy1zbmFja2Jhci1tc2dcIj4nICsgKHNldHRpbmdzLm1lc3NhZ2UgfHwgJycpICsgJzwvZGl2PicgKyAoYnRuID8gJzxidXR0b24gY2xhc3M9XCJtYnNjLXNuYWNrYmFyLWJ0biBtYnNjLWJ0biBtYnNjLWJ0bi1mbGF0XCI+JyArIChidG4uaWNvbiA/ICc8c3BhbiBjbGFzcz1cIm1ic2MtaWMgJyArIChidG4udGV4dCA/ICdtYnNjLWJ0bi1pYyAnIDogJycpICsgJ21ic2MtaWMtJyArIGJ0bi5pY29uICsgJ1wiPjwvc3Bhbj4nIDogJycpICsgKGJ0bi50ZXh0IHx8ICcnKSArICc8L2J1dHRvbj4nIDogJycpICsgJzwvZGl2Pic7XG4gIHJldHVybiBzaG93KHNob3dTbmFja2JhciwgcG9wdXAsIHNldHRpbmdzKTtcbn07XG5cbm1vYmlzY3JvbGwudG9hc3QgPSBmdW5jdGlvbiAoc2V0dGluZ3MpIHtcbiAgdmFyIHBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHBvcHVwLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPVwibWJzYy10b2FzdC1tc2dcIj4nICsgKHNldHRpbmdzLm1lc3NhZ2UgfHwgJycpICsgJzwvZGl2Pic7XG4gIHJldHVybiBzaG93KHNob3dUb2FzdCwgcG9wdXAsIHNldHRpbmdzKTtcbn07XG5cbm1vYmlzY3JvbGwubm90aWZpY2F0aW9uID0ge1xuICBkaXNtaXNzOiBmdW5jdGlvbiBkaXNtaXNzKCkge1xuICAgIGlmIChhY3RpdmVOb3RpZmljYXRpb24pIHtcbiAgICAgIGFjdGl2ZU5vdGlmaWNhdGlvbi5oaWRlKCk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgaGFsZkJvcmRlciQxID0gb3MgPT0gJ2lvcycgJiYgbWFqb3JWZXJzaW9uID4gNztcbnZhciBGb3JtID0gZnVuY3Rpb24gRm9ybShlbCwgc2V0dGluZ3MpIHtcbiAgdmFyIHMsXG4gICAgICBjc3NDbGFzcyA9ICcnLFxuICAgICAgJGN0eCA9ICQkMShlbCksXG4gICAgICBjb250cm9scyA9IHt9LFxuICAgICAgdGhhdCA9IHRoaXM7XG5cbiAgZnVuY3Rpb24gdG91Y2hlZCgpIHtcbiAgICAkY3R4LnJlbW92ZUNsYXNzKCdtYnNjLW5vLXRvdWNoJyk7XG4gIH0gLy8gQ2FsbCB0aGUgcGFyZW50IGNvbnN0cnVjdG9yXG5cblxuICBCYXNlLmNhbGwodGhpcywgZWwsIHNldHRpbmdzLCB0cnVlKTtcblxuICB0aGF0LnJlZnJlc2ggPSBmdW5jdGlvbiAoc2hhbGxvdykge1xuICAgIGlmIChzLmVuaGFuY2UpIHtcbiAgICAgIGluaXRDb250cm9scygkY3R4LCBjb250cm9scywgcywgc2hhbGxvdyk7XG4gICAgfVxuICB9O1xuICAvKipcbiAgICogRm9ybSBpbml0aWFsaXphdGlvbi5cbiAgICovXG5cblxuICB0aGF0Ll9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghbW9iaXNjcm9sbC50aGVtZXMuZm9ybVtzLnRoZW1lXSkge1xuICAgICAgcy50aGVtZSA9ICdtb2Jpc2Nyb2xsJztcbiAgICB9XG5cbiAgICBpZiAoISRjdHguaGFzQ2xhc3MoJ21ic2MtZm9ybScpKSB7XG4gICAgICAkY3R4LnNob3coKTtcbiAgICAgIGxpc3RlbigkY3R4WzBdLCAndG91Y2hzdGFydCcsIHRvdWNoZWQsIHtcbiAgICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNzc0NsYXNzKSB7XG4gICAgICAkY3R4LnJlbW92ZUNsYXNzKGNzc0NsYXNzKTtcbiAgICB9IC8vIC0tLSBUUklBTCBTRVJWRVIgQ09ERSBTVEFSVCAtLS1cblxuXG4gICAgY3NzQ2xhc3MgPSAnbWJzYy1mb3JtIG1ic2Mtbm8tdG91Y2ggbWJzYy0nICsgcy50aGVtZSArIChoYWxmQm9yZGVyJDEgPyAnIG1ic2MtZm9ybS1oYicgOiAnJykgKyAocy5iYXNlVGhlbWUgPyAnIG1ic2MtJyArIHMuYmFzZVRoZW1lIDogJycpICsgKHMucnRsID8gJyBtYnNjLXJ0bCcgOiAnIG1ic2MtbHRyJykgKyAocy5pbnB1dFN0eWxlID09ICdib3gnID8gJyBtYnNjLWZvcm0tYm94JyA6ICcnKSArIChzLmlucHV0U3R5bGUgPT0gJ291dGxpbmUnID8gJyBtYnNjLWZvcm0tb3V0bGluZScgOiAnJyk7IC8vIC0tLSBUUklBTCBTRVJWRVIgQ09ERSBFTkQgLS0tXG5cbiAgICAkY3R4LmFkZENsYXNzKGNzc0NsYXNzKS5yZW1vdmVDbGFzcygnbWJzYy1jbG9haycpO1xuICAgIHRoYXQucmVmcmVzaCgpO1xuICB9O1xuICAvKipcbiAgICogRGVzdHJveXMgdGhlIG1vYmlzY3JvbGwgaW5zdGFuY2UuXG4gICAqL1xuXG5cbiAgdGhhdC5fZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAkY3R4LnJlbW92ZUNsYXNzKGNzc0NsYXNzKTtcbiAgICB1bmxpc3RlbigkY3R4WzBdLCAndG91Y2hzdGFydCcsIHRvdWNoZWQsIHtcbiAgICAgIHBhc3NpdmU6IHRydWVcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGlkIGluIGNvbnRyb2xzKSB7XG4gICAgICBjb250cm9sc1tpZF0uZGVzdHJveSgpO1xuICAgIH1cbiAgfTtcbiAgLyoqXG4gICAqIE9iamVjdCB3aXRoIHRoZSB1bmRlcmx5aW5nIGZvcm0gY29udHJvbCBpbnN0YW5jZXNcbiAgICoga2V5cyBhcmUgdGhlIGVsZW1lbnQgaWQnc1xuICAgKi9cblxuXG4gIHRoYXQuY29udHJvbHMgPSBjb250cm9sczsgLy8gQ29uc3RydWN0b3JcblxuICBzID0gdGhhdC5zZXR0aW5ncztcbiAgdGhhdC5pbml0KCk7XG59OyAvLyBFeHRlbmQgZGVmYXVsdHNcblxuRm9ybS5wcm90b3R5cGUgPSB7XG4gIF9oYXNEZWY6IHRydWUsXG4gIF9oYXNUaGVtZTogdHJ1ZSxcbiAgX2hhc0xhbmc6IHRydWUsXG4gIF9jbGFzczogJ2Zvcm0nLFxuICBfZGVmYXVsdHM6IHtcbiAgICB0YXA6IGhhc0dob3N0Q2xpY2ssXG4gICAgc3RvcFByb3A6IHRydWUsXG4gICAgcnRsOiBmYWxzZSxcbiAgICBlbmhhbmNlOiB0cnVlXG4gIH1cbn07XG5jbGFzc2VzLkZvcm0gPSBGb3JtOyAvLyBJbml0IG1ic2MtZm9ybSBlbGVtZW50cyBvbiBwYWdlIGxvYWRcblxuYXV0b0luaXQoJ1ttYnNjLWVuaGFuY2VdLFttYnNjLWZvcm1dJywgRm9ybSwgdHJ1ZSk7XG5cbnZhciBNYnNjRm9ybSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1ic2NGb3JtLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1ic2NGb3JtKGluaXRpYWxFbGVtLCBfZm9ybVNlcnZpY2UsIHpvbmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaW5pdGlhbEVsZW0sIHpvbmUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9mb3JtU2VydmljZSA9IF9mb3JtU2VydmljZTtcbiAgICAgICAgX3RoaXMuZW5oYW5jZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1ic2NGb3JtLnByb3RvdHlwZS5uZ09uSW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zT2JqID0gZXh0ZW5kJDEoe30sIHRoaXMub3B0aW9ucywgdGhpcy5pbmxpbmVPcHRpb25zT2JqKTtcbiAgICAgICAgdGhpcy5fZm9ybVNlcnZpY2Uub3B0aW9ucyA9IHRoaXMub3B0aW9uc09iajtcbiAgICB9O1xuICAgIE1ic2NGb3JtLnByb3RvdHlwZS5pbml0Q29udHJvbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wdCA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKG9wdCAmJiBvcHQuZW5oYW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBvcHQuZW5oYW5jZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvcHRpb25zID0gZXh0ZW5kJDEoe30sIG9wdCwgdGhpcy5pbmxpbmVPcHRpb25zT2JqKTtcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBGb3JtKHRoaXMucm9vdEVsZW0ubmF0aXZlRWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBNYnNjRm9ybS5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdtYnNjLWZvcm0nLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8ZGl2ICNyb290RWxlbWVudD48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9kaXY+XCIsXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyczogW01ic2NPcHRpb25zU2VydmljZV0sXG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydEFzOiAnbW9iaXNjcm9sbCdcbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NGb3JtLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYsIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY09wdGlvbnNTZXJ2aWNlLCB9LFxuICAgICAgICB7IHR5cGU6IE5nWm9uZSwgfSxcbiAgICBdOyB9O1xuICAgIE1ic2NGb3JtLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAnb3B0aW9ucyc6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnb3B0aW9ucycsXSB9LF0sXG4gICAgICAgICdlbmhhbmNlJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdjb250ZXh0JzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdpbnB1dFN0eWxlJzogW3sgdHlwZTogSW5wdXQkMSwgYXJnczogWydpbnB1dC1zdHlsZScsXSB9LF0sXG4gICAgICAgICdsYWJlbFN0eWxlJzogW3sgdHlwZTogSW5wdXQkMSwgYXJnczogWydsYWJlbC1zdHlsZScsXSB9LF0sXG4gICAgICAgICdyb290RWxlbSc6IFt7IHR5cGU6IFZpZXdDaGlsZCwgYXJnczogWydyb290RWxlbWVudCcsIHsgc3RhdGljOiBmYWxzZSB9LF0gfSxdLFxuICAgIH07XG4gICAgcmV0dXJuIE1ic2NGb3JtO1xufShNYnNjQmFzZSkpO1xudmFyIE1ic2NUZXh0YXJlYSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1ic2NUZXh0YXJlYSwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYnNjVGV4dGFyZWEoaW5pdGlhbEVsZW0sIF9mb3JtU2VydmljZSwgX2lucHV0U2VydmljZSwgX2NvbnRyb2wsIHpvbmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaW5pdGlhbEVsZW0sIF9mb3JtU2VydmljZSwgX2lucHV0U2VydmljZSwgX2NvbnRyb2wsIHpvbmUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9pbnB1dFNlcnZpY2UgPSBfaW5wdXRTZXJ2aWNlO1xuICAgICAgICBfaW5wdXRTZXJ2aWNlLmlucHV0ID0gX3RoaXM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTWJzY1RleHRhcmVhLnByb3RvdHlwZS5pbml0Q29udHJvbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBleHRlbmQkMSh7fSwgdGhpcy5faW5oZXJpdGVkT3B0aW9ucywgdGhpcy5vcHRpb25zLCB0aGlzLmlubGluZU9wdGlvbnNPYmopO1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IFRleHRBcmVhKHRoaXMuX2luaXRFbGVtLm5hdGl2ZUVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH07XG4gICAgTWJzY1RleHRhcmVhLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ21ic2MtdGV4dGFyZWEnLFxuICAgICAgICAgICAgICAgICAgICBob3N0OiB7ICdjbGFzcyc6ICdtYnNjLWNvbnRyb2wtbmcnIH0sXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIlxcbiAgICAgICAgICAgIDxsYWJlbCBcXG4gICAgICAgICAgICAgICAgW2NsYXNzLm1ic2MtZXJyXT1cXFwiZXJyb3JcXFwiXFxuICAgICAgICAgICAgICAgIFtjbGFzcy5tYnNjLWlucHV0LWJveF09XFxcImlucHV0U3R5bGUgPT0gJ2JveCdcXFwiXFxuICAgICAgICAgICAgICAgIFtjbGFzcy5tYnNjLWlucHV0LW91dGxpbmVdPVxcXCJpbnB1dFN0eWxlID09ICdvdXRsaW5lJ1xcXCJcXG4gICAgICAgICAgICAgICAgW2NsYXNzLm1ic2MtbGFiZWwtc3RhY2tlZF09XFxcImxhYmVsU3R5bGUgPT0gJ3N0YWNrZWQnXFxcIlxcbiAgICAgICAgICAgICAgICBbY2xhc3MubWJzYy1sYWJlbC1pbmxpbmVdPVxcXCJsYWJlbFN0eWxlID09ICdpbmxpbmUnXFxcIlxcbiAgICAgICAgICAgICAgICBbY2xhc3MubWJzYy1sYWJlbC1mbG9hdGluZ109XFxcImxhYmVsU3R5bGUgPT0gJ2Zsb2F0aW5nJ1xcXCJcXG4gICAgICAgICAgICA+XFxuICAgICAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJtYnNjLWlucHV0LXdyYXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8dGV4dGFyZWEgI2luaXRFbGVtZW50IFtwbGFjZWhvbGRlcl09XFxcInBsYWNlaG9sZGVyXFxcIiBbKG5nTW9kZWwpXT1cXFwiaW5uZXJWYWx1ZVxcXCIgKGJsdXIpPVxcXCJvblRvdWNoKCRldmVudClcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5uYW1lXT1cXFwibmFtZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLnJvd3NdPVxcXCJyb3dzXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIud3JhcF09XFxcIndyYXBcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5taW5sZW5ndGhdPVxcXCJtaW5sZW5ndGhcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5tYXhsZW5ndGhdPVxcXCJtYXhsZW5ndGhcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5hdXRvY29tcGxldGVdPVxcXCJhdXRvY29tcGxldGVcXFwiIFxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIuYXV0b2NhcGl0YWxpemVdPVxcXCJhdXRvY2FwaXRhbGl6ZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLmF1dG9jb3JyZWN0XT1cXFwiYXV0b2NvcnJlY3RcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5zcGVsbGNoZWNrXT1cXFwic3BlbGxjaGVja1xcXCJcXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLmF1dG9mb2N1c109XFxcImF1dG9mb2N1c1xcXCJcXG4gICAgICAgICAgICAgICAgICAgIFthdHRyLnJlcXVpcmVkXT1cXFwicmVxdWlyZWRcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLWljb25dPVxcXCJpY29uID8gaWNvbiA6IG51bGxcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLWljb24tYWxpZ25dPVxcXCJpY29uQWxpZ24gPyBpY29uQWxpZ24gOiBudWxsXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cXFwiZGlzYWJsZWRcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbcmVhZG9ubHldPVxcXCJfcmVhZG9ubHlcXFwiPjwvdGV4dGFyZWE+XFxuICAgICAgICAgICAgICAgIDxzcGFuICpuZ0lmPVxcXCJlcnJvciAmJiBlcnJvck1lc3NhZ2VcXFwiIGNsYXNzPVxcXCJtYnNjLWVyci1tc2dcXFwiPnt7ZXJyb3JNZXNzYWdlfX08L3NwYW4+XFxuICAgICAgICAgICAgPC9zcGFuPlxcbiAgICAgICAgPC9sYWJlbD5cXG4gICAgXCIsXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyczogW01ic2NJbnB1dFNlcnZpY2VdXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICBNYnNjVGV4dGFyZWEuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjT3B0aW9uc1NlcnZpY2UsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgICAgICB7IHR5cGU6IE1ic2NJbnB1dFNlcnZpY2UsIH0sXG4gICAgICAgIHsgdHlwZTogTmdDb250cm9sLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBOZ1pvbmUsIH0sXG4gICAgXTsgfTtcbiAgICBNYnNjVGV4dGFyZWEucHJvcERlY29yYXRvcnMgPSB7XG4gICAgICAgICdyb3dzJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICd3cmFwJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gTWJzY1RleHRhcmVhO1xufShNYnNjSW5wdXRCYXNlKSk7XG52YXIgTWJzY0Ryb3Bkb3duID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWJzY0Ryb3Bkb3duLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1ic2NEcm9wZG93bihob3N0RWxlbSwgZm9ybVNlcnZpY2UsIF9pbnB1dFNlcnZpY2UsIGNvbnRyb2wsIHpvbmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaG9zdEVsZW0sIGZvcm1TZXJ2aWNlLCBfaW5wdXRTZXJ2aWNlLCBjb250cm9sLCB6b25lKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5faW5wdXRTZXJ2aWNlID0gX2lucHV0U2VydmljZTtcbiAgICAgICAgX2lucHV0U2VydmljZS5pbnB1dCA9IF90aGlzO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjRHJvcGRvd24ucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdjtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmluc3RhbmNlLl9zZXRUZXh0KCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTWJzY0Ryb3Bkb3duLnByb3RvdHlwZS5pbml0Q29udHJvbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBleHRlbmQkMSh7fSwgdGhpcy5faW5oZXJpdGVkT3B0aW9ucywgdGhpcy5vcHRpb25zLCB0aGlzLmlubGluZU9wdGlvbnNPYmopO1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IFNlbGVjdCh0aGlzLl9pbml0RWxlbS5uYXRpdmVFbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuaW5zdGFuY2UuX3NldFRleHQoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBNYnNjRHJvcGRvd24ucHJvdG90eXBlLndyaXRlVmFsdWUgPSBmdW5jdGlvbiAodikge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IHY7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgdGhhdF8xID0gdGhpcztcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoYXRfMS5pbnN0YW5jZS5fc2V0VGV4dCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ic2NEcm9wZG93bi5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdtYnNjLWRyb3Bkb3duJyxcbiAgICAgICAgICAgICAgICAgICAgaG9zdDogeyAnY2xhc3MnOiAnbWJzYy1jb250cm9sLW5nJyB9LFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCJcXG4gICAgICAgICAgICA8bGFiZWwgXFxuICAgICAgICAgICAgICAgIFtjbGFzcy5tYnNjLWVycl09XFxcImVycm9yXFxcIlxcbiAgICAgICAgICAgICAgICBbY2xhc3MubWJzYy1pbnB1dC1ib3hdPVxcXCJpbnB1dFN0eWxlID09ICdib3gnXFxcIlxcbiAgICAgICAgICAgICAgICBbY2xhc3MubWJzYy1pbnB1dC1vdXRsaW5lXT1cXFwiaW5wdXRTdHlsZSA9PSAnb3V0bGluZSdcXFwiXFxuICAgICAgICAgICAgICAgIFtjbGFzcy5tYnNjLWxhYmVsLXN0YWNrZWRdPVxcXCJsYWJlbFN0eWxlID09ICdzdGFja2VkJ1xcXCJcXG4gICAgICAgICAgICAgICAgW2NsYXNzLm1ic2MtbGFiZWwtaW5saW5lXT1cXFwibGFiZWxTdHlsZSA9PSAnaW5saW5lJ1xcXCJcXG4gICAgICAgICAgICAgICAgW2NsYXNzLm1ic2MtbGFiZWwtZmxvYXRpbmddPVxcXCJsYWJlbFN0eWxlID09ICdmbG9hdGluZydcXFwiXFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgIHt7bGFiZWx9fVxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJtYnNjLWlucHV0LXdyYXBcXFwiPlxcbiAgICAgICAgICAgICAgICA8c2VsZWN0ICNpbml0RWxlbWVudFxcbiAgICAgICAgICAgICAgICAgICAgWyhuZ01vZGVsKV09XFxcImlubmVyVmFsdWVcXFwiIFxcbiAgICAgICAgICAgICAgICAgICAgW2F0dHIubmFtZV09XFxcIm5hbWVcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLWljb25dPVxcXCJpY29uID8gaWNvbiA6IG51bGxcXFwiXFxuICAgICAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLWljb24tYWxpZ25dPVxcXCJpY29uQWxpZ24gPyBpY29uQWxpZ24gOiBudWxsXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cXFwiZGlzYWJsZWRcXFwiXFxuICAgICAgICAgICAgICAgICAgICAoYmx1cik9XFxcIm9uVG91Y2goJGV2ZW50KVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XFxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxcbiAgICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cXFwiZXJyb3IgJiYgZXJyb3JNZXNzYWdlXFxcIiBjbGFzcz1cXFwibWJzYy1lcnItbXNnXFxcIj57e2Vycm9yTWVzc2FnZX19PC9zcGFuPlxcbiAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgIDwvbGFiZWw+XFxuICAgIFwiLFxuICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtNYnNjSW5wdXRTZXJ2aWNlXVxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgTWJzY0Ryb3Bkb3duLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYsIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY09wdGlvbnNTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjSW5wdXRTZXJ2aWNlLCB9LFxuICAgICAgICB7IHR5cGU6IE5nQ29udHJvbCwgZGVjb3JhdG9yczogW3sgdHlwZTogT3B0aW9uYWwgfSxdIH0sXG4gICAgICAgIHsgdHlwZTogTmdab25lLCB9LFxuICAgIF07IH07XG4gICAgTWJzY0Ryb3Bkb3duLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAnbGFiZWwnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2ljb24nOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2ljb25BbGlnbic6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnaWNvbi1hbGlnbicsXSB9LF0sXG4gICAgICAgICd2YWx1ZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnaW5wdXRTdHlsZSc6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnaW5wdXQtc3R5bGUnLF0gfSxdLFxuICAgICAgICAnbGFiZWxTdHlsZSc6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnbGFiZWwtc3R5bGUnLF0gfSxdLFxuICAgIH07XG4gICAgcmV0dXJuIE1ic2NEcm9wZG93bjtcbn0oTWJzY0Zvcm1WYWx1ZUJhc2UpKTtcbnZhciBNYnNjQnV0dG9uID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWJzY0J1dHRvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYnNjQnV0dG9uKGhvc3RFbGVtLCBmb3JtU2VydmljZSwgem9uZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBob3N0RWxlbSwgZm9ybVNlcnZpY2UsIHpvbmUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9mbGF0ID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9ibG9jayA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fb3V0bGluZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fY2xhc3Nlc09iaiA9IHt9O1xuICAgICAgICBfdGhpcy50eXBlID0gJ2J1dHRvbic7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1ic2NCdXR0b24ucHJvdG90eXBlLCBcImNzc0NsYXNzZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5fY2xhc3Nlc09iaikge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jbGFzc2VzT2JqW2tdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY2xhc3Nlc09ialsnbWJzYy1idG4tZmxhdCddID0gdGhpcy5fZmxhdDtcbiAgICAgICAgICAgIHRoaXMuX2NsYXNzZXNPYmpbJ21ic2MtYnRuLWJsb2NrJ10gPSB0aGlzLl9ibG9jaztcbiAgICAgICAgICAgIHRoaXMuX2NsYXNzZXNPYmpbJ21ic2MtYnRuLW91dGxpbmUnXSA9IHRoaXMuX291dGxpbmU7XG4gICAgICAgICAgICBpZiAodGhpcy5jbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNzc0NsYXNzZXMgPSB0aGlzLmNsYXNzZXMuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICBpZiAoY3NzQ2xhc3Nlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjc3NDbGFzc2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3NzQ2xhc3Nlc1tpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NsYXNzZXNPYmpbY3NzQ2xhc3Nlc1tpXV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY29sb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGFzc2VzT2JqWydtYnNjLWJ0bi0nICsgdGhpcy5jb2xvcl0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NsYXNzZXNPYmo7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjQnV0dG9uLnByb3RvdHlwZSwgXCJmbGF0XCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9mbGF0ID0gZW1wdHlPclRydWUodmFsKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1ic2NCdXR0b24ucHJvdG90eXBlLCBcImJsb2NrXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9ibG9jayA9IGVtcHR5T3JUcnVlKHZhbCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjQnV0dG9uLnByb3RvdHlwZSwgXCJvdXRsaW5lXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9vdXRsaW5lID0gZW1wdHlPclRydWUodmFsKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTWJzY0J1dHRvbi5wcm90b3R5cGUuaW5pdENvbnRyb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gZXh0ZW5kJDEoe30sIHRoaXMuX2luaGVyaXRlZE9wdGlvbnMsIHRoaXMub3B0aW9ucywgdGhpcy5pbmxpbmVPcHRpb25zT2JqKTtcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBCdXR0b24odGhpcy5faW5pdEVsZW0ubmF0aXZlRWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBNYnNjQnV0dG9uLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ21ic2MtYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuICAgICAgICA8YnV0dG9uICNpbml0RWxlbWVudCBcXG4gICAgICAgICAgICBbdHlwZV09XFxcInR5cGVcXFwiXFxuICAgICAgICAgICAgW25nQ2xhc3NdPVxcXCJjc3NDbGFzc2VzXFxcIlxcbiAgICAgICAgICAgIFthdHRyLm5hbWVdPVxcXCJuYW1lXFxcIlxcbiAgICAgICAgICAgIFthdHRyLmRhdGEtaWNvbl09XFxcImljb24gPyBpY29uIDogbnVsbFxcXCJcXG4gICAgICAgICAgICBbZGlzYWJsZWRdPVxcXCJkaXNhYmxlZFxcXCI+XFxuICAgICAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxcbiAgICAgICAgPC9idXR0b24+XFxuICAgIFwiLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgTWJzY0J1dHRvbi5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiBFbGVtZW50UmVmLCB9LFxuICAgICAgICB7IHR5cGU6IE1ic2NPcHRpb25zU2VydmljZSwgZGVjb3JhdG9yczogW3sgdHlwZTogT3B0aW9uYWwgfSxdIH0sXG4gICAgICAgIHsgdHlwZTogTmdab25lLCB9LFxuICAgIF07IH07XG4gICAgTWJzY0J1dHRvbi5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgJ2NsYXNzZXMnOiBbeyB0eXBlOiBJbnB1dCQxLCBhcmdzOiBbJ2NsYXNzJyxdIH0sXSxcbiAgICAgICAgJ3R5cGUnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2ljb24nOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2ZsYXQnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2Jsb2NrJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdvdXRsaW5lJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gTWJzY0J1dHRvbjtcbn0oTWJzY0Zvcm1CYXNlKSk7XG52YXIgTWJzY0NoZWNrYm94ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWJzY0NoZWNrYm94LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1ic2NDaGVja2JveChob3N0RWxlbSwgY2RyLCBmb3JtU2VydmljZSwgX2lucHV0U2VydmljZSwgY29udHJvbCwgem9uZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBob3N0RWxlbSwgZm9ybVNlcnZpY2UsIF9pbnB1dFNlcnZpY2UsIGNvbnRyb2wsIHpvbmUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNkciA9IGNkcjtcbiAgICAgICAgX3RoaXMuX2NvbG9yQ2xhc3MgPSB7fTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY0NoZWNrYm94LnByb3RvdHlwZSwgXCJjb2xvckNsYXNzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuX2NvbG9yQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fY29sb3JDbGFzc1trXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29sb3JDbGFzc1snbWJzYy1jaGVja2JveC0nICsgdGhpcy5jb2xvcl0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb2xvckNsYXNzWydtYnNjLWVyciddID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb2xvckNsYXNzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNYnNjQ2hlY2tib3gucHJvdG90eXBlLmluaXRDb250cm9sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGV4dGVuZCQxKHt9LCB0aGlzLl9pbmhlcml0ZWRPcHRpb25zLCB0aGlzLm9wdGlvbnMsIHRoaXMuaW5saW5lT3B0aW9uc09iaik7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgQ2hlY2tCb3godGhpcy5faW5pdEVsZW0ubmF0aXZlRWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBNYnNjQ2hlY2tib3gucHJvdG90eXBlLndyaXRlVmFsdWUgPSBmdW5jdGlvbiAodikge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IHY7XG4gICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICB9O1xuICAgIE1ic2NDaGVja2JveC5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdtYnNjLWNoZWNrYm94JyxcbiAgICAgICAgICAgICAgICAgICAgaG9zdDogeyAnY2xhc3MnOiAnbWJzYy1jb250cm9sLW5nJyB9LFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCJcXG4gICAgICAgIDxsYWJlbCBbbmdDbGFzc109XFxcImNvbG9yQ2xhc3NcXFwiPlxcbiAgICAgICAgICAgIDxpbnB1dCAjaW5pdEVsZW1lbnQgXFxuICAgICAgICAgICAgICAgIHR5cGU9XFxcImNoZWNrYm94XFxcIlxcbiAgICAgICAgICAgICAgICBbYXR0ci5uYW1lXT1cXFwibmFtZVxcXCJcXG4gICAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cXFwiZGlzYWJsZWRcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtbGFiZWwtc3R5bGVdPVxcXCJsYWJlbFN0eWxlXFxcIlxcbiAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLWlucHV0LXN0eWxlXT1cXFwiaW5wdXRTdHlsZVxcXCJcXG4gICAgICAgICAgICAgICAgWyhuZ01vZGVsKV09XFxcImlubmVyVmFsdWVcXFwiXFxuICAgICAgICAgICAgICAgIChibHVyKT1cXFwib25Ub3VjaCgkZXZlbnQpXFxcIiAvPlxcbiAgICAgICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cXG4gICAgICAgICAgICA8c3BhbiAqbmdJZj1cXFwiZXJyb3IgJiYgZXJyb3JNZXNzYWdlXFxcIiBjbGFzcz1cXFwibWJzYy1lcnItbXNnXFxcIj57e2Vycm9yTWVzc2FnZX19PC9zcGFuPlxcbiAgICAgICAgPC9sYWJlbD5cXG4gICAgXCIsXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICBNYnNjQ2hlY2tib3guY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBDaGFuZ2VEZXRlY3RvclJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjT3B0aW9uc1NlcnZpY2UsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgICAgICB7IHR5cGU6IE1ic2NJbnB1dFNlcnZpY2UsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgICAgICB7IHR5cGU6IE5nQ29udHJvbCwgZGVjb3JhdG9yczogW3sgdHlwZTogT3B0aW9uYWwgfSxdIH0sXG4gICAgICAgIHsgdHlwZTogTmdab25lLCB9LFxuICAgIF07IH07XG4gICAgTWJzY0NoZWNrYm94LnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAnY29sb3InOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2lucHV0U3R5bGUnOiBbeyB0eXBlOiBJbnB1dCQxLCBhcmdzOiBbJ2lucHV0LXN0eWxlJyxdIH0sXSxcbiAgICAgICAgJ2xhYmVsU3R5bGUnOiBbeyB0eXBlOiBJbnB1dCQxLCBhcmdzOiBbJ2xhYmVsLXN0eWxlJyxdIH0sXSxcbiAgICB9O1xuICAgIHJldHVybiBNYnNjQ2hlY2tib3g7XG59KE1ic2NGb3JtVmFsdWVCYXNlKSk7XG52YXIgTWJzY1N3aXRjaCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1ic2NTd2l0Y2gsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWJzY1N3aXRjaChob3N0RWxlbSwgem9uZSwgX2Zvcm1TZXJ2aWNlLCBjb250cm9sKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGhvc3RFbGVtLCB6b25lLCBjb250cm9sLCBudWxsLCBudWxsKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fZm9ybVNlcnZpY2UgPSBfZm9ybVNlcnZpY2U7XG4gICAgICAgIF90aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLm9uQ2hhbmdlRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgX3RoaXMuX2NvbG9yQ2xhc3MgPSB7fTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY1N3aXRjaC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICB0aGlzLnNldE5ld1ZhbHVlUHJveHkodik7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjU3dpdGNoLnByb3RvdHlwZSwgXCJjb2xvckNsYXNzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuX2NvbG9yQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fY29sb3JDbGFzc1trXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29sb3JDbGFzc1snbWJzYy1zd2l0Y2gtJyArIHRoaXMuY29sb3JdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29sb3JDbGFzc1snbWJzYy1lcnInXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29sb3JDbGFzcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTWJzY1N3aXRjaC5wcm90b3R5cGUuc2V0TmV3VmFsdWUgPSBmdW5jdGlvbiAodikge1xuICAgICAgICBpZiAodGhpcy5pbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UuZ2V0VmFsKCkgIT09IHYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluc3RhbmNlLnNldFZhbCh2LCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ic2NTd2l0Y2gucHJvdG90eXBlLm5nT25Jbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9pbmhlcml0ZWRPcHRpb25zID0gdGhpcy5fZm9ybVNlcnZpY2UgPyB0aGlzLl9mb3JtU2VydmljZS5vcHRpb25zIDoge307XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmdPbkluaXQuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIE1ic2NTd2l0Y2gucHJvdG90eXBlLmluaXRDb250cm9sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGV4dGVuZCQxKHt9LCB0aGlzLl9pbmhlcml0ZWRPcHRpb25zLCB0aGlzLm9wdGlvbnMsIHRoaXMuaW5saW5lT3B0aW9uc09iaik7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgU3dpdGNoKHRoaXMuX2luaXRFbGVtLm5hdGl2ZUVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBpZiAodGhpcy5pbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5zZXRWYWwodGhpcy5pbml0aWFsVmFsdWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY1N3aXRjaC5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdtYnNjLXN3aXRjaCcsXG4gICAgICAgICAgICAgICAgICAgIGhvc3Q6IHsgJ2NsYXNzJzogJ21ic2MtY29udHJvbC1uZycgfSxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuICAgICAgICA8bGFiZWwgW25nQ2xhc3NdPVxcXCJjb2xvckNsYXNzXFxcIj5cXG4gICAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XFxuICAgICAgICAgICAgPHNwYW4gKm5nSWY9XFxcImVycm9yICYmIGVycm9yTWVzc2FnZVxcXCIgY2xhc3M9XFxcIm1ic2MtZXJyLW1zZ1xcXCI+e3tlcnJvck1lc3NhZ2V9fTwvc3Bhbj5cXG4gICAgICAgICAgICA8aW5wdXQgI2luaXRFbGVtZW50IFxcbiAgICAgICAgICAgICAgICB0eXBlPVxcXCJjaGVja2JveFxcXCJcXG4gICAgICAgICAgICAgICAgZGF0YS1yb2xlPVxcXCJzd2l0Y2hcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLm5hbWVdPVxcXCJuYW1lXFxcIlxcbiAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLWxhYmVsLXN0eWxlXT1cXFwibGFiZWxTdHlsZVxcXCJcXG4gICAgICAgICAgICAgICAgW2F0dHIuZGF0YS1pbnB1dC1zdHlsZV09XFxcImlucHV0U3R5bGVcXFwiXFxuICAgICAgICAgICAgICAgIFtkaXNhYmxlZF09XFxcImRpc2FibGVkXFxcIlxcbiAgICAgICAgICAgICAgICAoYmx1cik9XFxcIm9uVG91Y2goJGV2ZW50KVxcXCIgLz5cXG4gICAgICAgIDwvbGFiZWw+XFxuICAgIFwiLFxuICAgICAgICAgICAgICAgICAgICBleHBvcnRBczogJ21vYmlzY3JvbGwnLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgTWJzY1N3aXRjaC5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiBFbGVtZW50UmVmLCB9LFxuICAgICAgICB7IHR5cGU6IE5nWm9uZSwgfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjT3B0aW9uc1NlcnZpY2UsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgICAgICB7IHR5cGU6IE5nQ29udHJvbCwgZGVjb3JhdG9yczogW3sgdHlwZTogT3B0aW9uYWwgfSxdIH0sXG4gICAgXTsgfTtcbiAgICBNYnNjU3dpdGNoLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAnb3B0aW9ucyc6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnb3B0aW9ucycsXSB9LF0sXG4gICAgICAgICdkaXNhYmxlZCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnbmFtZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnY29sb3InOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2Vycm9yJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdlcnJvck1lc3NhZ2UnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3ZhbHVlJzogW3sgdHlwZTogSW5wdXQkMSwgYXJnczogWyd2YWx1ZScsXSB9LF0sXG4gICAgICAgICdvbkNoYW5nZUVtaXR0ZXInOiBbeyB0eXBlOiBPdXRwdXQsIGFyZ3M6IFsndmFsdWVDaGFuZ2UnLF0gfSxdLFxuICAgICAgICAnX2luaXRFbGVtJzogW3sgdHlwZTogVmlld0NoaWxkLCBhcmdzOiBbJ2luaXRFbGVtZW50JywgeyBzdGF0aWM6IGZhbHNlIH0sXSB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gTWJzY1N3aXRjaDtcbn0oTWJzY0NvbnRyb2xCYXNlKSk7XG52YXIgTWJzY1N0ZXBwZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYnNjU3RlcHBlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYnNjU3RlcHBlcihob3N0RWxlbWVudCwgem9uZSwgX2Zvcm1TZXJ2aWNlLCBjb250cm9sKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGhvc3RFbGVtZW50LCB6b25lLCBjb250cm9sLCBudWxsLCBudWxsKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fZm9ybVNlcnZpY2UgPSBfZm9ybVNlcnZpY2U7XG4gICAgICAgIF90aGlzLm1pbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgX3RoaXMubWF4ID0gdW5kZWZpbmVkO1xuICAgICAgICBfdGhpcy5zdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICBfdGhpcy52YWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIF90aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLl9jb2xvckNsYXNzID0ge307XG4gICAgICAgIF90aGlzLm9uQ2hhbmdlRW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY1N0ZXBwZXIucHJvdG90eXBlLCBcInJlYWRvbmx5XCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWFkb25seSA9IGVtcHR5T3JUcnVlKHZhbCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjU3RlcHBlci5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICB0aGlzLnNldE5ld1ZhbHVlUHJveHkodik7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjU3RlcHBlci5wcm90b3R5cGUsIFwiY29sb3JDbGFzc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9yICh2YXIgayBpbiB0aGlzLl9jb2xvckNsYXNzKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NvbG9yQ2xhc3Nba107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5jb2xvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbG9yQ2xhc3NbJ21ic2Mtc3RlcHBlci0nICsgdGhpcy5jb2xvcl0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yQ2xhc3M7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1ic2NTdGVwcGVyLnByb3RvdHlwZS5zZXROZXdWYWx1ZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlICYmIHRoaXMuaW5zdGFuY2UuZ2V0VmFsKCkgIT09IHYpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2Uuc2V0VmFsKHYsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY1N0ZXBwZXIucHJvdG90eXBlLm5nT25Jbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9pbmhlcml0ZWRPcHRpb25zID0gdGhpcy5fZm9ybVNlcnZpY2UgPyB0aGlzLl9mb3JtU2VydmljZS5vcHRpb25zIDoge307XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmdPbkluaXQuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIE1ic2NTdGVwcGVyLnByb3RvdHlwZS5pbml0Q29udHJvbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBleHRlbmQkMSh7fSwgdGhpcy5faW5oZXJpdGVkT3B0aW9ucywgdGhpcy5vcHRpb25zLCB0aGlzLmlubGluZU9wdGlvbnNPYmopO1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IFN0ZXBwZXIodGhpcy5faW5pdEVsZW0ubmF0aXZlRWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLnNldFZhbCh0aGlzLmluaXRpYWxWYWx1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNYnNjU3RlcHBlci5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdtYnNjLXN0ZXBwZXInLFxuICAgICAgICAgICAgICAgICAgICBob3N0OiB7ICdjbGFzcyc6ICdtYnNjLWNvbnRyb2wtbmcnIH0sXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIlxcbiAgICAgICAgPGRpdiBbbmdDbGFzc109XFxcImNvbG9yQ2xhc3NcXFwiPlxcbiAgICAgICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cXG4gICAgICAgICAgICA8aW5wdXQgI2luaXRFbGVtZW50XFxuICAgICAgICAgICAgICAgIGRhdGEtcm9sZT1cXFwic3RlcHBlclxcXCJcXG4gICAgICAgICAgICAgICAgW2F0dHIubmFtZV09XFxcIm5hbWVcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLm1pbl09XFxcIm1pbiAhPT0gdW5kZWZpbmVkID8gbWluIDogbnVsbFxcXCJcXG4gICAgICAgICAgICAgICAgW2F0dHIubWF4XT1cXFwibWF4ICE9PSB1bmRlZmluZWQgPyBtYXggOiBudWxsXFxcIlxcbiAgICAgICAgICAgICAgICBbYXR0ci5zdGVwXT1cXFwic3RlcCAhPT0gdW5kZWZpbmVkID8gc3RlcCA6IG51bGxcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtdmFsXT1cXFwidmFsID8gdmFsIDogbnVsbFxcXCJcXG4gICAgICAgICAgICAgICAgW2F0dHIuZGF0YS1sYWJlbC1zdHlsZV09XFxcImxhYmVsU3R5bGVcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtaW5wdXQtc3R5bGVdPVxcXCJpbnB1dFN0eWxlXFxcIlxcbiAgICAgICAgICAgICAgICBbZGlzYWJsZWRdPVxcXCJkaXNhYmxlZFxcXCIgXFxuICAgICAgICAgICAgICAgIFtyZWFkb25seV09XFxcIl9yZWFkb25seVxcXCIvPlxcbiAgICAgICAgPC9kaXY+XFxuICAgIFwiLFxuICAgICAgICAgICAgICAgICAgICBleHBvcnRBczogJ21vYmlzY3JvbGwnLFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgTWJzY1N0ZXBwZXIuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBOZ1pvbmUsIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY09wdGlvbnNTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBOZ0NvbnRyb2wsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgIF07IH07XG4gICAgTWJzY1N0ZXBwZXIucHJvcERlY29yYXRvcnMgPSB7XG4gICAgICAgICdyZWFkb25seSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnb3B0aW9ucyc6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnb3B0aW9ucycsXSB9LF0sXG4gICAgICAgICd2YWx1ZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnbmFtZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnbWluJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdtYXgnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3N0ZXAnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3ZhbCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnZGlzYWJsZWQnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2NvbG9yJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdvbkNoYW5nZUVtaXR0ZXInOiBbeyB0eXBlOiBPdXRwdXQsIGFyZ3M6IFsndmFsdWVDaGFuZ2UnLF0gfSxdLFxuICAgICAgICAnX2luaXRFbGVtJzogW3sgdHlwZTogVmlld0NoaWxkLCBhcmdzOiBbJ2luaXRFbGVtZW50JywgeyBzdGF0aWM6IGZhbHNlIH0sXSB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gTWJzY1N0ZXBwZXI7XG59KE1ic2NDb250cm9sQmFzZSkpO1xudmFyIE1ic2NQcm9ncmVzcyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1ic2NQcm9ncmVzcywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYnNjUHJvZ3Jlc3MoaG9zdEVsZW1lbnQsIHpvbmUsIF9mb3JtU2VydmljZSwgY29udHJvbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBob3N0RWxlbWVudCwgem9uZSwgY29udHJvbCwgbnVsbCwgbnVsbCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX2Zvcm1TZXJ2aWNlID0gX2Zvcm1TZXJ2aWNlO1xuICAgICAgICBfdGhpcy5tYXggPSB1bmRlZmluZWQ7XG4gICAgICAgIF90aGlzLmljb24gPSB1bmRlZmluZWQ7XG4gICAgICAgIF90aGlzLmljb25BbGlnbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgX3RoaXMudmFsID0gdW5kZWZpbmVkO1xuICAgICAgICBfdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fY29sb3JDbGFzcyA9IHt9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjUHJvZ3Jlc3MucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgdGhpcy5zZXROZXdWYWx1ZVByb3h5KHYpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY1Byb2dyZXNzLnByb3RvdHlwZSwgXCJkYXRhU3RlcExhYmVsc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAodGhpcy5zdGVwTGFiZWxzKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGVwTGFiZWxzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjUHJvZ3Jlc3MucHJvdG90eXBlLCBcImNvbG9yQ2xhc3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5fY29sb3JDbGFzcykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jb2xvckNsYXNzW2tdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY29sb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb2xvckNsYXNzWydtYnNjLXByb2dyZXNzLScgKyB0aGlzLmNvbG9yXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29sb3JDbGFzcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTWJzY1Byb2dyZXNzLnByb3RvdHlwZS5zZXROZXdWYWx1ZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlICYmIHRoaXMuaW5zdGFuY2UuZ2V0VmFsKCkgIT09IHYpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2Uuc2V0VmFsKHYsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY1Byb2dyZXNzLnByb3RvdHlwZS5uZ09uSW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5faW5oZXJpdGVkT3B0aW9ucyA9IHRoaXMuX2Zvcm1TZXJ2aWNlID8gdGhpcy5fZm9ybVNlcnZpY2Uub3B0aW9ucyA6IHt9O1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5nT25Jbml0LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBNYnNjUHJvZ3Jlc3MucHJvdG90eXBlLmluaXRDb250cm9sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGV4dGVuZCQxKHt9LCB0aGlzLl9pbmhlcml0ZWRPcHRpb25zLCB0aGlzLm9wdGlvbnMsIHRoaXMuaW5saW5lT3B0aW9uc09iaik7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgUHJvZ3Jlc3ModGhpcy5faW5pdEVsZW0ubmF0aXZlRWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLnNldFZhbCh0aGlzLmluaXRpYWxWYWx1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNYnNjUHJvZ3Jlc3MuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbWJzYy1wcm9ncmVzcycsXG4gICAgICAgICAgICAgICAgICAgIGhvc3Q6IHsgJ2NsYXNzJzogJ21ic2MtY29udHJvbC1uZycgfSxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuICAgICAgICA8bGFiZWwgW25nQ2xhc3NdPVxcXCJjb2xvckNsYXNzXFxcIj5cXG4gICAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XFxuICAgICAgICAgICAgPHByb2dyZXNzICNpbml0RWxlbWVudFxcbiAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLXN0ZXAtbGFiZWxzXT1cXFwiZGF0YVN0ZXBMYWJlbHNcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtaWNvbl09XFxcImljb24gPyBpY29uIDogbnVsbFxcXCJcXG4gICAgICAgICAgICAgICAgW2F0dHIuZGF0YS1pY29uLWFsaWduXT1cXFwiaWNvbkFsaWduID8gaWNvbkFsaWduIDogbnVsbFxcXCJcXG4gICAgICAgICAgICAgICAgW2F0dHIuZGF0YS1sYWJlbC1zdHlsZV09XFxcImxhYmVsU3R5bGVcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtaW5wdXQtc3R5bGVdPVxcXCJpbnB1dFN0eWxlXFxcIlxcbiAgICAgICAgICAgICAgICBbYXR0ci5tYXhdPVxcXCJtYXggIT09IHVuZGVmaW5lZCA/IG1heCA6IG51bGxcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtdmFsXT1cXFwidmFsICE9PSB1bmRlZmluZWQgPyB2YWwgOiBudWxsXFxcIlxcbiAgICAgICAgICAgID5cXG4gICAgICAgICAgICA8L3Byb2dyZXNzPlxcbiAgICAgICAgPC9sYWJlbD5cXG4gICAgXCIsXG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydEFzOiAnbW9iaXNjcm9sbCcsXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICBNYnNjUHJvZ3Jlc3MuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBOZ1pvbmUsIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY09wdGlvbnNTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBOZ0NvbnRyb2wsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgIF07IH07XG4gICAgTWJzY1Byb2dyZXNzLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAnb3B0aW9ucyc6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnb3B0aW9ucycsXSB9LF0sXG4gICAgICAgICd2YWx1ZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnbWF4JzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdpY29uJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdpY29uQWxpZ24nOiBbeyB0eXBlOiBJbnB1dCQxLCBhcmdzOiBbJ2ljb24tYWxpZ24nLF0gfSxdLFxuICAgICAgICAndmFsJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdkaXNhYmxlZCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnc3RlcExhYmVscyc6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnc3RlcC1sYWJlbHMnLF0gfSxdLFxuICAgICAgICAnY29sb3InOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ19pbml0RWxlbSc6IFt7IHR5cGU6IFZpZXdDaGlsZCwgYXJnczogWydpbml0RWxlbWVudCcsIHsgc3RhdGljOiBmYWxzZSB9LF0gfSxdLFxuICAgIH07XG4gICAgcmV0dXJuIE1ic2NQcm9ncmVzcztcbn0oTWJzY0NvbnRyb2xCYXNlKSk7XG52YXIgZ3JvdXBOYW1lID0gMTtcbnZhciBNYnNjUmFkaW9TZXJ2aWNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYnNjUmFkaW9TZXJ2aWNlKCkge1xuICAgICAgICB0aGlzLl9sYXN0VmFsdWUgPSBudWxsO1xuICAgICAgICB0aGlzLl92YWx1ZU9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY1JhZGlvU2VydmljZS5wcm90b3R5cGUsIFwibmFtZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9uYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbmFtZSA9ICdtYnNjLXJhZGlvLWdyb3VwLScgKyAoZ3JvdXBOYW1lKyspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgICAgIHRoaXMuX25hbWUgPSBuO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY1JhZGlvU2VydmljZS5wcm90b3R5cGUsIFwibXVsdGlTZWxlY3RcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9tdWx0aVNlbGVjdDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgdGhpcy5fbXVsdGlTZWxlY3QgPSB2O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNYnNjUmFkaW9TZXJ2aWNlLnByb3RvdHlwZS5vblZhbHVlQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlT2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE1ic2NSYWRpb1NlcnZpY2UucHJvdG90eXBlLmNoYW5nZVZhbHVlID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgdGhpcy5fdmFsdWVPYnNlcnZhYmxlLm5leHQodik7XG4gICAgICAgIHRoaXMuX2xhc3RWYWx1ZSA9IHY7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY1JhZGlvU2VydmljZS5wcm90b3R5cGUsIFwiZ2V0TGFzdFZhbHVlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFzdFZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY1JhZGlvU2VydmljZS5wcm90b3R5cGUsIFwiY29sb3JcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb2xvcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgdGhpcy5fY29sb3IgPSB2O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNYnNjUmFkaW9TZXJ2aWNlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogSW5qZWN0YWJsZSB9LFxuICAgIF07XG4gICAgTWJzY1JhZGlvU2VydmljZS5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9O1xuICAgIHJldHVybiBNYnNjUmFkaW9TZXJ2aWNlO1xufSgpKTtcbnZhciBNYnNjUmFkaW9Hcm91cEJhc2UgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYnNjUmFkaW9Hcm91cEJhc2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWJzY1JhZGlvR3JvdXBCYXNlKGhvc3RFbGVtZW50LCBmb3JtU2VydmljZSwgX2lucHV0U2VydmljZSwgX3JhZGlvU2VydmljZSwgY29udHJvbCwgem9uZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBob3N0RWxlbWVudCwgZm9ybVNlcnZpY2UsIF9pbnB1dFNlcnZpY2UsIGNvbnRyb2wsIHpvbmUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9yYWRpb1NlcnZpY2UgPSBfcmFkaW9TZXJ2aWNlO1xuICAgICAgICBfdGhpcy52YWx1ZU9ic2VydmVyID0gX3RoaXMuX3JhZGlvU2VydmljZS5vblZhbHVlQ2hhbmdlZCgpLnN1YnNjcmliZShmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgX3RoaXMuaW5uZXJWYWx1ZSA9IHY7XG4gICAgICAgICAgICBfdGhpcy5vblRvdWNoKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjUmFkaW9Hcm91cEJhc2UucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB2O1xuICAgICAgICAgICAgdGhpcy5fcmFkaW9TZXJ2aWNlLmNoYW5nZVZhbHVlKHYpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNYnNjUmFkaW9Hcm91cEJhc2UucHJvdG90eXBlLm5nT25Jbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5nT25Jbml0LmNhbGwodGhpcyk7XG4gICAgICAgIGlmICh0aGlzLm5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3JhZGlvU2VydmljZS5uYW1lID0gdGhpcy5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNvbG9yKSB7XG4gICAgICAgICAgICB0aGlzLl9yYWRpb1NlcnZpY2UuY29sb3IgPSB0aGlzLmNvbG9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNYnNjUmFkaW9Hcm91cEJhc2UucHJvdG90eXBlLndyaXRlVmFsdWUgPSBmdW5jdGlvbiAodikge1xuICAgICAgICB0aGlzLl92YWx1ZSA9IHY7XG4gICAgICAgIHRoaXMuX3JhZGlvU2VydmljZS5jaGFuZ2VWYWx1ZSh2KTtcbiAgICB9O1xuICAgIE1ic2NSYWRpb0dyb3VwQmFzZS5wcm90b3R5cGUudXBkYXRlT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICBNYnNjUmFkaW9Hcm91cEJhc2UucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9yYWRpb1NlcnZpY2Uub25WYWx1ZUNoYW5nZWQoKS51bnN1YnNjcmliZSh0aGlzLnZhbHVlT2JzZXJ2ZXIpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5nT25EZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBNYnNjUmFkaW9Hcm91cEJhc2UuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBEaXJlY3RpdmUsIGFyZ3M6IFt7IHNlbGVjdG9yOiAnW21ic2MtcmctYl0nIH0sXSB9LFxuICAgIF07XG4gICAgTWJzY1JhZGlvR3JvdXBCYXNlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYsIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY09wdGlvbnNTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjSW5wdXRTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjUmFkaW9TZXJ2aWNlLCB9LFxuICAgICAgICB7IHR5cGU6IE5nQ29udHJvbCwgfSxcbiAgICAgICAgeyB0eXBlOiBOZ1pvbmUsIH0sXG4gICAgXTsgfTtcbiAgICBNYnNjUmFkaW9Hcm91cEJhc2UucHJvcERlY29yYXRvcnMgPSB7XG4gICAgICAgICduYW1lJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICd2YWx1ZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgIH07XG4gICAgcmV0dXJuIE1ic2NSYWRpb0dyb3VwQmFzZTtcbn0oTWJzY0Zvcm1WYWx1ZUJhc2UpKTtcbnZhciBNYnNjUmFkaW9Hcm91cCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1ic2NSYWRpb0dyb3VwLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1ic2NSYWRpb0dyb3VwKGhvc3RFbGVtZW50LCBmb3JtU2VydmljZSwgX2lucHV0U2VydmljZSwgcmFkaW9TZXJ2aWNlLCBjb250cm9sLCB6b25lKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBob3N0RWxlbWVudCwgZm9ybVNlcnZpY2UsIF9pbnB1dFNlcnZpY2UsIHJhZGlvU2VydmljZSwgY29udHJvbCwgem9uZSkgfHwgdGhpcztcbiAgICB9XG4gICAgTWJzY1JhZGlvR3JvdXAuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbWJzYy1yYWRpby1ncm91cCcsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxuZy1jb250ZW50PjwvbmctY29udGVudD5cIixcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbTWJzY1JhZGlvU2VydmljZV1cbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NSYWRpb0dyb3VwLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYsIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY09wdGlvbnNTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjSW5wdXRTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjUmFkaW9TZXJ2aWNlLCB9LFxuICAgICAgICB7IHR5cGU6IE5nQ29udHJvbCwgZGVjb3JhdG9yczogW3sgdHlwZTogT3B0aW9uYWwgfSxdIH0sXG4gICAgICAgIHsgdHlwZTogTmdab25lLCB9LFxuICAgIF07IH07XG4gICAgcmV0dXJuIE1ic2NSYWRpb0dyb3VwO1xufShNYnNjUmFkaW9Hcm91cEJhc2UpKTtcbnZhciBNYnNjUmFkaW8gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYnNjUmFkaW8sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWJzY1JhZGlvKGhvc3RFbGVtZW50LCBmb3JtU2VydmljZSwgX3JhZGlvU2VydmljZSwgem9uZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBob3N0RWxlbWVudCwgZm9ybVNlcnZpY2UsIHpvbmUpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl9yYWRpb1NlcnZpY2UgPSBfcmFkaW9TZXJ2aWNlO1xuICAgICAgICBfdGhpcy5fY29sb3JDbGFzcyA9IHt9O1xuICAgICAgICB2YXIgdiA9IF90aGlzLl9yYWRpb1NlcnZpY2UuZ2V0TGFzdFZhbHVlO1xuICAgICAgICBpZiAodiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgX3RoaXMubW9kZWxWYWx1ZSA9IHY7XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMudmFsdWVPYnNlcnZlciA9IF90aGlzLl9yYWRpb1NlcnZpY2Uub25WYWx1ZUNoYW5nZWQoKS5zdWJzY3JpYmUoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgIF90aGlzLm1vZGVsVmFsdWUgPSB2O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY1JhZGlvLnByb3RvdHlwZSwgXCJjaGVja2VkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZSA9PSB0aGlzLm1vZGVsVmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjUmFkaW8ucHJvdG90eXBlLCBcImNvbG9yQ2xhc3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGsgaW4gdGhpcy5fY29sb3JDbGFzcykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jb2xvckNsYXNzW2tdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuY29sb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb2xvckNsYXNzWydtYnNjLXJhZGlvLScgKyB0aGlzLmNvbG9yXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbG9yQ2xhc3NbJ21ic2MtZXJyJ10gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yQ2xhc3M7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1ic2NSYWRpby5wcm90b3R5cGUuY2xpY2tlZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHRoaXMuX3JhZGlvU2VydmljZS5jaGFuZ2VWYWx1ZSh0aGlzLnZhbHVlKTtcbiAgICB9O1xuICAgIE1ic2NSYWRpby5wcm90b3R5cGUuaW5pdENvbnRyb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gZXh0ZW5kJDEoe30sIHRoaXMuX2luaGVyaXRlZE9wdGlvbnMsIHRoaXMub3B0aW9ucywgdGhpcy5pbmxpbmVPcHRpb25zT2JqKTtcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBSYWRpbyh0aGlzLl9pbml0RWxlbS5uYXRpdmVFbGVtZW50LCBvcHRpb25zKTtcbiAgICB9O1xuICAgIE1ic2NSYWRpby5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmdPbkluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5fcmFkaW9TZXJ2aWNlLm5hbWU7XG4gICAgICAgIHRoaXMuY29sb3IgPSB0aGlzLl9yYWRpb1NlcnZpY2UuY29sb3I7XG4gICAgfTtcbiAgICBNYnNjUmFkaW8ucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9yYWRpb1NlcnZpY2Uub25WYWx1ZUNoYW5nZWQoKS51bnN1YnNjcmliZSh0aGlzLnZhbHVlT2JzZXJ2ZXIpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5nT25EZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBNYnNjUmFkaW8uZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbWJzYy1yYWRpbycsXG4gICAgICAgICAgICAgICAgICAgIGhvc3Q6IHsgJ2NsYXNzJzogJ21ic2MtY29udHJvbC1uZycgfSxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuICAgICAgICA8bGFiZWwgW25nQ2xhc3NdPVxcXCJjb2xvckNsYXNzXFxcIj5cXG4gICAgICAgICAgICA8aW5wdXQgI2luaXRFbGVtZW50IFxcbiAgICAgICAgICAgICAgICB0eXBlPVxcXCJyYWRpb1xcXCIgXFxuICAgICAgICAgICAgICAgIFthdHRyLm5hbWVdPVxcXCJuYW1lXFxcIiBcXG4gICAgICAgICAgICAgICAgW2F0dHIudmFsdWVdPVxcXCJ2YWx1ZVxcXCJcXG4gICAgICAgICAgICAgICAgW3ZhbHVlXT1cXFwidmFsdWVcXFwiIFxcbiAgICAgICAgICAgICAgICBbY2hlY2tlZF09XFxcImNoZWNrZWRcXFwiXFxuICAgICAgICAgICAgICAgIFtkaXNhYmxlZF09XFxcImRpc2FibGVkXFxcIlxcbiAgICAgICAgICAgICAgICAoY2xpY2spPVxcXCJjbGlja2VkKCRldmVudClcXFwiIC8+XFxuICAgICAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxcbiAgICAgICAgICAgIDxzcGFuICpuZ0lmPVxcXCJlcnJvciAmJiBlcnJvck1lc3NhZ2VcXFwiIGNsYXNzPVxcXCJtYnNjLWVyci1tc2dcXFwiPnt7ZXJyb3JNZXNzYWdlfX08L3NwYW4+XFxuICAgICAgICA8L2xhYmVsPlxcbiAgICBcIlxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgTWJzY1JhZGlvLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYsIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY09wdGlvbnNTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjUmFkaW9TZXJ2aWNlLCB9LFxuICAgICAgICB7IHR5cGU6IE5nWm9uZSwgfSxcbiAgICBdOyB9O1xuICAgIE1ic2NSYWRpby5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgJ3ZhbHVlJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdlcnJvcic6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnZXJyb3JNZXNzYWdlJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gTWJzY1JhZGlvO1xufShNYnNjRm9ybUJhc2UpKTtcbnZhciBNYnNjU2VnbWVudGVkR3JvdXAgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNYnNjU2VnbWVudGVkR3JvdXAsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWJzY1NlZ21lbnRlZEdyb3VwKGhvc3RFbGVtZW50LCBmb3JtU2VydmljZSwgX2lucHV0U2VydmljZSwgcmFkaW9TZXJ2aWNlLCBjb250cm9sLCB6b25lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGhvc3RFbGVtZW50LCBmb3JtU2VydmljZSwgX2lucHV0U2VydmljZSwgcmFkaW9TZXJ2aWNlLCBjb250cm9sLCB6b25lKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zZWxlY3QgPSAnc2luZ2xlJztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY1NlZ21lbnRlZEdyb3VwLnByb3RvdHlwZSwgXCJtdWx0aVNlbGVjdFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ID09ICdtdWx0aXBsZSc7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1ic2NTZWdtZW50ZWRHcm91cC5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmdPbkluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fcmFkaW9TZXJ2aWNlLm11bHRpU2VsZWN0ID0gdGhpcy5tdWx0aVNlbGVjdDtcbiAgICAgICAgaWYgKHRoaXMuY29sb3IpIHtcbiAgICAgICAgICAgIHRoaXMuX3JhZGlvU2VydmljZS5jb2xvciA9IHRoaXMuY29sb3I7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1ic2NTZWdtZW50ZWRHcm91cC5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdtYnNjLXNlZ21lbnRlZC1ncm91cCcsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9XFxcIm1ic2Mtc2VnbWVudGVkIG1ic2Mtc2VnbWVudGVkLWdyb3VwIG1ic2Mtbm8tdG91Y2hcXFwiPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2Rpdj5cIixcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbTWJzY1JhZGlvU2VydmljZV1cbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NTZWdtZW50ZWRHcm91cC5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcbiAgICAgICAgeyB0eXBlOiBFbGVtZW50UmVmLCB9LFxuICAgICAgICB7IHR5cGU6IE1ic2NPcHRpb25zU2VydmljZSwgZGVjb3JhdG9yczogW3sgdHlwZTogT3B0aW9uYWwgfSxdIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY0lucHV0U2VydmljZSwgZGVjb3JhdG9yczogW3sgdHlwZTogT3B0aW9uYWwgfSxdIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY1JhZGlvU2VydmljZSwgfSxcbiAgICAgICAgeyB0eXBlOiBOZ0NvbnRyb2wsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgICAgICB7IHR5cGU6IE5nWm9uZSwgfSxcbiAgICBdOyB9O1xuICAgIE1ic2NTZWdtZW50ZWRHcm91cC5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgJ3NlbGVjdCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgIH07XG4gICAgcmV0dXJuIE1ic2NTZWdtZW50ZWRHcm91cDtcbn0oTWJzY1JhZGlvR3JvdXBCYXNlKSk7XG52YXIgTWJzY1NlZ21lbnRlZCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1ic2NTZWdtZW50ZWQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWJzY1NlZ21lbnRlZChob3N0RWxlbWVudCwgZm9ybVNlcnZpY2UsIF9yYWRpb1NlcnZpY2UsIHpvbmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgaG9zdEVsZW1lbnQsIGZvcm1TZXJ2aWNlLCB6b25lKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fcmFkaW9TZXJ2aWNlID0gX3JhZGlvU2VydmljZTtcbiAgICAgICAgX3RoaXMuY2hlY2tlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdmFyIHYgPSBfdGhpcy5fcmFkaW9TZXJ2aWNlLmdldExhc3RWYWx1ZTtcbiAgICAgICAgaWYgKHYgIT09IG51bGwpIHtcbiAgICAgICAgICAgIF90aGlzLm1vZGVsVmFsdWUgPSB2O1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLnZhbHVlT2JzZXJ2ZXIgPSBfdGhpcy5fcmFkaW9TZXJ2aWNlLm9uVmFsdWVDaGFuZ2VkKCkuc3Vic2NyaWJlKGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICBfdGhpcy5tb2RlbFZhbHVlID0gdjtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1ic2NTZWdtZW50ZWQucHJvdG90eXBlLCBcImlzQ2hlY2tlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubXVsdGlTZWxlY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja2VkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tlZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsVmFsdWUgJiYgdGhpcy5tb2RlbFZhbHVlLmluY2x1ZGVzKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlID09IHRoaXMubW9kZWxWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTWJzY1NlZ21lbnRlZC5wcm90b3R5cGUuY2xpY2tlZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh0aGlzLm11bHRpU2VsZWN0ICYmIHRoaXMuY2hlY2tlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmNoZWNrZWRDaGFuZ2UuZW1pdCghKCEhdGhpcy5jaGVja2VkKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tdWx0aVNlbGVjdCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsVmFsdWUuaW5jbHVkZXModGhpcy52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSB0aGlzLm1vZGVsVmFsdWUuaW5kZXhPZih0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbFZhbHVlLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWxWYWx1ZS5wdXNoKHRoaXMudmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9yYWRpb1NlcnZpY2UuY2hhbmdlVmFsdWUodGhpcy5tb2RlbFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JhZGlvU2VydmljZS5jaGFuZ2VWYWx1ZSh0aGlzLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1ic2NTZWdtZW50ZWQucHJvdG90eXBlLCBcImNzc0NsYXNzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2wgPSAnbWJzYy1zZWdtZW50ZWQtaXRlbSc7XG4gICAgICAgICAgICBpZiAodGhpcy5jb2xvcikge1xuICAgICAgICAgICAgICAgIGNsICs9ICcgbWJzYy1zZWdtZW50ZWQtJyArIHRoaXMuY29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2w7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1ic2NTZWdtZW50ZWQucHJvdG90eXBlLmluaXRDb250cm9sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGV4dGVuZCQxKHt9LCB0aGlzLl9pbmhlcml0ZWRPcHRpb25zLCB0aGlzLm9wdGlvbnMsIHRoaXMuaW5saW5lT3B0aW9uc09iaik7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgU2VnbWVudGVkSXRlbSh0aGlzLl9pbml0RWxlbS5uYXRpdmVFbGVtZW50LCBvcHRpb25zKTtcbiAgICB9O1xuICAgIE1ic2NTZWdtZW50ZWQucHJvdG90eXBlLm5nT25Jbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLm5nT25Jbml0LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuX3JhZGlvU2VydmljZS5uYW1lO1xuICAgICAgICB0aGlzLm11bHRpU2VsZWN0ID0gdGhpcy5fcmFkaW9TZXJ2aWNlLm11bHRpU2VsZWN0O1xuICAgICAgICB0aGlzLmNvbG9yID0gdGhpcy5fcmFkaW9TZXJ2aWNlLmNvbG9yO1xuICAgIH07XG4gICAgTWJzY1NlZ21lbnRlZC5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX3JhZGlvU2VydmljZS5vblZhbHVlQ2hhbmdlZCgpLnVuc3Vic2NyaWJlKHRoaXMudmFsdWVPYnNlcnZlcik7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmdPbkRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIE1ic2NTZWdtZW50ZWQuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbWJzYy1zZWdtZW50ZWQnLFxuICAgICAgICAgICAgICAgICAgICBob3N0OiB7ICdbY2xhc3NdJzogJ2Nzc0NsYXNzJyB9LFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCJcXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cXFwibWJzYy1zZWdtZW50ZWQtaXRlbS1yZWFkeVxcXCI+XFxuICAgICAgICAgICAgPGlucHV0ICNpbml0RWxlbWVudCBcXG4gICAgICAgICAgICAgICAgZGF0YS1yb2xlPVxcXCJzZWdtZW50ZWRcXFwiXFxuICAgICAgICAgICAgICAgIFt0eXBlXT1cXFwibXVsdGlTZWxlY3QgPyAnY2hlY2tib3gnIDogJ3JhZGlvJ1xcXCIgXFxuICAgICAgICAgICAgICAgIFt2YWx1ZV09XFxcInZhbHVlXFxcIiBcXG4gICAgICAgICAgICAgICAgW2NoZWNrZWRdPVxcXCJpc0NoZWNrZWRcXFwiXFxuICAgICAgICAgICAgICAgIFtkaXNhYmxlZF09XFxcImRpc2FibGVkXFxcIlxcbiAgICAgICAgICAgICAgICBbYXR0ci5uYW1lXT1cXFwibmFtZVxcXCIgXFxuICAgICAgICAgICAgICAgIFthdHRyLnZhbHVlXT1cXFwidmFsdWVcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtaWNvbl09XFxcImljb24gPyBpY29uIDogbnVsbFxcXCJcXG4gICAgICAgICAgICAgICAgKGNsaWNrKT1cXFwiY2xpY2tlZCgkZXZlbnQpXFxcIiAvPlxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJtYnNjLXNlZ21lbnRlZC1jb250ZW50XFxcIj5cXG4gICAgICAgICAgICAgICAgPHNwYW4gKm5nSWY9XFxcImljb25cXFwiIGNsYXNzPVxcXCJ7eydtYnNjLWljIG1ic2MtaWMtJyArIGljb24gfX1cXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxcbiAgICAgICAgICAgIDwvc3Bhbj5cXG4gICAgICAgIDwvbGFiZWw+XFxuICAgIFwiXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICBNYnNjU2VnbWVudGVkLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYsIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY09wdGlvbnNTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjUmFkaW9TZXJ2aWNlLCB9LFxuICAgICAgICB7IHR5cGU6IE5nWm9uZSwgfSxcbiAgICBdOyB9O1xuICAgIE1ic2NTZWdtZW50ZWQucHJvcERlY29yYXRvcnMgPSB7XG4gICAgICAgICdpY29uJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICd2YWx1ZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnY2hlY2tlZCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnY2hlY2tlZENoYW5nZSc6IFt7IHR5cGU6IE91dHB1dCB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gTWJzY1NlZ21lbnRlZDtcbn0oTWJzY0Zvcm1CYXNlKSk7XG52YXIgTWJzY1NsaWRlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1ic2NTbGlkZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTWJzY1NsaWRlcihob3N0RWxlbWVudCwgX2Zvcm1TZXJ2aWNlLCB6b25lLCBjb250cm9sKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGhvc3RFbGVtZW50LCB6b25lLCBjb250cm9sLCBudWxsLCBudWxsKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fZm9ybVNlcnZpY2UgPSBfZm9ybVNlcnZpY2U7XG4gICAgICAgIF90aGlzLl9kdW1teSA9IHVuZGVmaW5lZDtcbiAgICAgICAgX3RoaXMuX25lZWRzVGltZW91dCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fY29sb3JDbGFzcyA9IHt9O1xuICAgICAgICBfdGhpcy5vbkNoYW5nZUVtaXR0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1ic2NTbGlkZXIucHJvdG90eXBlLCBcImlzTXVsdGlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sYXN0VmFsdWUgaW5zdGFuY2VvZiBBcnJheTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1ic2NTbGlkZXIucHJvdG90eXBlLCBcImR1bW15QXJyYXlcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5fZHVtbXkgfHwgKHRoaXMuaXNNdWx0aSAmJiB0aGlzLl9sYXN0VmFsdWUgJiYgdGhpcy5fbGFzdFZhbHVlLmxlbmd0aCAmJiB0aGlzLl9kdW1teS5sZW5ndGggIT09IHRoaXMuX2xhc3RWYWx1ZS5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZHVtbXkgPSBBcnJheSh0aGlzLmlzTXVsdGkgPyB0aGlzLl9sYXN0VmFsdWUubGVuZ3RoIDogMSkuZmlsbCgwKS5tYXAoZnVuY3Rpb24gKHgsIGkpIHsgcmV0dXJuIGk7IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2R1bW15O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY1NsaWRlci5wcm90b3R5cGUsIFwiZGF0YVN0ZXBMYWJlbHNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKHRoaXMuc3RlcExhYmVscykgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RlcExhYmVscztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY1NsaWRlci5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICB0aGlzLnNldE5ld1ZhbHVlUHJveHkodik7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjU2xpZGVyLnByb3RvdHlwZSwgXCJjb2xvckNsYXNzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuX2NvbG9yQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fY29sb3JDbGFzc1trXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29sb3JDbGFzc1snbWJzYy1zbGlkZXItJyArIHRoaXMuY29sb3JdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb2xvckNsYXNzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNYnNjU2xpZGVyLnByb3RvdHlwZS5yZUluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnNldEVsZW1lbnQoKTtcbiAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnRzLmZvckVhY2goZnVuY3Rpb24gKGlucHV0LCBpbmRleCkge1xuICAgICAgICAgICAgaWYgKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGFuZGxlQ2hhbmdlKGlucHV0Lm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBleHRlbmQkMSh7fSwgdGhpcy5faW5oZXJpdGVkT3B0aW9ucywgdGhpcy5vcHRpb25zLCB0aGlzLmlubGluZU9wdGlvbnNPYmopO1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IFNsaWRlcih0aGlzLmlucHV0RWxlbWVudHMuZmlyc3QubmF0aXZlRWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfTtcbiAgICBNYnNjU2xpZGVyLnByb3RvdHlwZS5zZXROZXdWYWx1ZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2xhc3RWYWx1ZSA9IHY7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XG4gICAgICAgICAgICB2YXIgaW5uZXJWYWx1ZSA9IHRoaXMuaW5zdGFuY2UuZ2V0VmFsKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc011bHRpICYmICghaW5uZXJWYWx1ZSB8fCBpbm5lclZhbHVlLmxlbmd0aCAhPSB2Lmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVJbml0aWFsaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmluc3RhbmNlLnNldFZhbChfdGhpcy5fbGFzdFZhbHVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hhbmdlZCA9ICh0aGlzLmlzTXVsdGkgJiYgIWRlZXBFcXVhbHNBcnJheShpbm5lclZhbHVlLCB2KSkgfHwgKCF0aGlzLmlzTXVsdGkgJiYgaW5uZXJWYWx1ZSAhPT0gdik7XG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5zZXRWYWwodiwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY1NsaWRlci5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2luaGVyaXRlZE9wdGlvbnMgPSB0aGlzLl9mb3JtU2VydmljZSA/IHRoaXMuX2Zvcm1TZXJ2aWNlLm9wdGlvbnMgOiB7fTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZ09uSW5pdC5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgTWJzY1NsaWRlci5wcm90b3R5cGUuaW5pdENvbnRyb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChpbnB1dCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChpbmRleCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZUNoYW5nZShpbnB1dC5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBvcHRpb25zID0gZXh0ZW5kJDEoe30sIHRoaXMuX2luaGVyaXRlZE9wdGlvbnMsIHRoaXMub3B0aW9ucywgdGhpcy5pbmxpbmVPcHRpb25zT2JqKTtcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBTbGlkZXIodGhpcy5pbnB1dEVsZW1lbnRzLmZpcnN0Lm5hdGl2ZUVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBpZiAodGhpcy5pbml0aWFsVmFsdWUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmluaXRpYWxWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5zZXRWYWwodGhpcy5pbml0aWFsVmFsdWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY1NsaWRlci5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdtYnNjLXNsaWRlcicsXG4gICAgICAgICAgICAgICAgICAgIGhvc3Q6IHsgJ2NsYXNzJzogJ21ic2MtY29udHJvbC1uZycgfSxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuICAgICAgICA8bGFiZWwgW25nQ2xhc3NdPVxcXCJjb2xvckNsYXNzXFxcIj5cXG4gICAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XFxuICAgICAgICAgICAgPGlucHV0ICNpbnB1dEVsZW1lbnRzICpuZ0Zvcj1cXFwibGV0IHYgb2YgZHVtbXlBcnJheVxcXCIgXFxuICAgICAgICAgICAgICAgIHR5cGU9XFxcInJhbmdlXFxcIlxcbiAgICAgICAgICAgICAgICBbZGlzYWJsZWRdPVxcXCJkaXNhYmxlZFxcXCJcXG4gICAgICAgICAgICAgICAgW2F0dHIudmFsdWVdPVxcXCJkdW1teUFycmF5Lmxlbmd0aCA+IDEgJiYgaW5pdGlhbFZhbHVlID8gaW5pdGlhbFZhbHVlW3ZdOiBpbml0aWFsVmFsdWVcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtc3RlcC1sYWJlbHNdPVxcXCJkYXRhU3RlcExhYmVsc1xcXCJcXG4gICAgICAgICAgICAgICAgW2F0dHIuZGF0YS10ZW1wbGF0ZV09XFxcInZhbHVlVGVtcGxhdGVcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtdG9vbHRpcF09XFxcInRvb2x0aXAgPyAndHJ1ZScgOiBudWxsXFxcIlxcbiAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLWhpZ2hsaWdodF09XFxcImhpZ2hsaWdodFxcXCJcXG4gICAgICAgICAgICAgICAgW2F0dHIuZGF0YS1saXZlXT1cXFwibGl2ZVxcXCJcXG4gICAgICAgICAgICAgICAgW2F0dHIuZGF0YS1pY29uXT1cXFwiaWNvbiA/IGljb24gOiBudWxsXFxcIlxcbiAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLXZhbF09XFxcInZhbCA/IHZhbCA6IG51bGxcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLmRhdGEtbGFiZWwtc3R5bGVdPVxcXCJsYWJlbFN0eWxlXFxcIlxcbiAgICAgICAgICAgICAgICBbYXR0ci5kYXRhLWlucHV0LXN0eWxlXT1cXFwiaW5wdXRTdHlsZVxcXCJcXG4gICAgICAgICAgICAgICAgW2F0dHIubmFtZV09XFxcIm5hbWVcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLm1heF09XFxcIm1heCAhPT0gdW5kZWZpbmVkID8gbWF4IDogbnVsbFxcXCJcXG4gICAgICAgICAgICAgICAgW2F0dHIubWluXT1cXFwibWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiBudWxsXFxcIlxcbiAgICAgICAgICAgICAgICBbYXR0ci5zdGVwXT1cXFwic3RlcCAhPT0gdW5kZWZpbmVkID8gc3RlcCA6IG51bGxcXFwiXFxuICAgICAgICAgICAgICAgIChibHVyKT1cXFwib25Ub3VjaCgkZXZlbnQpXFxcIiAvPlxcbiAgICAgICAgPC9sYWJlbD5cXG4gICAgXCIsXG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydEFzOiAnbW9iaXNjcm9sbCdcbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NTbGlkZXIuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBNYnNjT3B0aW9uc1NlcnZpY2UsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgICAgICB7IHR5cGU6IE5nWm9uZSwgfSxcbiAgICAgICAgeyB0eXBlOiBOZ0NvbnRyb2wsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgIF07IH07XG4gICAgTWJzY1NsaWRlci5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgJ29wdGlvbnMnOiBbeyB0eXBlOiBJbnB1dCQxLCBhcmdzOiBbJ29wdGlvbnMnLF0gfSxdLFxuICAgICAgICAnbmFtZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAndG9vbHRpcCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnaGlnaGxpZ2h0JzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdsaXZlJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICd2YWx1ZVRlbXBsYXRlJzogW3sgdHlwZTogSW5wdXQkMSwgYXJnczogWyd2YWx1ZS10ZW1wbGF0ZScsXSB9LF0sXG4gICAgICAgICdpY29uJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICd2YWwnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ21heCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnbWluJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdzdGVwJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdkaXNhYmxlZCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnc3RlcExhYmVscyc6IFt7IHR5cGU6IElucHV0JDEsIGFyZ3M6IFsnc3RlcC1sYWJlbHMnLF0gfSxdLFxuICAgICAgICAndmFsdWUnOiBbeyB0eXBlOiBJbnB1dCQxLCBhcmdzOiBbJ3ZhbHVlJyxdIH0sXSxcbiAgICAgICAgJ2NvbG9yJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdvbkNoYW5nZUVtaXR0ZXInOiBbeyB0eXBlOiBPdXRwdXQsIGFyZ3M6IFsndmFsdWVDaGFuZ2UnLF0gfSxdLFxuICAgICAgICAnaW5wdXRFbGVtZW50cyc6IFt7IHR5cGU6IFZpZXdDaGlsZHJlbiwgYXJnczogWydpbnB1dEVsZW1lbnRzJyxdIH0sXSxcbiAgICB9O1xuICAgIHJldHVybiBNYnNjU2xpZGVyO1xufShNYnNjQ29udHJvbEJhc2UpKTtcbnZhciBNYnNjUmF0aW5nID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTWJzY1JhdGluZywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNYnNjUmF0aW5nKGhvc3RFbGVtLCB6b25lLCBmb3JtU2VydmljZSwgY29udHJvbCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBob3N0RWxlbSwgem9uZSwgY29udHJvbCwgbnVsbCwgbnVsbCkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZm9ybVNlcnZpY2UgPSBmb3JtU2VydmljZTtcbiAgICAgICAgX3RoaXMubWluID0gdW5kZWZpbmVkO1xuICAgICAgICBfdGhpcy5tYXggPSB1bmRlZmluZWQ7XG4gICAgICAgIF90aGlzLnN0ZXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIF90aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnZhbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgX3RoaXMub25DaGFuZ2VFbWl0dGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICBfdGhpcy5fY29sb3JDbGFzcyA9IHt9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjUmF0aW5nLnByb3RvdHlwZSwgXCJyZWFkb25seVwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgdGhpcy5fcmVhZG9ubHkgPSBlbXB0eU9yVHJ1ZSh2YWwpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY1JhdGluZy5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgICB0aGlzLnNldE5ld1ZhbHVlUHJveHkodik7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYnNjUmF0aW5nLnByb3RvdHlwZSwgXCJjb2xvckNsYXNzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIHRoaXMuX2NvbG9yQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fY29sb3JDbGFzc1trXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbG9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29sb3JDbGFzc1snbWJzYy1yYXRpbmctJyArIHRoaXMuY29sb3JdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb2xvckNsYXNzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNYnNjUmF0aW5nLnByb3RvdHlwZS5zZXROZXdWYWx1ZSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pbnN0YW5jZS5nZXRWYWwoKSAhPT0gdikge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2Uuc2V0VmFsKHYsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY1JhdGluZy5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuX2luaGVyaXRlZE9wdGlvbnMgPSB0aGlzLmZvcm1TZXJ2aWNlID8gdGhpcy5mb3JtU2VydmljZS5vcHRpb25zIDoge307XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmdPbkluaXQuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIE1ic2NSYXRpbmcucHJvdG90eXBlLmluaXRDb250cm9sID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGV4dGVuZCQxKHt9LCB0aGlzLl9pbmhlcml0ZWRPcHRpb25zLCB0aGlzLm9wdGlvbnMsIHRoaXMuaW5saW5lT3B0aW9uc09iaik7XG4gICAgICAgIHRoaXMuaW5zdGFuY2UgPSBuZXcgUmF0aW5nKHRoaXMuZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLnNldFZhbCh0aGlzLmluaXRpYWxWYWx1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNYnNjUmF0aW5nLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ21ic2MtcmF0aW5nJyxcbiAgICAgICAgICAgICAgICAgICAgaG9zdDogeyAnY2xhc3MnOiAnbWJzYy1jb250cm9sLW5nJyB9LFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8bGFiZWwgW25nQ2xhc3NdPVxcXCJjb2xvckNsYXNzXFxcIj5cXG4gICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cXG4gICAgICAgIDxpbnB1dCB0eXBlPVxcXCJyYXRpbmdcXFwiIGRhdGEtcm9sZT1cXFwicmF0aW5nXFxcIiBcXG4gICAgICAgICAgICBbYXR0ci5uYW1lXT1cXFwibmFtZVxcXCJcXG4gICAgICAgICAgICBbYXR0ci5taW5dPVxcXCJtaW4gIT09IHVuZGVmaW5lZCA/IG1pbiA6IG51bGxcXFwiXFxuICAgICAgICAgICAgW2F0dHIubWF4XT1cXFwibWF4ICE9PSB1bmRlZmluZWQgPyBtYXggOiBudWxsXFxcIlxcbiAgICAgICAgICAgIFthdHRyLnN0ZXBdPVxcXCJzdGVwICE9PSB1bmRlZmluZWQgPyBzdGVwIDogbnVsbFxcXCJcXG4gICAgICAgICAgICBbYXR0ci5kYXRhLXZhbF09XFxcInZhbCA/IHZhbCA6IG51bGxcXFwiXFxuICAgICAgICAgICAgW2F0dHIuZGF0YS10ZW1wbGF0ZV09XFxcInRlbXBsYXRlID8gdGVtcGxhdGUgOiBudWxsXFxcIlxcbiAgICAgICAgICAgIFthdHRyLmRhdGEtZW1wdHldPVxcXCJlbXB0eVxcXCJcXG4gICAgICAgICAgICBbYXR0ci5kYXRhLWZpbGxlZF09XFxcImZpbGxlZFxcXCJcXG4gICAgICAgICAgICBbYXR0ci5kYXRhLWxhYmVsLXN0eWxlXT1cXFwibGFiZWxTdHlsZVxcXCJcXG4gICAgICAgICAgICBbYXR0ci5kYXRhLWlucHV0LXN0eWxlXT1cXFwiaW5wdXRTdHlsZVxcXCJcXG4gICAgICAgICAgICBbZGlzYWJsZWRdPVxcXCJkaXNhYmxlZFxcXCJcXG4gICAgICAgICAgICBbcmVhZG9ubHldPVxcXCJfcmVhZG9ubHlcXFwiXFxuICAgICAgICAgICAgKGJsdXIpPVxcXCJvblRvdWNoKCRldmVudClcXFwiIC8+XFxuICAgIDwvbGFiZWw+XCJcbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NSYXRpbmcuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICAgICAgeyB0eXBlOiBOZ1pvbmUsIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY09wdGlvbnNTZXJ2aWNlLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBPcHRpb25hbCB9LF0gfSxcbiAgICAgICAgeyB0eXBlOiBOZ0NvbnRyb2wsIGRlY29yYXRvcnM6IFt7IHR5cGU6IE9wdGlvbmFsIH0sXSB9LFxuICAgIF07IH07XG4gICAgTWJzY1JhdGluZy5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgJ29wdGlvbnMnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ25hbWUnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ21pbic6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnbWF4JzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdzdGVwJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdkaXNhYmxlZCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnZW1wdHknOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2ZpbGxlZCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAncmVhZG9ubHknOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3ZhbCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAndGVtcGxhdGUnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ3ZhbHVlJzogW3sgdHlwZTogSW5wdXQkMSwgYXJnczogWyd2YWx1ZScsXSB9LF0sXG4gICAgICAgICdvbkNoYW5nZUVtaXR0ZXInOiBbeyB0eXBlOiBPdXRwdXQsIGFyZ3M6IFsndmFsdWVDaGFuZ2UnLF0gfSxdLFxuICAgICAgICAnY29sb3InOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICB9O1xuICAgIHJldHVybiBNYnNjUmF0aW5nO1xufShNYnNjQ29udHJvbEJhc2UpKTtcbnZhciBNYnNjRm9ybUdyb3VwID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYnNjRm9ybUdyb3VwKGluaXRpYWxFbGVtKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbEVsZW0gPSBpbml0aWFsRWxlbTtcbiAgICAgICAgdGhpcy5jb2xsYXBzaWJsZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX29wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGluaXRpYWxFbGVtO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY0Zvcm1Hcm91cC5wcm90b3R5cGUsIFwib3BlblwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vcGVuICE9IHYgJiYgdGhpcy5pbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zdGFuY2Uuc2hvdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS5oaWRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb3BlbiA9IHY7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1ic2NGb3JtR3JvdXAucHJvdG90eXBlLmVtcHR5T3JUcnVlID0gZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5T3JUcnVlKHYpO1xuICAgIH07XG4gICAgTWJzY0Zvcm1Hcm91cC5wcm90b3R5cGUubmdBZnRlclZpZXdJbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jb2xsYXBzaWJsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBDb2xsYXBzaWJsZUJhc2UodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHsgaXNPcGVuOiB0aGlzLl9vcGVuICE9PSBmYWxzZSB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY0Zvcm1Hcm91cC5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTWJzY0Zvcm1Hcm91cC5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdtYnNjLWZvcm0tZ3JvdXAnLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICAgICAgICAgICAgICAgICAgICBob3N0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnW2NsYXNzLm1ic2MtZm9ybS1ncm91cC1pbnNldF0nOiAnZW1wdHlPclRydWUoaW5zZXQpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdbY2xhc3MubWJzYy1mb3JtLWdyb3VwXSc6ICchZW1wdHlPclRydWUoaW5zZXQpJ1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBibG9jazsgfSddXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICBNYnNjRm9ybUdyb3VwLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYsIH0sXG4gICAgXTsgfTtcbiAgICBNYnNjRm9ybUdyb3VwLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAnY29sbGFwc2libGUnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ29wZW4nOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICAgICAgJ2luc2V0JzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgfTtcbiAgICByZXR1cm4gTWJzY0Zvcm1Hcm91cDtcbn0oKSk7XG52YXIgTWJzY0Zvcm1Hcm91cFRpdGxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYnNjRm9ybUdyb3VwVGl0bGUoKSB7XG4gICAgfVxuICAgIE1ic2NGb3JtR3JvdXBUaXRsZS5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdtYnNjLWZvcm0tZ3JvdXAtdGl0bGUnLFxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50PjwvbmctY29udGVudD4nLFxuICAgICAgICAgICAgICAgICAgICBob3N0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAnW2NsYXNzLm1ic2MtZm9ybS1ncm91cC10aXRsZV0nOiAndHJ1ZSdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogYmxvY2s7IH0nXVxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgTWJzY0Zvcm1Hcm91cFRpdGxlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgcmV0dXJuIE1ic2NGb3JtR3JvdXBUaXRsZTtcbn0oKSk7XG52YXIgTWJzY0Zvcm1Hcm91cENvbnRlbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1ic2NGb3JtR3JvdXBDb250ZW50KCkge1xuICAgIH1cbiAgICBNYnNjRm9ybUdyb3VwQ29udGVudC5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdtYnNjLWZvcm0tZ3JvdXAtY29udGVudCcsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gICAgICAgICAgICAgICAgICAgIGhvc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdbY2xhc3MubWJzYy1mb3JtLWdyb3VwLWNvbnRlbnRdJzogJ3RydWUnXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlczogWyc6aG9zdCB7IGRpc3BsYXk6IGJsb2NrOyB9J11cbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NGb3JtR3JvdXBDb250ZW50LmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgcmV0dXJuIE1ic2NGb3JtR3JvdXBDb250ZW50O1xufSgpKTtcbnZhciBNYnNjQWNjb3JkaW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYnNjQWNjb3JkaW9uKCkge1xuICAgIH1cbiAgICBNYnNjQWNjb3JkaW9uLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ21ic2MtYWNjb3JkaW9uJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgICAgICAgICAgICAgICAgICAgaG9zdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1tjbGFzcy5tYnNjLWFjY29yZGlvbl0nOiAndHJ1ZSdcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogYmxvY2s7IH0nXVxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgTWJzY0FjY29yZGlvbi5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9O1xuICAgIHJldHVybiBNYnNjQWNjb3JkaW9uO1xufSgpKTtcbnZhciBjb21wID0gW1xuICAgIE1ic2NGb3JtLFxuICAgIE1ic2NUZXh0YXJlYSxcbiAgICBNYnNjRHJvcGRvd24sXG4gICAgTWJzY0J1dHRvbixcbiAgICBNYnNjQ2hlY2tib3gsXG4gICAgTWJzY1N3aXRjaCxcbiAgICBNYnNjU3RlcHBlcixcbiAgICBNYnNjUHJvZ3Jlc3MsXG4gICAgTWJzY1JhZGlvR3JvdXAsXG4gICAgTWJzY1JhZGlvR3JvdXBCYXNlLFxuICAgIE1ic2NSYWRpbyxcbiAgICBNYnNjU2VnbWVudGVkR3JvdXAsXG4gICAgTWJzY1NlZ21lbnRlZCxcbiAgICBNYnNjU2xpZGVyLFxuICAgIE1ic2NSYXRpbmcsXG4gICAgTWJzY0Zvcm1Hcm91cCxcbiAgICBNYnNjRm9ybUdyb3VwVGl0bGUsXG4gICAgTWJzY0Zvcm1Hcm91cENvbnRlbnQsXG4gICAgTWJzY0FjY29yZGlvblxuXTtcbnZhciBNYnNjRm9ybXNNb2R1bGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1ic2NGb3Jtc01vZHVsZSgpIHtcbiAgICB9XG4gICAgTWJzY0Zvcm1zTW9kdWxlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogTmdNb2R1bGUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIGltcG9ydHM6IFtGb3Jtc01vZHVsZSwgQ29tbW9uTW9kdWxlLCBNYnNjQmFzZU1vZHVsZSwgTWJzY0lucHV0TW9kdWxlXSxcbiAgICAgICAgICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBjb21wLFxuICAgICAgICAgICAgICAgICAgICBleHBvcnRzOiBbY29tcCwgTWJzY0lucHV0TW9kdWxlLCBNYnNjSW5wdXRdXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICBNYnNjRm9ybXNNb2R1bGUuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXTsgfTtcbiAgICByZXR1cm4gTWJzY0Zvcm1zTW9kdWxlO1xufSgpKTtcblxuLy8gLS0tXG5cbnZhciBQYWdlID0gZnVuY3Rpb24gUGFnZShlbCwgc2V0dGluZ3MpIHtcbiAgdmFyIGNzc0NsYXNzID0gJycsXG4gICAgICAkZWxtID0gJCQxKGVsKSxcbiAgICAgIHRoYXQgPSB0aGlzLFxuICAgICAgcyA9IHRoYXQuc2V0dGluZ3M7IC8vIENhbGwgdGhlIHBhcmVudCBjb25zdHJ1Y3RvclxuXG4gIEJhc2UuY2FsbCh0aGlzLCBlbCwgc2V0dGluZ3MsIHRydWUpO1xuICAvKipcbiAgICogUGFnZSBpbml0aWFsaXphdGlvbi5cbiAgICovXG5cbiAgdGhhdC5faW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3R4ID0gcy5jb250ZXh0LFxuICAgICAgICAkY3R4ID0gJCQxKGN0eCksXG4gICAgICAgICR0b3BNZW51ID0gJGN0eC5maW5kKCcubWJzYy1tcy10b3AgLm1ic2MtbXMnKSxcbiAgICAgICAgJGJvdHRvbU1lbnUgPSAkY3R4LmZpbmQoJy5tYnNjLW1zLWJvdHRvbSAubWJzYy1tcycpLFxuICAgICAgICBjc3MgPSB7fTtcblxuICAgIGlmIChjdHggPT0gJ2JvZHknKSB7XG4gICAgICAkJDEoJ2JvZHksaHRtbCcpLmFkZENsYXNzKCdtYnNjLXBhZ2UtY3R4Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRjdHguYWRkQ2xhc3MoJ21ic2MtcGFnZS1jdHgnKTtcbiAgICB9XG5cbiAgICBpZiAoY3NzQ2xhc3MpIHtcbiAgICAgICRlbG0ucmVtb3ZlQ2xhc3MoY3NzQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICgkdG9wTWVudS5sZW5ndGgpIHtcbiAgICAgIGNzcy5wYWRkaW5nVG9wID0gJHRvcE1lbnVbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgIH1cblxuICAgIGlmICgkYm90dG9tTWVudS5sZW5ndGgpIHtcbiAgICAgIGNzcy5wYWRkaW5nQm90dG9tID0gJGJvdHRvbU1lbnVbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgIH1cblxuICAgIGNzc0NsYXNzID0gJ21ic2MtcGFnZSBtYnNjLScgKyBzLnRoZW1lICsgKHMuYmFzZVRoZW1lID8gJyBtYnNjLScgKyBzLmJhc2VUaGVtZSA6ICcnKSArIChzLnJ0bCA/ICcgbWJzYy1ydGwnIDogJyBtYnNjLWx0cicpO1xuICAgICRlbG0uYWRkQ2xhc3MoY3NzQ2xhc3MpLnJlbW92ZUNsYXNzKCdtYnNjLWNsb2FrJykuY3NzKGNzcyk7XG4gIH07XG4gIC8qKlxuICAgKiBEZXN0cm95cyB0aGUgbW9iaXNjcm9sbCBpbnN0YW5jZS5cbiAgICovXG5cblxuICB0aGF0Ll9kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICRlbG0ucmVtb3ZlQ2xhc3MoY3NzQ2xhc3MpO1xuICB9OyAvLyBDb25zdHJ1Y3RvclxuXG5cbiAgcyA9IHRoYXQuc2V0dGluZ3M7XG4gIHRoYXQuaW5pdCgpO1xufTsgLy8gRXh0ZW5kIGRlZmF1bHRzXG5cblBhZ2UucHJvdG90eXBlID0ge1xuICBfaGFzRGVmOiB0cnVlLFxuICBfaGFzVGhlbWU6IHRydWUsXG4gIF9oYXNMYW5nOiB0cnVlLFxuICBfY2xhc3M6ICdwYWdlJyxcbiAgX2RlZmF1bHRzOiB7XG4gICAgY29udGV4dDogJ2JvZHknXG4gIH1cbn07XG5jbGFzc2VzLlBhZ2UgPSBQYWdlO1xubW9iaXNjcm9sbC50aGVtZXMucGFnZS5tb2Jpc2Nyb2xsID0ge307IC8vIC0tLVxuLy8gUGFnZSBlbmRcbi8vIEluaXQgbWJzYy1wYWdlIGVsZW1lbnRzIG9uIHBhZ2UgbG9hZCBvciB3aGVuIG1ic2MtZW5oYW5jZSBldmVudCBpcyB0cmlnZ2VyZXNcblxuYXV0b0luaXQoJ1ttYnNjLXBhZ2VdJywgUGFnZSk7XG5cbnZhciBNYnNjUGFnZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1ic2NQYWdlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1ic2NQYWdlKGhvc3RFbGVtZW50LCBvcHRpb25zU2VydmljZSwgem9uZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBob3N0RWxlbWVudCwgem9uZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub3B0aW9uc1NlcnZpY2UgPSBvcHRpb25zU2VydmljZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNYnNjUGFnZS5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcHRpb25zT2JqID0gZXh0ZW5kJDEoe30sIHRoaXMub3B0aW9ucywgdGhpcy5pbmxpbmVPcHRpb25zT2JqKTtcbiAgICAgICAgdGhpcy5vcHRpb25zU2VydmljZS5vcHRpb25zID0gb3B0aW9uc09iajtcbiAgICB9O1xuICAgIE1ic2NQYWdlLnByb3RvdHlwZS5pbml0Q29udHJvbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBleHRlbmQkMSh7fSwgdGhpcy5vcHRpb25zLCB0aGlzLmlubGluZU9wdGlvbnNPYmopO1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IFBhZ2UodGhpcy5pbml0RWxlbS5uYXRpdmVFbGVtZW50LCBvcHRpb25zKTtcbiAgICB9O1xuICAgIE1ic2NQYWdlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogQ29tcG9uZW50LCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ21ic2MtcGFnZScsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiAjaW5pdEVsZW1lbnQ+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvZGl2PicsXG4gICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyczogW01ic2NPcHRpb25zU2VydmljZV0sXG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydEFzOiAnbW9iaXNjcm9sbCdcbiAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICBdO1xuICAgIE1ic2NQYWdlLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW1xuICAgICAgICB7IHR5cGU6IEVsZW1lbnRSZWYsIH0sXG4gICAgICAgIHsgdHlwZTogTWJzY09wdGlvbnNTZXJ2aWNlLCB9LFxuICAgICAgICB7IHR5cGU6IE5nWm9uZSwgfSxcbiAgICBdOyB9O1xuICAgIE1ic2NQYWdlLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAnb3B0aW9ucyc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnY29udGV4dCc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnaW5pdEVsZW0nOiBbeyB0eXBlOiBWaWV3Q2hpbGQsIGFyZ3M6IFsnaW5pdEVsZW1lbnQnLCB7IHN0YXRpYzogZmFsc2UgfSxdIH0sXSxcbiAgICB9O1xuICAgIHJldHVybiBNYnNjUGFnZTtcbn0oTWJzY0Jhc2UpKTtcbnZhciBNYnNjTm90ZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWJzY05vdGUoaW5pdGlhbEVsZW0pIHtcbiAgICAgICAgdGhpcy5pbml0aWFsRWxlbSA9IGluaXRpYWxFbGVtO1xuICAgICAgICB0aGlzLmNvbG9yID0gJ3ByaW1hcnknO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWJzY05vdGUucHJvdG90eXBlLCBcImNsYXNzTmFtZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAnbWJzYy1ub3RlIG1ic2Mtbm90ZS0nICsgdGhpcy5jb2xvcjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTWJzY05vdGUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBDb21wb25lbnQsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnbWJzYy1ub3RlJyxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgICAgICAgICAgICAgICAgICAgaG9zdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1tjbGFzc10nOiAnY2xhc3NOYW1lcydcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzOiBbJzpob3N0IHsgZGlzcGxheTogYmxvY2s7IH0nXVxuICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgIF07XG4gICAgTWJzY05vdGUuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBbXG4gICAgICAgIHsgdHlwZTogRWxlbWVudFJlZiwgfSxcbiAgICBdOyB9O1xuICAgIE1ic2NOb3RlLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAnY29sb3InOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICB9O1xuICAgIHJldHVybiBNYnNjTm90ZTtcbn0oKSk7XG52YXIgTWJzY0F2YXRhciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWJzY0F2YXRhcigpIHtcbiAgICAgICAgdGhpcy5kcmFnZ2FibGUgPSBmYWxzZTtcbiAgICB9XG4gICAgTWJzY0F2YXRhci5kZWNvcmF0b3JzID0gW1xuICAgICAgICB7IHR5cGU6IENvbXBvbmVudCwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdtYnNjLWF2YXRhcicsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGltZyBjbGFzcz1cIm1ic2MtYXZhdGFyXCIgW3NyY109XCJzcmNcIiBbYWx0XT1cImFsdFwiIFtkcmFnZ2FibGVdPVwiZHJhZ2dhYmxlXCIgLz4nXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICBNYnNjQXZhdGFyLmN0b3JQYXJhbWV0ZXJzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH07XG4gICAgTWJzY0F2YXRhci5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgJ2RyYWdnYWJsZSc6IFt7IHR5cGU6IElucHV0JDEgfSxdLFxuICAgICAgICAnc3JjJzogW3sgdHlwZTogSW5wdXQkMSB9LF0sXG4gICAgICAgICdhbHQnOiBbeyB0eXBlOiBJbnB1dCQxIH0sXSxcbiAgICB9O1xuICAgIHJldHVybiBNYnNjQXZhdGFyO1xufSgpKTtcbnZhciBNYnNjUGFnZU1vZHVsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWJzY1BhZ2VNb2R1bGUoKSB7XG4gICAgfVxuICAgIE1ic2NQYWdlTW9kdWxlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgIHsgdHlwZTogTmdNb2R1bGUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgIGltcG9ydHM6IFtNYnNjQmFzZU1vZHVsZV0sXG4gICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW01ic2NQYWdlLCBNYnNjTm90ZSwgTWJzY0F2YXRhcl0sXG4gICAgICAgICAgICAgICAgICAgIGV4cG9ydHM6IFtNYnNjUGFnZSwgTWJzY05vdGUsIE1ic2NBdmF0YXJdXG4gICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgXTtcbiAgICBNYnNjUGFnZU1vZHVsZS5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdOyB9O1xuICAgIHJldHVybiBNYnNjUGFnZU1vZHVsZTtcbn0oKSk7XG5cbnZhciBNYnNjQ29tbWVyY2lhbENvbXBvbmVudCA9IGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgX19leHRlbmRzKE1ic2NDb21tZXJjaWFsQ29tcG9uZW50LCBfc3VwZXIpO1xuXG4gIGZ1bmN0aW9uIE1ic2NDb21tZXJjaWFsQ29tcG9uZW50KGhvc3RFbGVtZW50LCBvcHRpb25zU2VydmljZSwgem9uZSkge1xuICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGhvc3RFbGVtZW50LCB6b25lKSB8fCB0aGlzO1xuXG4gICAgX3RoaXMub3B0aW9uc1NlcnZpY2UgPSBvcHRpb25zU2VydmljZTtcbiAgICBfdGhpcy5tYnNjT3B0aW9ucyA9IHt9O1xuICAgIF90aGlzLm9wdGlvbnMgPSB7fTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBNYnNjQ29tbWVyY2lhbENvbXBvbmVudC5wcm90b3R5cGUubmdBZnRlclZpZXdJbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghbW9iaXNjcm9sbC5hbGVydGVkKSB7XG4gICAgICBtb2Jpc2Nyb2xsLmNvbmZpcm0oe1xuICAgICAgICB0aXRsZTogJ01vYmlzY3JvbGwgTGl0ZSBkb2VzblxcJ3Qgc3VwcG9ydCB0aGlzIGZ1bmN0aW9uYWxpdHkuJyxcbiAgICAgICAgbWVzc2FnZTogJ1lvdSBjYW4gdHJ5IHRoZSBmdWxsIHRvb2xzZXQgd2l0aCBhIGZyZWUgdHJpYWwuIElmIHlvdVxcJ3JlIGhhdmluZyB0cm91YmxlLCA8YSBocmVmPVwibWFpbHRvOnN1cHBvcnRAbW9iaXNjcm9sbC5jb21cIiB0YXJnZXQ9XCJfdG9wXCI+bGV0IHVzIGtub3c8L2E+LicsXG4gICAgICAgIG9rVGV4dDogJ1N0YXJ0IFRyaWFsJyxcbiAgICAgICAgY2FuY2VsVGV4dDogJ09rJyxcbiAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIGNhbGxiYWNrKHN0YXJ0VHJpYWwpIHtcbiAgICAgICAgICBpZiAoc3RhcnRUcmlhbCkge1xuICAgICAgICAgICAgd2luZG93Lm9wZW4oXCIvL21vYmlzY3JvbGwuY29tL1wiLCAnX2JsYW5rJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIG1vYmlzY3JvbGwuYWxlcnRlZCA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIE1ic2NDb21tZXJjaWFsQ29tcG9uZW50LmRlY29yYXRvcnMgPSBbe1xuICAgIHR5cGU6IENvbXBvbmVudCxcbiAgICBhcmdzOiBbe1xuICAgICAgc2VsZWN0b3I6IFwiXFxuICAgIG1ic2MtY2FsZW5kYXIsIFttYnNjLWNhbGVuZGFyXSxcXG4gICAgbWJzYy1kYXRlLCBbbWJzYy1kYXRlXSxcXG4gICAgbWJzYy10aW1lLCBbbWJzYy10aW1lXSxcXG4gICAgbWJzYy1kYXRldGltZSwgW21ic2MtZGF0ZXRpbWVdLFxcbiAgICBtYnNjLWV2ZW50Y2FsZW5kYXIsIFttYnNjLWV2ZW50Y2FsZW5kYXJdLFxcbiAgICBtYnNjLWNhcmQsIFttYnNjLWNhcmRdLCBtYnNjLWNhcmQtaGVhZGVyLCBtYnNjLWNhcmQtY29udGVudCwgbWJzYy1jYXJkLWZvb3RlciwgbWJzYy1jYXJkLXRpdGxlLCBtYnNjLWNhcmQtc3VidGl0bGUsXFxuICAgIG1ic2MtY29sb3IsIFttYnNjLWNvbG9yXSxcXG4gICAgbWJzYy1pbWFnZSwgW21ic2MtaW1hZ2VdLFxcbiAgICBtYnNjLWxpc3R2aWV3LCBtYnNjLWxpc3R2aWV3LWl0ZW0sIG1ic2MtbGlzdHZpZXctaGVhZGVyLCBtYnNjLWxpc3R2aWV3LXN1Ymxpc3QsXFxuICAgIG1ic2MtbWVhc3VyZW1lbnQsIFttYnNjLW1lYXN1cmVtZW50XSwgbWJzYy10ZW1wZXJhdHVyZSwgW21ic2MtdGVtcGVyYXR1cmVdLCBtYnNjLWRpc3RhbmNlLCBbbWJzYy1kaXN0YW5jZV0sIG1ic2Mtc3BlZWQsIFttYnNjLXNwZWVkXSwgbWJzYy1mb3JjZSwgW21ic2MtZm9yY2VdLCBtYnNjLW1hc3MsIFttYnNjLW1hc3NdLFxcbiAgICBtYnNjLW5hdi1pdGVtLCBtYnNjLWJvdHRvbS1uYXYsIG1ic2MtaGFtYnVyZ2VyLW5hdiwgbWJzYy10YWItbmF2LFxcbiAgICBtYnNjLW51bWJlciwgW21ic2MtbnVtYmVyXSxcXG4gICAgbWJzYy1udW1wYWQsIFttYnNjLW51bXBhZF0sIG1ic2MtbnVtcGFkLWRlY2ltYWwsIFttYnNjLW51bXBhZC1kZWNpbWFsXSwgbWJzYy1udW1wYWQtZGF0ZSwgW21ic2MtbnVtcGFkLWRhdGVdLCBtYnNjLW51bXBhZC10aW1lLCBbbWJzYy1udW1wYWQtdGltZV0sIG1ic2MtbnVtcGFkLXRpbWVzcGFuLCBbbWJzYy1udW1wYWQtdGltZXNwYW5dLFxcbiAgICBtYnNjLW9wdGlvbmxpc3QsIG1ic2Mtb3B0aW9uLWl0ZW0sXFxuICAgIG1ic2MtcmFuZ2UsIFttYnNjLXJhbmdlXSxcXG4gICAgbWJzYy1zY3JvbGxlciwgW21ic2Mtc2Nyb2xsZXJdLFxcbiAgICBtYnNjLXNjcm9sbHZpZXcsIFttYnNjLXNjcm9sbHZpZXddLCBtYnNjLXNjcm9sbHZpZXctaXRlbSwgW21ic2Mtc2Nyb2xsdmlldy1pdGVtXSxcXG4gICAgbWJzYy1zZWxlY3QsIFttYnNjLXNlbGVjdF0sXFxuICAgIG1ic2MtdGltZXIsIFttYnNjLXRpbWVyXSxcXG4gICAgbWJzYy10aW1lc3BhbiwgW21ic2MtdGltZXNwYW5dLFxcbiAgICBtYnNjLXRyZWVsaXN0LCBbbWJzYy10cmVlbGlzdF0sXFxuICAgIG1ic2Mtd2lkZ2V0XFxuICAgIFwiLFxuICAgICAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgICAgIGV4cG9ydEFzOiAnbW9iaXNjcm9sbCcsXG4gICAgICBzdHlsZXM6IFsnOmhvc3QgeyBkaXNwbGF5OiBibG9jayB9J11cbiAgICB9XVxuICB9XTtcblxuICBNYnNjQ29tbWVyY2lhbENvbXBvbmVudC5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW3tcbiAgICAgIHR5cGU6IEVsZW1lbnRSZWZcbiAgICB9LCB7XG4gICAgICB0eXBlOiBNYnNjT3B0aW9uc1NlcnZpY2UsXG4gICAgICBkZWNvcmF0b3JzOiBbe1xuICAgICAgICB0eXBlOiBPcHRpb25hbFxuICAgICAgfV1cbiAgICB9LCB7XG4gICAgICB0eXBlOiBOZ1pvbmVcbiAgICB9XTtcbiAgfTtcblxuICBNYnNjQ29tbWVyY2lhbENvbXBvbmVudC5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAnbWJzY09wdGlvbnMnOiBbe1xuICAgICAgdHlwZTogSW5wdXQkMSxcbiAgICAgIGFyZ3M6IFsnbWJzYy1vcHRpb25zJ11cbiAgICB9XSxcbiAgICAnb3B0aW9ucyc6IFt7XG4gICAgICB0eXBlOiBJbnB1dCQxXG4gICAgfV0sXG4gICAgJ2RhdGEnOiBbe1xuICAgICAgdHlwZTogSW5wdXQkMVxuICAgIH1dLFxuICAgICdtYnNjRGF0YSc6IFt7XG4gICAgICB0eXBlOiBJbnB1dCQxLFxuICAgICAgYXJnczogWydtYnNjLWRhdGEnXVxuICAgIH1dLFxuICAgICdpbml0RWxlbSc6IFt7XG4gICAgICB0eXBlOiBWaWV3Q2hpbGQsXG4gICAgICBhcmdzOiBbJ2luaXRFbGVtZW50Jywge1xuICAgICAgICBzdGF0aWM6IGZhbHNlXG4gICAgICB9XVxuICAgIH1dXG4gIH07XG4gIHJldHVybiBNYnNjQ29tbWVyY2lhbENvbXBvbmVudDtcbn0oTWJzY0Jhc2UpO1xuXG52YXIgZGlyZWN0aXZlcyA9IFtNYnNjRm9ybSwgTWJzY1JhdGluZywgTWJzY1BhZ2UsIE1ic2NOb3RlLCBNYnNjQXZhdGFyLCBNYnNjSW5wdXQsIE1ic2NEcm9wZG93biwgTWJzY1RleHRhcmVhLCBNYnNjQnV0dG9uLCBNYnNjQ2hlY2tib3gsIE1ic2NTd2l0Y2gsIE1ic2NTdGVwcGVyLCBNYnNjUHJvZ3Jlc3MsIE1ic2NTbGlkZXIsIE1ic2NSYWRpbywgTWJzY1JhZGlvR3JvdXAsIE1ic2NTZWdtZW50ZWRHcm91cCwgTWJzY1NlZ21lbnRlZCwgTWJzY0NvbW1lcmNpYWxDb21wb25lbnQsIE1ic2NGb3JtR3JvdXAsIE1ic2NGb3JtR3JvdXBUaXRsZSwgTWJzY0Zvcm1Hcm91cENvbnRlbnRdO1xuXG52YXIgTWJzY01vZHVsZSA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWJzY01vZHVsZSgpIHt9XG5cbiAgTWJzY01vZHVsZS5kZWNvcmF0b3JzID0gW3tcbiAgICB0eXBlOiBOZ01vZHVsZSxcbiAgICBhcmdzOiBbe1xuICAgICAgaW1wb3J0czogW0Zvcm1zTW9kdWxlLCBDb21tb25Nb2R1bGUsIE1ic2NGb3Jtc01vZHVsZSwgTWJzY1BhZ2VNb2R1bGVdLFxuICAgICAgZGVjbGFyYXRpb25zOiBbTWJzY0NvbW1lcmNpYWxDb21wb25lbnRdLFxuICAgICAgZXhwb3J0czogW2RpcmVjdGl2ZXMsIE1ic2NDb21tZXJjaWFsQ29tcG9uZW50LCBNYnNjRm9ybXNNb2R1bGUsIE1ic2NQYWdlTW9kdWxlXVxuICAgIH1dXG4gIH1dO1xuXG4gIE1ic2NNb2R1bGUuY3RvclBhcmFtZXRlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9O1xuXG4gIHJldHVybiBNYnNjTW9kdWxlO1xufSgpO1xuXG4vLyBBcmFiaWNcbm1vYmlzY3JvbGwuaTE4bi5hciA9IHtcbiAgLy8gQ29yZVxuICBydGw6IHRydWUsXG4gIC8vIFJpZ2h0IHRvIGxlZnQgbW9kZVxuICBzZXRUZXh0OiAn2KrYudmK2YrZhicsXG4gIGNhbmNlbFRleHQ6ICfYpdmE2LrYp9ihJyxcbiAgY2xlYXJUZXh0OiAn2YXYs9itJyxcbiAgc2VsZWN0ZWRUZXh0OiAne2NvdW50fSDYp9mE2YXYrdiv2K8nLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ2RkL21tL3l5JyxcbiAgZGF5TmFtZXM6IFsn2KfZhNij2K3YrycsICfYp9mE2KfYq9mG2YrZhicsICfYp9mE2KvZhNin2KvYp9ihJywgJ9in2YTYo9ix2KjYudin2KEnLCAn2KfZhNiu2YXZitizJywgJ9in2YTYrNmF2LnYqScsICfYp9mE2LPYqNiqJ10sXG4gIGRheU5hbWVzU2hvcnQ6IFsn2KPYrdivJywgJ9in2KvZhtmK2YYnLCAn2KvZhNin2KvYp9ihJywgJ9ij2LHYqNi52KfYoScsICfYrtmF2YrYsycsICfYrNmF2LnYqScsICfYs9io2KonXSxcbiAgZGF5TmFtZXNNaW46IFsn2K0nLCAn2YYnLCAn2KsnLCAn2LEnLCAn2K4nLCAn2KwnLCAn2LMnXSxcbiAgZGF5VGV4dDogJ9mK2YjZhScsXG4gIGhvdXJUZXh0OiAn2LPYp9i52KfYqicsXG4gIG1pbnV0ZVRleHQ6ICfYp9mE2K/Zgtin2KbZgicsXG4gIG1vbnRoTmFtZXM6IFsn2YrZhtin2YrYsScsICfZgdio2LHYp9mK2LEnLCAn2YXYp9ix2LMnLCAn2KfYqNix2YrZhCcsICfZhdin2YrZiCcsICfZitmI2YbZitmIJywgJ9mK2YjZhNmK2YgnLCAn2KPYutiz2LfYsycsICfYs9io2KrZhdio2LEnLCAn2KPZg9iq2YjYqNixJywgJ9mG2YjZgdmF2KjYsScsICfYr9mK2LPZhdio2LEnXSxcbiAgbW9udGhOYW1lc1Nob3J0OiBbJ9mK2YbYp9mK2LEnLCAn2YHYqNix2KfZitixJywgJ9mF2KfYsdizJywgJ9in2KjYsdmK2YQnLCAn2YXYp9mK2YgnLCAn2YrZiNmG2YrZiCcsICfZitmI2YTZitmIJywgJ9ij2LrYs9i32LMnLCAn2LPYqNiq2YXYqNixJywgJ9ij2YPYqtmI2KjYsScsICfZhtmI2YHZhdio2LEnLCAn2K/Zitiz2YXYqNixJ10sXG4gIG1vbnRoVGV4dDogJ9i02YfYsScsXG4gIHNlY1RleHQ6ICfYq9mI2KfZhtmKJyxcbiAgYW1UZXh0OiAn2LUnLFxuICBwbVRleHQ6ICfZhScsXG4gIHRpbWVGb3JtYXQ6ICdoaDppaSBBJyxcbiAgeWVhclRleHQ6ICfYudin2YUnLFxuICBub3dUZXh0OiAn2KfZhNii2YYnLFxuICAvLyBDYWxlbmRhciBjb21wb25lbnRcbiAgZmlyc3REYXk6IDAsXG4gIGRhdGVUZXh0OiAn2KrYp9ix2YrYricsXG4gIHRpbWVUZXh0OiAn2YjZgtiqJyxcbiAgY2xvc2VUZXh0OiAn2KXYutmE2KfZgicsXG4gIHRvZGF5VGV4dDogJ9in2YTZitmI2YUnLFxuICBwcmV2TW9udGhUZXh0OiAn2KfZhNi02YfYsSDYp9mE2LPYp9io2YInLFxuICBuZXh0TW9udGhUZXh0OiAn2KfZhNi02YfYsSDYp9mE2YLYp9iv2YUnLFxuICBwcmV2WWVhclRleHQ6ICfYp9mE2LPZhtmHINin2YTYs9in2KjZgtipJyxcbiAgbmV4dFllYXJUZXh0OiAn2KfZhNi52KfZhSDYp9mE2YLYp9iv2YUnLFxuICBhbGxEYXlUZXh0OiAn2KfZhNmK2YjZhSDZg9mE2YcnLFxuICBub0V2ZW50c1RleHQ6ICfZhNinINiq2YjYrNivINin2K3Yr9in2KsnLFxuICAvLyBFdmVudCBjYWxlbmRhclxuICBldmVudFRleHQ6ICfYp9mE2K3Yr9irJyxcbiAgZXZlbnRzVGV4dDogJ9ij2K3Yr9in2KsnLFxuICBtb3JlRXZlbnRzVGV4dDogJ9mI2KfYrdivINii2K7YsScsXG4gIG1vcmVFdmVudHNQbHVyYWxUZXh0OiAn2KfYq9mG2KfZhiDYotiu2LHYp9mGIHtjb3VudH0nLFxuICAvLyBEYXRlcmFuZ2UgY29tcG9uZW50XG4gIGZyb21UZXh0OiAn2YrYqNiv2KcnLFxuICB0b1RleHQ6ICfZitmG2KrZh9mKJyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICfZg9in2YXZhCcsXG4gIGZyYWN0aW9uVGV4dDogJ9is2LLYoScsXG4gIHVuaXRUZXh0OiAn2YjYrdiv2KknLFxuICAvLyBOdW1wYWQgZGF0ZVxuICBkZWxpbWl0ZXI6ICcvJyxcbiAgLy8gTnVtcGFkIGRlY2ltYWxcbiAgZGVjaW1hbFNlcGFyYXRvcjogJy4nLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcsJyxcbiAgLy8gVGltZXIgLyBUaW1lc3BhbiBjb21wb25lbnRcbiAgbGFiZWxzOiBbJ9iz2YbZiNin2KonLCAn2KPYtNmH2LEnLCAn2KPZitin2YUnLCAn2LPYp9i52KknLCAn2K/Zgtin2KbZgicsICfYq9mI2KfZhtmKJywgJyddLFxuICBsYWJlbHNTaG9ydDogWyfYs9mG2YjYp9iqJywgJ9ij2LTZh9ixJywgJ9ij2YrYp9mFJywgJ9iz2KfYudipJywgJ9iv2YLYp9im2YInLCAn2KvZiNin2YbZiicsICcnXSxcbiAgLy8gVGltZXIgY29tcG9uZW50XG4gIHN0YXJ0VGV4dDogJ9io2K/YoScsXG4gIHN0b3BUZXh0OiAn2KXZitmC2KfZgScsXG4gIHJlc2V0VGV4dDogJ9il2LnYp9iv2Kkg2LbYqNi3JyxcbiAgbGFwVGV4dDogJ9in2YTYr9mI2LHYqScsXG4gIGhpZGVUZXh0OiAn2KXYrtmB2KfYoScsXG4gIC8vIEZvcm1zXG4gIG9mZlRleHQ6ICfYpdmK2YLYp9mBJyxcbiAgb25UZXh0OiAn2KrYtNi62YrZhCcsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAn2LHYrNmI2LknLFxuICB1bmRvVGV4dDogJ9iq2LHYp9is2LknXG59O1xuXG4vLyBCdWxnYXJpYW5cbm1vYmlzY3JvbGwuaTE4bi5iZyA9IHtcbiAgLy8gQ29yZVxuICBzZXRUZXh0OiAn0JfQsNC00LDQstCw0L3QtScsXG4gIGNhbmNlbFRleHQ6ICfQntGC0LzRj9C90LAnLFxuICBjbGVhclRleHQ6ICfQmNC30YfQuNGB0YLQstCw0L3QtScsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0g0L/QvtC00LHRgNCw0L0nLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ2RkLm1tLnl5JyxcbiAgZGF5TmFtZXM6IFsn0J3QtdC00LXQu9GPJywgJ9Cf0L7QvdC10LTQtdC70L3QuNC6JywgJ9CS0YLQvtGA0L3QuNC6JywgJ9Ch0YDRj9C00LAnLCAn0KfQtdGC0LLRitGA0YLRitC6JywgJ9Cf0LXRgtGK0LonLCAn0KHRitCx0L7RgtCwJ10sXG4gIGRheU5hbWVzU2hvcnQ6IFsn0J3QtdC0JywgJ9Cf0L7QvScsICfQktGC0L4nLCAn0KHRgNGPJywgJ9Cn0LXRgicsICfQn9C10YInLCAn0KHRitCxJ10sXG4gIGRheU5hbWVzTWluOiBbJ9Cd0LUnLCAn0J/QvicsICfQktGCJywgJ9Ch0YAnLCAn0KfQtScsICfQn9C1JywgJ9Ch0YonXSxcbiAgZGF5VGV4dDogJ9C00LXQvScsXG4gIGRlbGltaXRlcjogJy4nLFxuICBob3VyVGV4dDogJ9GH0LDRgScsXG4gIG1pbnV0ZVRleHQ6ICfQvNC40L3Rg9GC0LAnLFxuICBtb250aE5hbWVzOiBbJ9Cv0L3Rg9Cw0YDQuCcsICfQpNC10LLRgNGD0LDRgNC4JywgJ9Cc0LDRgNGCJywgJ9CQ0L/RgNC40LsnLCAn0JzQsNC5JywgJ9Cu0L3QuCcsICfQrtC70LgnLCAn0JDQstCz0YPRgdGCJywgJ9Ch0LXQv9GC0LXQvNCy0YDQuCcsICfQntC60YLQvtC80LLRgNC4JywgJ9Cd0L7QtdC80LLRgNC4JywgJ9CU0LXQutC10LzQstGA0LgnXSxcbiAgbW9udGhOYW1lc1Nob3J0OiBbJ9Cv0L3RgycsICfQpNC10LInLCAn0JzQsNGAJywgJ9CQ0L/RgCcsICfQnNCw0LknLCAn0K7QvdC4JywgJ9Cu0LvQuCcsICfQkNCy0LMnLCAn0KHQtdC/JywgJ9Ce0LrRgicsICfQndC+0LInLCAn0JTQtdC6J10sXG4gIG1vbnRoVGV4dDogJ9C80LXRgdC10YYnLFxuICBzZWNUZXh0OiAn0YHQtdC60YPQvdC00LgnLFxuICB0aW1lRm9ybWF0OiAnSDppaScsXG4gIHllYXJUZXh0OiAn0LPQvtC00LjQvdCwJyxcbiAgbm93VGV4dDogJ9Ch0LXQs9CwJyxcbiAgcG1UZXh0OiAncG0nLFxuICBhbVRleHQ6ICdhbScsXG4gIC8vIENhbGVuZGFyIGNvbXBvbmVudFxuICBmaXJzdERheTogMSxcbiAgZGF0ZVRleHQ6ICfQlNCw0YLQsCcsXG4gIHRpbWVUZXh0OiAn0L/RitGCJyxcbiAgdG9kYXlUZXh0OiAn0LTQvdC10YEnLFxuICBwcmV2TW9udGhUZXh0OiAn0J/RgNC10LTQuNGI0L3QuNGPINC80LXRgdC10YYnLFxuICBuZXh0TW9udGhUZXh0OiAn0KHQu9C10LTQstCw0YnQuNGP0YIg0LzQtdGB0LXRhicsXG4gIHByZXZZZWFyVGV4dDogJ9Cf0YDQtdC00YXQvtC00L3QsNGC0LAg0LPQvtC00LjQvdCwJyxcbiAgbmV4dFllYXJUZXh0OiAn0KHQu9C10LTQstCw0YnQsNGC0LAg0LPQvtC00LjQvdCwJyxcbiAgY2xvc2VUZXh0OiAn0LfQsNGC0LLQvtGA0LgnLFxuICBldmVudFRleHQ6ICfQodGK0LHQuNGC0LjQtScsXG4gIGV2ZW50c1RleHQ6ICfQodGK0LHQuNGC0LjRjycsXG4gIGFsbERheVRleHQ6ICfQptGP0Lsg0LTQtdC9JyxcbiAgbm9FdmVudHNUZXh0OiAn0J3Rj9C80LAg0YHRitCx0LjRgtC40Y8nLFxuICBtb3JlRXZlbnRzVGV4dDogJ9Ce0YnQtSB7Y291bnR9JyxcbiAgLy8gRGF0ZXJhbmdlIGNvbXBvbmVudFxuICBmcm9tVGV4dDogJ9Ce0KInLFxuICB0b1RleHQ6ICfQlNCeJyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICfRhtGP0LvQvicsXG4gIGZyYWN0aW9uVGV4dDogJ9GE0YDQsNC60YbQuNGPJyxcbiAgdW5pdFRleHQ6ICfQtdC00LjQvdC40YbQsCcsXG4gIC8vIFRpbWUgLyBUaW1lc3BhbiBjb21wb25lbnRcbiAgbGFiZWxzOiBbJ9CT0L7QtNC40L3QuCcsICfQvNC10YHQtdGG0LAnLCAn0LTQvdC4JywgJ9GH0LDRgdCwJywgJ9C80LjQvdGD0YLQuCcsICfRgdC10LrRg9C90LTQuCcsICcnXSxcbiAgbGFiZWxzU2hvcnQ6IFsn0JPQvtC00LjQvdC4JywgJ9C80LXRgdC10YbQsCcsICfQtNC90LgnLCAn0YfQsNGB0LAnLCAn0LzQuNC90YPRgtC4JywgJ9GB0LXQutGD0L3QtNC4JywgJyddLFxuICAvLyBUaW1lciBjb21wb25lbnRcbiAgc3RhcnRUZXh0OiAn0KHRgtCw0YDRgicsXG4gIHN0b3BUZXh0OiAn0KHRgtC+0L8nLFxuICByZXNldFRleHQ6ICfQndGD0LvQuNGA0LDQvdC1JyxcbiAgbGFwVGV4dDogJ9Ce0LHQuNC60L7Qu9C60LAnLFxuICBoaWRlVGV4dDogJ9C60YDQuNGPJyxcbiAgLy8gTGlzdHZpZXdcbiAgYmFja1RleHQ6ICfQstGA0YrRidCw0L3QtScsXG4gIHVuZG9UZXh0OiAn0J7QotCc0K/QndCQJyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAn0JjQl9Ca0JsnLFxuICBvblRleHQ6ICfQktCa0JsnLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxuLy8gQ2F0YWzDoFxubW9iaXNjcm9sbC5pMThuLmNhID0ge1xuICAvLyBDb3JlXG4gIHNldFRleHQ6ICdBY2NlcHRhcicsXG4gIGNhbmNlbFRleHQ6ICdDYW5jZWzCt2xhcicsXG4gIGNsZWFyVGV4dDogJ0VzYm9ycmFyJyxcbiAgc2VsZWN0ZWRUZXh0OiAne2NvdW50fSBzZWxlY2Npb25hdCcsXG4gIHNlbGVjdGVkUGx1cmFsVGV4dDogJ3tjb3VudH0gc2VsZWNjaW9uYXRzJyxcbiAgLy8gRGF0ZXRpbWUgY29tcG9uZW50XG4gIGRhdGVGb3JtYXQ6ICdkZC9tbS95eScsXG4gIGRheU5hbWVzOiBbJ0RpdW1lbmdlJywgJ0RpbGx1bnMnLCAnRGltYXJ0cycsICdEaW1lY3JlcycsICdEaWpvdXMnLCAnRGl2ZW5kcmVzJywgJ0Rpc3NhYnRlJ10sXG4gIGRheU5hbWVzU2hvcnQ6IFsnRGcnLCAnRGwnLCAnRHQnLCAnRGMnLCAnRGonLCAnRHYnLCAnRHMnXSxcbiAgZGF5TmFtZXNNaW46IFsnRGcnLCAnRGwnLCAnRHQnLCAnRGMnLCAnRGonLCAnRHYnLCAnRHMnXSxcbiAgZGF5VGV4dDogJ0RpYScsXG4gIGhvdXJUZXh0OiAnSG9yZXMnLFxuICBtaW51dGVUZXh0OiAnTWludXRzJyxcbiAgbW9udGhOYW1lczogWydHZW5lcicsICdGZWJyZXInLCAnTWFyw6cnLCAnQWJyaWwnLCAnTWFpZycsICdKdW55JywgJ0p1bGlvbCcsICdBZ29zdCcsICdTZXRlbWJyZScsICdPY3R1YnJlJywgJ05vdmVtYnJlJywgJ0Rlc2VtYnJlJ10sXG4gIG1vbnRoTmFtZXNTaG9ydDogWydHZW4nLCAnRmViJywgJ01hcicsICdBYnInLCAnTWFpJywgJ0p1bicsICdKdWwnLCAnQWdvJywgJ1NldCcsICdPY3QnLCAnTm92JywgJ0RlcyddLFxuICBtb250aFRleHQ6ICdNZXMnLFxuICBzZWNUZXh0OiAnU2Vnb25zJyxcbiAgdGltZUZvcm1hdDogJ0hIOmlpJyxcbiAgeWVhclRleHQ6ICdBbnknLFxuICBub3dUZXh0OiAnQXJhJyxcbiAgcG1UZXh0OiAncG0nLFxuICBhbVRleHQ6ICdhbScsXG4gIHRvZGF5VGV4dDogJ0F2dWknLFxuICAvLyBDYWxlbmRhciBjb21wb25lbnRcbiAgZmlyc3REYXk6IDEsXG4gIGRhdGVUZXh0OiAnRGF0YScsXG4gIHRpbWVUZXh0OiAnVGVtcHMnLFxuICBjbG9zZVRleHQ6ICdUYW5jYXInLFxuICBhbGxEYXlUZXh0OiAnVG90IGVsIGRpYScsXG4gIG5vRXZlbnRzVGV4dDogJ0NhcCBlc2RldmVuaW1lbnQnLFxuICBldmVudFRleHQ6ICdFc2RldmVuaW1lbnRzJyxcbiAgZXZlbnRzVGV4dDogJ0VzZGV2ZW5pbWVudHMnLFxuICBtb3JlRXZlbnRzVGV4dDogJ3tjb3VudH0gbcOpcycsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICdJbmljaWFyJyxcbiAgdG9UZXh0OiAnRmluYWwnLFxuICAvLyBNZWFzdXJlbWVudCBjb21wb25lbnRzXG4gIHdob2xlVGV4dDogJ1NlbmNlcicsXG4gIGZyYWN0aW9uVGV4dDogJ0ZyYWNjacOzJyxcbiAgdW5pdFRleHQ6ICdVbml0YXQnLFxuICAvLyBUaW1lIC8gVGltZXNwYW4gY29tcG9uZW50XG4gIGxhYmVsczogWydBbnlzJywgJ01lc29zJywgJ0RpZXMnLCAnSG9yZXMnLCAnTWludXRzJywgJ1NlZ29ucycsICcnXSxcbiAgbGFiZWxzU2hvcnQ6IFsnQW55cycsICdNZXNvcycsICdEaWVzJywgJ0hycycsICdNaW5zJywgJ1NlY3MnLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICdJbmljaWFyJyxcbiAgc3RvcFRleHQ6ICdBdHVyYXInLFxuICByZXNldFRleHQ6ICdSZWluaWNpYXInLFxuICBsYXBUZXh0OiAnVm9sdGEnLFxuICBoaWRlVGV4dDogJ0FtYWdhcicsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAnRW5yZXJlJyxcbiAgdW5kb1RleHQ6ICdEZXNmw6lzJyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAnTm8nLFxuICBvblRleHQ6ICdTaSdcbn07XG5cbi8vIENlc3RpbmFcbm1vYmlzY3JvbGwuaTE4bi5jcyA9IHtcbiAgLy8gQ29yZVxuICBzZXRUZXh0OiAnWmFkZWonLFxuICBjYW5jZWxUZXh0OiAnU3Rvcm5vJyxcbiAgY2xlYXJUZXh0OiAnVnltYXphdCcsXG4gIHNlbGVjdGVkVGV4dDogJ096bmHEjWVuw706IHtjb3VudH0nLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ2RkLm1tLnl5JyxcbiAgZGF5TmFtZXM6IFsnTmVkxJtsZScsICdQb25kxJtsw60nLCAnw5p0ZXLDvScsICdTdMWZZWRhJywgJ8SMdHZydGVrJywgJ1DDoXRlaycsICdTb2JvdGEnXSxcbiAgZGF5TmFtZXNTaG9ydDogWydOZScsICdQbycsICfDmnQnLCAnU3QnLCAnxIx0JywgJ1DDoScsICdTbyddLFxuICBkYXlOYW1lc01pbjogWydOJywgJ1AnLCAnw5onLCAnUycsICfEjCcsICdQJywgJ1MnXSxcbiAgZGF5VGV4dDogJ0RlbicsXG4gIGhvdXJUZXh0OiAnSG9kaW55JyxcbiAgbWludXRlVGV4dDogJ01pbnV0eScsXG4gIG1vbnRoTmFtZXM6IFsnTGVkZW4nLCAnw5pub3InLCAnQsWZZXplbicsICdEdWJlbicsICdLdsSbdGVuJywgJ8SMZXJ2ZW4nLCAnxIxlcnZlbmVjJywgJ1NycGVuJywgJ1rDocWZw60nLCAnxZjDrWplbicsICdMaXN0b3BhZCcsICdQcm9zaW5lYyddLFxuICBtb250aE5hbWVzU2hvcnQ6IFsnTGVkJywgJ8Oabm8nLCAnQsWZZScsICdEdWInLCAnS3bEmycsICfEjGVyJywgJ8SMdmMnLCAnU3ByJywgJ1rDocWZJywgJ8WYw61qJywgJ0xpcycsICdQcm8nXSxcbiAgbW9udGhUZXh0OiAnTcSbc8OtYycsXG4gIHNlY1RleHQ6ICdTZWt1bmR5JyxcbiAgdGltZUZvcm1hdDogJ0hIOmlpJyxcbiAgeWVhclRleHQ6ICdSb2snLFxuICBub3dUZXh0OiAnVGXEjycsXG4gIGFtVGV4dDogJ2FtJyxcbiAgcG1UZXh0OiAncG0nLFxuICB0b2RheVRleHQ6ICdEbmVzJyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGZpcnN0RGF5OiAxLFxuICBkYXRlVGV4dDogJ0RhdHVtJyxcbiAgdGltZVRleHQ6ICfEjGFzJyxcbiAgY2xvc2VUZXh0OiAnWmF2xZnDrXQnLFxuICBhbGxEYXlUZXh0OiAnQ2Vsw70gZGVuJyxcbiAgbm9FdmVudHNUZXh0OiAnxb3DoWRuw6kgdWTDoWxvc3RpJyxcbiAgZXZlbnRUZXh0OiAnVWTDoWxvc3TDrScsXG4gIGV2ZW50c1RleHQ6ICdVZMOhbG9zdGknLFxuICBtb3JlRXZlbnRzVGV4dDogJ3tjb3VudH0gZGFsxaHDrScsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICdaYcSNw6F0ZWsnLFxuICB0b1RleHQ6ICdLb25lYycsXG4gIC8vIE1lYXN1cmVtZW50IGNvbXBvbmVudHNcbiAgd2hvbGVUZXh0OiAnQ2Vsw70nLFxuICBmcmFjdGlvblRleHQ6ICfEjMOhc3QnLFxuICB1bml0VGV4dDogJ0plZG5vdGthJyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsnUm9reScsICdNxJtzw61jZScsICdEbnknLCAnSG9kaW55JywgJ01pbnV0eScsICdTZWt1bmR5JywgJyddLFxuICBsYWJlbHNTaG9ydDogWydSb2snLCAnTcSbcycsICdEbnknLCAnSG9kJywgJ01pbicsICdTZWMnLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICdTdGFydCcsXG4gIHN0b3BUZXh0OiAnU3RvcCcsXG4gIHJlc2V0VGV4dDogJ1Jlc2V0b3ZhdCcsXG4gIGxhcFRleHQ6ICdFdGFwYScsXG4gIGhpZGVUZXh0OiAnU2Nob3ZhdCcsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAnWnDEm3QnLFxuICB1bmRvVGV4dDogJ1pwxJt0JyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAnTycsXG4gIG9uVGV4dDogJ0knLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxuLy8gRGFuc2tcbm1vYmlzY3JvbGwuaTE4bi5kYSA9IHtcbiAgLy8gQ29yZVxuICBzZXRUZXh0OiAnU8OmdCcsXG4gIGNhbmNlbFRleHQ6ICdBbm51bGxlcicsXG4gIGNsZWFyVGV4dDogJ1J5ZCcsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0gdmFsZ3QnLFxuICBzZWxlY3RlZFBsdXJhbFRleHQ6ICd7Y291bnR9IHZhbGd0JyxcbiAgLy8gRGF0ZXRpbWUgY29tcG9uZW50XG4gIGRhdGVGb3JtYXQ6ICdkZC9tbS95eScsXG4gIGRheU5hbWVzOiBbJ1PDuG5kYWcnLCAnTWFuZGFnJywgJ1RpcnNkYWcnLCAnT25zZGFnJywgJ1RvcnNkYWcnLCAnRnJlZGFnJywgJ0zDuHJkYWcnXSxcbiAgZGF5TmFtZXNTaG9ydDogWydTw7huJywgJ01hbicsICdUaXInLCAnT25zJywgJ1RvcicsICdGcmUnLCAnTMO4ciddLFxuICBkYXlOYW1lc01pbjogWydTJywgJ00nLCAnVCcsICdPJywgJ1QnLCAnRicsICdMJ10sXG4gIGRheVRleHQ6ICdEYWcnLFxuICBob3VyVGV4dDogJ1RpbWVyJyxcbiAgbWludXRlVGV4dDogJ01pbnV0dGVyJyxcbiAgbW9udGhOYW1lczogWydKYW51YXInLCAnRmVicnVhcicsICdNYXJ0cycsICdBcHJpbCcsICdNYWonLCAnSnVuaScsICdKdWxpJywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2t0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddLFxuICBtb250aE5hbWVzU2hvcnQ6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01haicsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2t0JywgJ05vdicsICdEZWMnXSxcbiAgbW9udGhUZXh0OiAnTcOlbmVkJyxcbiAgc2VjVGV4dDogJ1Nla3VuZGVyJyxcbiAgYW1UZXh0OiAnYW0nLFxuICBwbVRleHQ6ICdwbScsXG4gIHRpbWVGb3JtYXQ6ICdISC5paScsXG4gIHllYXJUZXh0OiAnw4VyJyxcbiAgbm93VGV4dDogJ051JyxcbiAgdG9kYXlUZXh0OiAnSSBkYWcnLFxuICAvLyBDYWxlbmRhciBjb21wb25lbnRcbiAgZmlyc3REYXk6IDEsXG4gIGRhdGVUZXh0OiAnRGF0bycsXG4gIHRpbWVUZXh0OiAnVGlkJyxcbiAgY2xvc2VUZXh0OiAnTHVrJyxcbiAgYWxsRGF5VGV4dDogJ0hlbGUgZGFnZW4nLFxuICBub0V2ZW50c1RleHQ6ICdJbmdlbiBiZWdpdmVuaGVkZXInLFxuICBldmVudFRleHQ6ICdCZWdpdmVuaGVkZXInLFxuICBldmVudHNUZXh0OiAnQmVnaXZlbmhlZGVyJyxcbiAgbW9yZUV2ZW50c1RleHQ6ICd7Y291bnR9IG1lcmUnLFxuICAvLyBEYXRlcmFuZ2UgY29tcG9uZW50XG4gIGZyb21UZXh0OiAnU3RhcnQnLFxuICB0b1RleHQ6ICdTbHV0JyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICdIZWxlJyxcbiAgZnJhY3Rpb25UZXh0OiAnRGVsZScsXG4gIHVuaXRUZXh0OiAnRW5oZWQnLFxuICAvLyBUaW1lIC8gVGltZXNwYW4gY29tcG9uZW50XG4gIGxhYmVsczogWyfDhXInLCAnTcOlbmVkZXInLCAnRGFnZScsICdUaW1lcicsICdNaW51dHRlcicsICdTZWt1bmRlcicsICcnXSxcbiAgbGFiZWxzU2hvcnQ6IFsnw4VyJywgJ01kcicsICdEZycsICdUaW1lcicsICdNaW4nLCAnU2VrJywgJyddLFxuICAvLyBUaW1lciBjb21wb25lbnRcbiAgc3RhcnRUZXh0OiAnU3RhcnQnLFxuICBzdG9wVGV4dDogJ1N0b3AnLFxuICByZXNldFRleHQ6ICdOdWxzdGlsJyxcbiAgbGFwVGV4dDogJ09tZ2FuZycsXG4gIGhpZGVUZXh0OiAnU2tqdWwnLFxuICAvLyBGb3Jtc1xuICBvZmZUZXh0OiAnRnJhJyxcbiAgb25UZXh0OiAnVGlsJyxcbiAgLy8gTGlzdHZpZXdcbiAgYmFja1RleHQ6ICdUaWxiYWdlJyxcbiAgdW5kb1RleHQ6ICdGb3J0cnlkJ1xufTtcblxuLy8gRGV1dHNjaFxubW9iaXNjcm9sbC5pMThuLmRlID0ge1xuICAvLyBDb3JlXG4gIHNldFRleHQ6ICdPSycsXG4gIGNhbmNlbFRleHQ6ICdBYmJyZWNoZW4nLFxuICBjbGVhclRleHQ6ICdMw7ZzY2hlbicsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0gYXVzZ2V3w6RobHQnLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ2RkLm1tLnl5JyxcbiAgZGF5TmFtZXM6IFsnU29ubnRhZycsICdNb250YWcnLCAnRGllbnN0YWcnLCAnTWl0dHdvY2gnLCAnRG9ubmVyc3RhZycsICdGcmVpdGFnJywgJ1NhbXN0YWcnXSxcbiAgZGF5TmFtZXNTaG9ydDogWydTbycsICdNbycsICdEaScsICdNaScsICdEbycsICdGcicsICdTYSddLFxuICBkYXlOYW1lc01pbjogWydTJywgJ00nLCAnRCcsICdNJywgJ0QnLCAnRicsICdTJ10sXG4gIGRheVRleHQ6ICdUYWcnLFxuICBkZWxpbWl0ZXI6ICcuJyxcbiAgaG91clRleHQ6ICdTdHVuZGUnLFxuICBtaW51dGVUZXh0OiAnTWludXRlbicsXG4gIG1vbnRoTmFtZXM6IFsnSmFudWFyJywgJ0ZlYnJ1YXInLCAnTcOkcnonLCAnQXByaWwnLCAnTWFpJywgJ0p1bmknLCAnSnVsaScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09rdG9iZXInLCAnTm92ZW1iZXInLCAnRGV6ZW1iZXInXSxcbiAgbW9udGhOYW1lc1Nob3J0OiBbJ0phbicsICdGZWInLCAnTcOkcicsICdBcHInLCAnTWFpJywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPa3QnLCAnTm92JywgJ0RleiddLFxuICBtb250aFRleHQ6ICdNb25hdCcsXG4gIHNlY1RleHQ6ICdTZWt1bmRlbicsXG4gIHRpbWVGb3JtYXQ6ICdISDppaScsXG4gIHllYXJUZXh0OiAnSmFocicsXG4gIG5vd1RleHQ6ICdKZXR6dCcsXG4gIHBtVGV4dDogJ3BtJyxcbiAgYW1UZXh0OiAnYW0nLFxuICB0b2RheVRleHQ6ICdIZXV0ZScsXG4gIC8vIENhbGVuZGFyIGNvbXBvbmVudFxuICBmaXJzdERheTogMSxcbiAgZGF0ZVRleHQ6ICdEYXR1bScsXG4gIHRpbWVUZXh0OiAnWmVpdCcsXG4gIGNsb3NlVGV4dDogJ1NjaGxpZcOfZW4nLFxuICBhbGxEYXlUZXh0OiAnR2FuenTDpGdpZycsXG4gIG5vRXZlbnRzVGV4dDogJ0tlaW5lIEVyZWlnbmlzc2UnLFxuICBldmVudFRleHQ6ICdFcmVpZ25pcycsXG4gIGV2ZW50c1RleHQ6ICdFcmVpZ25pc3NlJyxcbiAgbW9yZUV2ZW50c1RleHQ6ICd7Y291bnR9IHdlaXRlcmVzIEVsZW1lbnQnLFxuICBtb3JlRXZlbnRzUGx1cmFsVGV4dDogJ3tjb3VudH0gd2VpdGVyZSBFbGVtZW50ZScsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICdWb24nLFxuICB0b1RleHQ6ICdCaXMnLFxuICAvLyBNZWFzdXJlbWVudCBjb21wb25lbnRzXG4gIHdob2xlVGV4dDogJ0dhbnplIFphaGwnLFxuICBmcmFjdGlvblRleHQ6ICdCcnVjaHphaGwnLFxuICB1bml0VGV4dDogJ01hw59laW5oZWl0JyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsnSmFocmUnLCAnTW9uYXRlJywgJ1RhZ2UnLCAnU3R1bmRlbicsICdNaW51dGVuJywgJ1Nla3VuZGVuJywgJyddLFxuICBsYWJlbHNTaG9ydDogWydKYWhyLicsICdNb24uJywgJ1RhZy4nLCAnU3RkLicsICdNaW4uJywgJ1Nlay4nLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICdTdGFydGVuJyxcbiAgc3RvcFRleHQ6ICdTdG9wcGVuJyxcbiAgcmVzZXRUZXh0OiAnWnVyw7xja3NldHplbicsXG4gIGxhcFRleHQ6ICdMYXAnLFxuICBoaWRlVGV4dDogJ0F1c2JsZW5kZW4nLFxuICAvLyBMaXN0dmlld1xuICBiYWNrVGV4dDogJ1p1csO8Y2snLFxuICB1bmRvVGV4dDogJ1LDvGNrZ8OkbmdpZyBtYWNoZW4nLFxuICAvLyBGb3JtXG4gIG9mZlRleHQ6ICdBdXMnLFxuICBvblRleHQ6ICdFaW4nLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxuLy8gR3JlZWtcbm1vYmlzY3JvbGwuaTE4bi5lbCA9IHtcbiAgLy8gQ29yZVxuICBzZXRUZXh0OiAnzp/Pgc65z4POvM6/z4InLFxuICBjYW5jZWxUZXh0OiAnzpHOus+Fz4HPic+DzrcnLFxuICBjbGVhclRleHQ6ICfOlM65zrHOs8+BzrHPhs63JyxcbiAgc2VsZWN0ZWRUZXh0OiAne2NvdW50fSDOtc+AzrnOu861zrPOvM6tzr3OsScsXG4gIC8vIERhdGV0aW1lIGNvbXBvbmVudFxuICBkYXRlRm9ybWF0OiAnZGQvbW0veXknLFxuICBkYXlOYW1lczogWyfOms+Fz4HOuc6xzrrOricsICfOlM61z4XPhM6tz4HOsScsICfOpM+Bzq/PhM63JywgJ86kzrXPhM6sz4HPhM63JywgJ86gzq3OvM+Az4TOtycsICfOoM6xz4HOsc+DzrrOtc+Fzq4nLCAnzqPOrM6yzrLOsc+Ezr8nXSxcbiAgZGF5TmFtZXNTaG9ydDogWyfOms+Fz4EnLCAnzpTOtc+FJywgJ86kz4HOuScsICfOpM61z4QnLCAnzqDOtc68JywgJ86gzrHPgScsICfOo86xzrInXSxcbiAgZGF5TmFtZXNNaW46IFsnzprPhScsICfOlM61JywgJ86kz4EnLCAnzqTOtScsICfOoM61JywgJ86gzrEnLCAnzqPOsSddLFxuICBkYXlUZXh0OiAnzrfOvM6tz4HOsScsXG4gIGRlbGltaXRlcjogJy8nLFxuICBob3VyVGV4dDogJ8+Oz4HOsScsXG4gIG1pbnV0ZVRleHQ6ICfOu861z4DPhM+MJyxcbiAgbW9udGhOYW1lczogWyfOmc6xzr3Ov8+FzqzPgc65zr/PgicsICfOps61zrLPgc6/z4XOrM+BzrnOv8+CJywgJ86czqzPgc+EzrnOv8+CJywgJ86Rz4DPgc6vzrvOuc6/z4InLCAnzpzOrM65zr/PgicsICfOmc6/z43Ovc65zr/PgicsICfOmc6/z43Ou865zr/PgicsICfOkc+NzrPOv8+Fz4PPhM6/z4InLCAnzqPOtc+Az4TOrc68zrLPgc65zr/PgicsICfOn866z4TPjs6yz4HOuc6/z4InLCAnzp3Ov86tzrzOss+BzrnOv8+CJywgJ86UzrXOus6tzrzOss+BzrnOv8+CJ10sXG4gIG1vbnRoTmFtZXNTaG9ydDogWyfOmc6xzr0nLCAnzqbOtc6yJywgJ86czrHPgScsICfOkc+Az4EnLCAnzpzOsc65JywgJ86Zzr/Phc69JywgJ86Zzr/Phc67JywgJ86Rz4XOsycsICfOo861z4AnLCAnzp/Ous+EJywgJ86dzr/OtScsICfOlM61zronXSxcbiAgbW9udGhUZXh0OiAnzpzOrs69zrHPgicsXG4gIHNlY1RleHQ6ICfOtM61z4XPhM61z4HPjM67zrXPgM+EzrEnLFxuICB0aW1lRm9ybWF0OiAnSDppaScsXG4gIHllYXJUZXh0OiAnzq3PhM6/z4InLFxuICBub3dUZXh0OiAnz4TPjs+BzrEnLFxuICBwbVRleHQ6ICfOvM68JyxcbiAgYW1UZXh0OiAnz4DOvCcsXG4gIC8vIENhbGVuZGFyIGNvbXBvbmVudFxuICBmaXJzdERheTogMSxcbiAgZGF0ZVRleHQ6ICfOl868zrXPgc6/zrzOt869zq/OsScsXG4gIHRpbWVUZXh0OiAnz4bOv8+BzqwnLFxuICB0b2RheVRleHQ6ICfOo86uzrzOtc+BzrEnLFxuICBwcmV2TW9udGhUZXh0OiAnzqDPgc6/zrfOs86/z43OvM61zr3OvyDOvM6uzr3OsScsXG4gIG5leHRNb250aFRleHQ6ICfOlc+Az4zOvM61zr3OvyDOvM6uzr3OsScsXG4gIHByZXZZZWFyVGV4dDogJ86gz4HOv863zrPOv8+NzrzOtc69zr8gzq3PhM6/z4InLFxuICBuZXh0WWVhclRleHQ6ICfOlc+Az4zOvM61zr3OvyDOrc+Ezr/PgicsXG4gIGNsb3NlVGV4dDogJ86azrvOtc6vz4POuc68zr8nLFxuICBldmVudFRleHQ6ICfOk861zrPOv869z4zPhM6xJyxcbiAgZXZlbnRzVGV4dDogJ86TzrXOs86/zr3PjM+EzrEnLFxuICBhbGxEYXlUZXh0OiAnzp/Ou86/zq7OvM61z4HOvycsXG4gIG5vRXZlbnRzVGV4dDogJ86UzrXOvSDPhc+AzqzPgc+Hzr/Phc69IM6zzrXOs86/zr3PjM+EzrEnLFxuICBtb3JlRXZlbnRzVGV4dDogJ3tjb3VudH0gzrHOus+MzrzOtycsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICfOkc+Bz4fOricsXG4gIHRvVGV4dDogJ86kzq3Ou86/z4InLFxuICAvLyBNZWFzdXJlbWVudCBjb21wb25lbnRzXG4gIHdob2xlVGV4dDogJ86fzrvPjM66zrvOt8+Bzr/PgicsXG4gIGZyYWN0aW9uVGV4dDogJ866zrvOrM+DzrzOsScsXG4gIHVuaXRUZXh0OiAnzpzOv869zqzOtM6xJyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsnzqfPgc+Mzr3Ouc6xJywgJ86czq7Ovc61z4InLCAnzpfOvM6tz4HOtc+CJywgJ86pz4HOtc+CJywgJ86bzrXPgM+EzqwnLCAnzrTOtc+Fz4TOtc+Bz4zOu861z4DPhM6xJywgJyddLFxuICBsYWJlbHNTaG9ydDogWyfOp8+Bz4zOvc65zrEnLCAnzpzOrs69zrXPgicsICfOl868zq3Pgc61z4InLCAnzqnPgc61z4InLCAnzpvOtc+Az4TOrCcsICfOtM61z4XPhCcsICcnXSxcbiAgLy8gVGltZXIgY29tcG9uZW50XG4gIHN0YXJ0VGV4dDogJ86EzpXOvc6xz4HOvs63JyxcbiAgc3RvcFRleHQ6ICfOlM65zrHOus6/z4DOricsXG4gIHJlc2V0VGV4dDogJ86Vz4DOsc69zrHPhs6/z4HOrCcsXG4gIGxhcFRleHQ6ICfOk8+Nz4HOv8+CJyxcbiAgaGlkZVRleHQ6ICfOus+Bz43Oss+JJyxcbiAgLy8gTGlzdHZpZXdcbiAgYmFja1RleHQ6ICfOoM6vz4PPiScsXG4gIHVuZG9UZXh0OiAnzpHOvc6xzrnPgc61z4POtycsXG4gIC8vIEZvcm1cbiAgb2ZmVGV4dDogJ86Rzr3Otc69zrXPgc6zz4wnLFxuICBvblRleHQ6ICfOlc69zrXPgc6zz4wnLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxuLy8gRW5nbGlzaCAoVUspXG5tb2Jpc2Nyb2xsLmkxOG5bJ2VuLUdCJ10gPSBtb2Jpc2Nyb2xsLmkxOG5bJ2VuLVVLJ10gPSB7XG4gIGRhdGVGb3JtYXQ6ICdkZC9tbS95eScsXG4gIHRpbWVGb3JtYXQ6ICdISDppaSdcbn07XG5cbi8vIEVzcGHDsW9sXG5tb2Jpc2Nyb2xsLmkxOG4uZXMgPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ0FjZXB0YXInLFxuICBjYW5jZWxUZXh0OiAnQ2FuY2VsYXInLFxuICBjbGVhclRleHQ6ICdCb3JyYXInLFxuICBzZWxlY3RlZFRleHQ6ICd7Y291bnR9IHNlbGVjY2lvbmFkbycsXG4gIHNlbGVjdGVkUGx1cmFsVGV4dDogJ3tjb3VudH0gc2VsZWNjaW9uYWRvcycsXG4gIC8vIERhdGV0aW1lIGNvbXBvbmVudFxuICBkYXRlRm9ybWF0OiAnZGQvbW0veXknLFxuICBkYXlOYW1lczogWydEb21pbmdvJywgJ0x1bmVzJywgJ01hcnRlcycsICdNacOpcmNvbGVzJywgJ0p1ZXZlcycsICdWaWVybmVzJywgJ1PDoWJhZG8nXSxcbiAgZGF5TmFtZXNTaG9ydDogWydEbycsICdMdScsICdNYScsICdNaScsICdKdScsICdWaScsICdTw6EnXSxcbiAgZGF5TmFtZXNNaW46IFsnRCcsICdMJywgJ00nLCAnTScsICdKJywgJ1YnLCAnUyddLFxuICBkYXlUZXh0OiAnRMOtYScsXG4gIGhvdXJUZXh0OiAnSG9yYXMnLFxuICBtaW51dGVUZXh0OiAnTWludXRvcycsXG4gIG1vbnRoTmFtZXM6IFsnRW5lcm8nLCAnRmVicmVybycsICdNYXJ6bycsICdBYnJpbCcsICdNYXlvJywgJ0p1bmlvJywgJ0p1bGlvJywgJ0Fnb3N0bycsICdTZXB0aWVtYnJlJywgJ09jdHVicmUnLCAnTm92aWVtYnJlJywgJ0RpY2llbWJyZSddLFxuICBtb250aE5hbWVzU2hvcnQ6IFsnRW5lJywgJ0ZlYicsICdNYXInLCAnQWJyJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0FnbycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEaWMnXSxcbiAgbW9udGhUZXh0OiAnTWVzJyxcbiAgc2VjVGV4dDogJ1NlZ3VuZG9zJyxcbiAgdGltZUZvcm1hdDogJ0hIOmlpJyxcbiAgeWVhclRleHQ6ICdBJm50aWxkZTtvJyxcbiAgbm93VGV4dDogJ0Fob3JhJyxcbiAgcG1UZXh0OiAncG0nLFxuICBhbVRleHQ6ICdhbScsXG4gIHRvZGF5VGV4dDogJ0hveScsXG4gIC8vIENhbGVuZGFyIGNvbXBvbmVudFxuICBmaXJzdERheTogMSxcbiAgZGF0ZVRleHQ6ICdGZWNoYScsXG4gIHRpbWVUZXh0OiAnVGllbXBvJyxcbiAgY2xvc2VUZXh0OiAnQ2VycmFyJyxcbiAgYWxsRGF5VGV4dDogJ1RvZG8gZWwgZMOtYScsXG4gIG5vRXZlbnRzVGV4dDogJ05vIGhheSBldmVudG9zJyxcbiAgZXZlbnRUZXh0OiAnRXZlbnRvJyxcbiAgZXZlbnRzVGV4dDogJ0V2ZW50b3MnLFxuICBtb3JlRXZlbnRzVGV4dDogJ3tjb3VudH0gbcOhcycsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICdJbmljaWFyJyxcbiAgdG9UZXh0OiAnRmluYWwnLFxuICAvLyBNZWFzdXJlbWVudCBjb21wb25lbnRzXG4gIHdob2xlVGV4dDogJ0VudGVybycsXG4gIGZyYWN0aW9uVGV4dDogJ0ZyYWNjacOzbicsXG4gIHVuaXRUZXh0OiAnVW5pZGFkJyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsnQcOxb3MnLCAnTWVzZXMnLCAnRMOtYXMnLCAnSG9yYXMnLCAnTWludXRvcycsICdTZWd1bmRvcycsICcnXSxcbiAgbGFiZWxzU2hvcnQ6IFsnQcOxbycsICdNZXMnLCAnRMOtYScsICdIb3JhJywgJ01pbicsICdTZWcnLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICdJbmljaWFyJyxcbiAgc3RvcFRleHQ6ICdEZXTDqW5nYXNlJyxcbiAgcmVzZXRUZXh0OiAnUmVpbmljaWFsaXphcicsXG4gIGxhcFRleHQ6ICdMYXAnLFxuICBoaWRlVGV4dDogJ0VzY29uZGVyJyxcbiAgLy8gTGlzdHZpZXdcbiAgYmFja1RleHQ6ICdBdHLDoXMnLFxuICB1bmRvVGV4dDogJ0Rlc2hhY2VyJyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAnTm8nLFxuICBvblRleHQ6ICdTw60nLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxuLy8g2YHYp9ix2LPbjFxubW9iaXNjcm9sbC5pMThuLmZhID0ge1xuICAvLyBDb3JlXG4gIHNldFRleHQ6ICfYqtin2YrZitivJyxcbiAgY2FuY2VsVGV4dDogJ9in2YbYtdix2KfZgScsXG4gIGNsZWFyVGV4dDogJ9mI2KfYttitICcsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0g2YXZhtiq2K7YqCcsXG4gIC8vIERhdGV0aW1lIGNvbXBvbmVudFxuICBjYWxlbmRhclN5c3RlbTogJ2phbGFsaScsXG4gIGRhdGVGb3JtYXQ6ICd5eS9tbS9kZCcsXG4gIGRheU5hbWVzOiBbJ9mK2qnYtNmG2KjZhycsICfYr9mI2LTZhtio2YcnLCAn2LPZh+KAjNi02YbYqNmHJywgJ9qG2YfYp9ix2LTZhtio2YcnLCAn2b7Zhtis4oCM2LTZhtio2YcnLCAn2KzZhdi52YcnLCAn2LTZhtio2YcnXSxcbiAgZGF5TmFtZXNTaG9ydDogWyfbjCcsICfYrycsICfYsycsICfahicsICfZvicsICfYrCcsICfYtCddLFxuICBkYXlOYW1lc01pbjogWyfbjCcsICfYrycsICfYsycsICfahicsICfZvicsICfYrCcsICfYtCddLFxuICBkYXlUZXh0OiAn2LHZiNiyJyxcbiAgaG91clRleHQ6ICfYs9in2LnYqicsXG4gIG1pbnV0ZVRleHQ6ICfYr9mC2YrZgtmHJyxcbiAgbW9udGhOYW1lczogWyfZgdix2YjYsdiv2YrZhicsICfYp9ix2K/Zitio2YfYtNiqJywgJ9iu2LHYr9in2K8nLCAn2KrZitixJywgJ9mF2LHYr9in2K8nLCAn2LTZh9ix2YrZiNixJywgJ9mF2YfYsScsICfYotio2KfZhicsICfYotiw2LEnLCAn2K/bjCcsICfYqNmH2YXZhicsICfYp9iz2YHZhtivJ10sXG4gIG1vbnRoTmFtZXNTaG9ydDogWyfZgdix2YjYsdiv2YrZhicsICfYp9ix2K/Zitio2YfYtNiqJywgJ9iu2LHYr9in2K8nLCAn2KrZitixJywgJ9mF2LHYr9in2K8nLCAn2LTZh9ix2YrZiNixJywgJ9mF2YfYsScsICfYotio2KfZhicsICfYotiw2LEnLCAn2K/bjCcsICfYqNmH2YXZhicsICfYp9iz2YHZhtivJ10sXG4gIG1vbnRoVGV4dDogJ9mF2KfZhycsXG4gIHNlY1RleHQ6ICfYq9in2YbZitmHJyxcbiAgdGltZUZvcm1hdDogJ0hIOmlpJyxcbiAgdGltZVdoZWVsczogJ2lpSEgnLFxuICAvLyBOZWVkIHRoaXMgZm9yIGNvcnJlY3QgUlRMIGRpc3BsYXlcbiAgeWVhclRleHQ6ICfYs9in2YQnLFxuICBub3dUZXh0OiAn2KfaqdmG2YjZhicsXG4gIGFtVGV4dDogJ9ioJyxcbiAgcG1UZXh0OiAn2LUnLFxuICB0b2RheVRleHQ6ICfYp9mF2LHZiNiyJyxcbiAgLy9nZXROdW1iZXI6IGZ1bmN0aW9uIChuKSB7XG4gIC8vICAgIHZhciBpLFxuICAvLyAgICAgICAgbnVtcyA9IFtcItuwXCIsIFwi27FcIiwgXCLbslwiLCBcItuzXCIsIFwi27RcIiwgXCLbtVwiLCBcItu2XCIsIFwi27dcIiwgXCLbuFwiLCBcItu5XCJdLFxuICAvLyAgICAgICAgcmVzID0gJyc7XG4gIC8vICAgIG4gPSBuICsgJyc7XG4gIC8vICAgIGZvciAoaSA9IDA7IGkgPCBuLmxlbmd0aDsgaSsrKSB7XG4gIC8vICAgICAgICByZXMgKz0gbnVtc1srbltpXV07XG4gIC8vICAgIH1cbiAgLy8gICAgcmV0dXJuIHJlcztcbiAgLy99LFxuICAvLyBDYWxlbmRhciBjb21wb25lbnRcbiAgZmlyc3REYXk6IDYsXG4gIHJ0bDogdHJ1ZSxcbiAgZGF0ZVRleHQ6ICfYqtin2LHbjNiuICcsXG4gIHRpbWVUZXh0OiAn2LLZhdin2YYgJyxcbiAgY2xvc2VUZXh0OiAn2YbYstiv24zaqScsXG4gIGFsbERheVRleHQ6ICfYqtmF2KfZhSDYsdmI2LInLFxuICBub0V2ZW50c1RleHQ6ICfZh9uM2oYg2LHZiNuM2K/Yp9ivJyxcbiAgZXZlbnRUZXh0OiAn2LHZiNuM2K/Yp9ivJyxcbiAgZXZlbnRzVGV4dDogJ9ix2YjbjNiv2KfYr9mH2KcnLFxuICBtb3JlRXZlbnRzVGV4dDogJ3tjb3VudH0g2YXZiNix2K8g2K/bjNqv2LEnLFxuICAvLyBEYXRlcmFuZ2UgY29tcG9uZW50XG4gIGZyb21UZXh0OiAn2LTYsdmI2LkgJyxcbiAgdG9UZXh0OiAn2b7Yp9uM2KfZhicsXG4gIC8vIE1lYXN1cmVtZW50IGNvbXBvbmVudHNcbiAgd2hvbGVUZXh0OiAn2KrZhdin2YUnLFxuICBmcmFjdGlvblRleHQ6ICfaqdiz2LEnLFxuICB1bml0VGV4dDogJ9mI2KfYrdivJyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsn2LPYp9mEJywgJ9mF2KfZhycsICfYsdmI2LInLCAn2LPYp9i52KonLCAn2K/ZgtuM2YLZhycsICfYq9in2YbbjNmHJywgJyddLFxuICBsYWJlbHNTaG9ydDogWyfYs9in2YQnLCAn2YXYp9mHJywgJ9ix2YjYsicsICfYs9in2LnYqicsICfYr9mC24zZgtmHJywgJ9ir2KfZhtuM2YcnLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICfYtNix2YjYuScsXG4gIHN0b3BUZXh0OiAn2b7Yp9mK2KfZhicsXG4gIHJlc2V0VGV4dDogJ9iq2YbYuNuM2YUg2YXYrNiv2K8nLFxuICBsYXBUZXh0OiAnTGFwJyxcbiAgaGlkZVRleHQ6ICfZvtmG2YfYp9mGINqp2LHYr9mGJyxcbiAgLy8gTGlzdHZpZXdcbiAgYmFja1RleHQ6ICfZvti02KonLFxuICB1bmRvVGV4dDogJ9mI2KfahtuM2K/Zhidcbn07XG5cbi8vIFN1b21pXG5tb2Jpc2Nyb2xsLmkxOG4uZmkgPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ0FzZXRhJyxcbiAgY2FuY2VsVGV4dDogJ1BlcnV1dGEnLFxuICBjbGVhclRleHQ6ICdUeWhqZW5uw6QnLFxuICBzZWxlY3RlZFRleHQ6ICd7Y291bnR9IHZhbGl0YScsXG4gIC8vIERhdGV0aW1lIGNvbXBvbmVudFxuICBkYXRlRm9ybWF0OiAnZC4gTU0geXknLFxuICBkYXlOYW1lczogWydTdW5udW50YWknLCAnTWFhbmFudGFpJywgJ1RpaXN0YWknLCAnS2Vza2l2aWlrbycsICdUb3JzdGFpJywgJ1BlcmphbnRhaScsICdMYXVhbnRhaSddLFxuICBkYXlOYW1lc1Nob3J0OiBbJ1N1JywgJ01hJywgJ1RpJywgJ0tlJywgJ1RvJywgJ1BlJywgJ0xhJ10sXG4gIGRheU5hbWVzTWluOiBbJ1MnLCAnTScsICdUJywgJ0snLCAnVCcsICdQJywgJ0wnXSxcbiAgZGF5VGV4dDogJ1DDpGl2w6QnLFxuICBkZWxpbWl0ZXI6ICcuJyxcbiAgaG91clRleHQ6ICdUdW50aWEnLFxuICBtaW51dGVUZXh0OiAnTWludXV0dGknLFxuICBtb250aE5hbWVzOiBbJ1RhbW1pa3V1JywgJ0hlbG1pa3V1JywgJ01hYWxpc2t1dScsICdIdWh0aWt1dScsICdUb3Vrb2t1dScsICdLZXPDpGt1dScsICdIZWluw6RrdXUnLCAnRWxva3V1JywgJ1N5eXNrdXUnLCAnTG9rYWt1dScsICdNYXJyYXNrdXUnLCAnSm91bHVrdXUnXSxcbiAgbW9udGhOYW1lc1Nob3J0OiBbJ1RhbScsICdIZWwnLCAnTWFhJywgJ0h1aCcsICdUb3UnLCAnS2VzJywgJ0hlaScsICdFbG8nLCAnU3l5JywgJ0xvaycsICdNYXInLCAnSm91J10sXG4gIG1vbnRoVGV4dDogJ0t1dWthdXNpJyxcbiAgc2VjVGV4dDogJ1Nla3VuZGEnLFxuICB0aW1lRm9ybWF0OiAnSDppaScsXG4gIHllYXJUZXh0OiAnVnVvc2knLFxuICBub3dUZXh0OiAnTnl0JyxcbiAgcG1UZXh0OiAncG0nLFxuICBhbVRleHQ6ICdhbScsXG4gIC8vIENhbGVuZGFyIGNvbXBvbmVudFxuICBmaXJzdERheTogMSxcbiAgZGF0ZVRleHQ6ICdQw6RpdsOkeXMnLFxuICB0aW1lVGV4dDogJ0Fpa2EnLFxuICB0b2RheVRleHQ6ICdUw6Ruw6TDpG4nLFxuICBwcmV2TW9udGhUZXh0OiAnRWRlbGxpbmVuIGt1dWthdXNpJyxcbiAgbmV4dE1vbnRoVGV4dDogJ0Vuc2kga3V1c3NhJyxcbiAgcHJldlllYXJUZXh0OiAnRWRlbGxpbmVuIHZ1b3NpJyxcbiAgbmV4dFllYXJUZXh0OiAnRW5zaSB2dW9zaScsXG4gIGNsb3NlVGV4dDogJ1N1bGplJyxcbiAgZXZlbnRUZXh0OiAnVGFwYWh0dW1pYScsXG4gIGV2ZW50c1RleHQ6ICdUYXBhaHR1bWlhJyxcbiAgYWxsRGF5VGV4dDogJ0tva28gcMOkaXbDpCcsXG4gIG5vRXZlbnRzVGV4dDogJ0VpIHRhcGFodHVtaWEnLFxuICBtb3JlRXZlbnRzVGV4dDogJ3tjb3VudH0gbXV1JyxcbiAgbW9yZUV2ZW50c1BsdXJhbFRleHQ6ICd7Y291bnR9IG11dXRhJyxcbiAgLy8gRGF0ZXJhbmdlIGNvbXBvbmVudFxuICBmcm9tVGV4dDogJ0Fsa2FhJyxcbiAgdG9UZXh0OiAnUMOkw6R0dHl5JyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICdLb2tvbmFpbmVuJyxcbiAgZnJhY3Rpb25UZXh0OiAnTXVydG9sdWt1JyxcbiAgdW5pdFRleHQ6ICdZa3Npa2vDticsXG4gIC8vIFRpbWUgLyBUaW1lc3BhbiBjb21wb25lbnRcbiAgbGFiZWxzOiBbJ1Z1b3NpJywgJ0t1dWthdXNpJywgJ1DDpGl2w6QnLCAnVHVubmluJywgJ01pbnV1dHRpJywgJ3Nla3VudGlhJywgJyddLFxuICBsYWJlbHNTaG9ydDogWydWdW8nLCAnS3V1JywgJ1DDpGknLCAnVHVuJywgJ01pbicsICdTZWsnLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICdLw6R5bm5pc3R5cycsXG4gIHN0b3BUZXh0OiAnU2VpcycsXG4gIHJlc2V0VGV4dDogJ0FzZXRhIHV1ZGVsbGVlbicsXG4gIGxhcFRleHQ6ICdLaWVycm9zJyxcbiAgaGlkZVRleHQ6ICdWdW90YScsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAnRWRlbGxpbmVuJyxcbiAgdW5kb1RleHQ6ICdLdW1vYScsXG4gIC8vIEZvcm1cbiAgb2ZmVGV4dDogJ1BvaXMnLFxuICBvblRleHQ6ICdQw6TDpGxsw6QnLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxuLy8gRnJhbsOnYWlzXG5tb2Jpc2Nyb2xsLmkxOG4uZnIgPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ1Rlcm1pbmVyJyxcbiAgY2FuY2VsVGV4dDogJ0FubnVsZXInLFxuICBjbGVhclRleHQ6ICdFZmZhY2VyJyxcbiAgc2VsZWN0ZWRUZXh0OiAne2NvdW50fSBzw6lsZWN0aW9ubsOpJyxcbiAgc2VsZWN0ZWRQbHVyYWxUZXh0OiAne2NvdW50fSBzw6lsZWN0aW9ubsOpcycsXG4gIC8vIERhdGV0aW1lIGNvbXBvbmVudFxuICBkYXRlRm9ybWF0OiAnZGQvbW0veXknLFxuICBkYXlOYW1lczogWydEaW1hbmNoZScsICdMdW5kaScsICdNYXJkaScsICdNZXJjcmVkaScsICdKZXVkaScsICdWZW5kcmVkaScsICdTYW1lZGknXSxcbiAgZGF5TmFtZXNTaG9ydDogWydEaW0uJywgJ0x1bi4nLCAnTWFyLicsICdNZXIuJywgJ0pldS4nLCAnVmVuLicsICdTYW0uJ10sXG4gIGRheU5hbWVzTWluOiBbJ0QnLCAnTCcsICdNJywgJ00nLCAnSicsICdWJywgJ1MnXSxcbiAgZGF5VGV4dDogJ0pvdXInLFxuICBtb250aFRleHQ6ICdNb2lzJyxcbiAgbW9udGhOYW1lczogWydKYW52aWVyJywgJ0bDqXZyaWVyJywgJ01hcnMnLCAnQXZyaWwnLCAnTWFpJywgJ0p1aW4nLCAnSnVpbGxldCcsICdBb8O7dCcsICdTZXB0ZW1icmUnLCAnT2N0b2JyZScsICdOb3ZlbWJyZScsICdEw6ljZW1icmUnXSxcbiAgbW9udGhOYW1lc1Nob3J0OiBbJ0phbnYuJywgJ0bDqXZyLicsICdNYXJzJywgJ0F2cmlsJywgJ01haScsICdKdWluJywgJ0p1aWwuJywgJ0Fvw7t0JywgJ1NlcHQuJywgJ09jdC4nLCAnTm92LicsICdEw6ljLiddLFxuICBob3VyVGV4dDogJ0hldXJlcycsXG4gIG1pbnV0ZVRleHQ6ICdNaW51dGVzJyxcbiAgc2VjVGV4dDogJ1NlY29uZGVzJyxcbiAgdGltZUZvcm1hdDogJ0hIOmlpJyxcbiAgeWVhclRleHQ6ICdBbm7DqWUnLFxuICBub3dUZXh0OiAnTWFpbnRlbmFudCcsXG4gIHBtVGV4dDogJ3BtJyxcbiAgYW1UZXh0OiAnYW0nLFxuICB0b2RheVRleHQ6IFwiQXVqb3VyZCdodWlcIixcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGZpcnN0RGF5OiAxLFxuICBkYXRlVGV4dDogJ0RhdGUnLFxuICB0aW1lVGV4dDogJ0hldXJlJyxcbiAgY2xvc2VUZXh0OiAnRmVybWVyJyxcbiAgYWxsRGF5VGV4dDogJ1RvdXRlIGxhIGpvdXJuw6llJyxcbiAgbm9FdmVudHNUZXh0OiAnQXVjdW4gw6l2w6luZW1lbnQnLFxuICBldmVudFRleHQ6ICfDiXbDqW5lbWVudCcsXG4gIGV2ZW50c1RleHQ6ICfDiXbDqW5lbWVudHMnLFxuICBtb3JlRXZlbnRzVGV4dDogJ3tjb3VudH0gYXV0cmUnLFxuICBtb3JlRXZlbnRzUGx1cmFsVGV4dDogJ3tjb3VudH0gYXV0cmVzJyxcbiAgLy8gRGF0ZXJhbmdlIGNvbXBvbmVudFxuICBmcm9tVGV4dDogJ0TDqW1hcnJlcicsXG4gIHRvVGV4dDogJ0ZpbicsXG4gIC8vIE1lYXN1cmVtZW50IGNvbXBvbmVudHNcbiAgd2hvbGVUZXh0OiAnRW50aWVyJyxcbiAgZnJhY3Rpb25UZXh0OiAnRnJhY3Rpb24nLFxuICB1bml0VGV4dDogJ1VuaXTDqScsXG4gIC8vIFRpbWUgLyBUaW1lc3BhbiBjb21wb25lbnRcbiAgbGFiZWxzOiBbJ0FucycsICdNb2lzJywgJ0pvdXJzJywgJ0hldXJlcycsICdNaW51dGVzJywgJ1NlY29uZGVzJywgJyddLFxuICBsYWJlbHNTaG9ydDogWydBbnMnLCAnTW9pcycsICdKb3VycycsICdIcnMnLCAnTWluJywgJ1NlYycsICcnXSxcbiAgLy8gVGltZXIgY29tcG9uZW50XG4gIHN0YXJ0VGV4dDogJ0TDqW1hcnJlcicsXG4gIHN0b3BUZXh0OiAnQXJyw6p0ZXInLFxuICByZXNldFRleHQ6ICdSw6lpbml0aWFsaXNlcicsXG4gIGxhcFRleHQ6ICdMYXAnLFxuICBoaWRlVGV4dDogJ0NhY2hleicsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAnUmV0b3VyJyxcbiAgdW5kb1RleHQ6ICdBbm51bGVyJyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAnTm9uJyxcbiAgb25UZXh0OiAnT3VpJyxcbiAgLy8gTnVtcGFkXG4gIGRlY2ltYWxTZXBhcmF0b3I6ICcsJyxcbiAgdGhvdXNhbmRzU2VwYXJhdG9yOiAnICdcbn07XG5cbi8vIEhlYnJld1xubW9iaXNjcm9sbC5pMThuLmhlID0ge1xuICAvLyBDb3JlXG4gIHJ0bDogdHJ1ZSxcbiAgLy8gUmlnaHQgdG8gbGVmdCBtb2RlXG4gIHNldFRleHQ6ICfXqdee15nXqNeUJyxcbiAgY2FuY2VsVGV4dDogJ9eR15nXmNeV15wnLFxuICBjbGVhclRleHQ6ICfXoNen15QnLFxuICBzZWxlY3RlZFRleHQ6ICd7Y291bnR9INeg15HXl9eoJyxcbiAgc2VsZWN0ZWRQbHVyYWxUZXh0OiAne2NvdW50fSDXoNeR15fXqNeVJyxcbiAgLy8gRGF0ZXRpbWUgY29tcG9uZW50XG4gIGRhdGVGb3JtYXQ6ICdkZC9tbS95eScsXG4gIGRheU5hbWVzOiBbJ9eo15DXqdeV158nLCAn16nXoNeZJywgJ9ep15zXmdep15knLCAn16jXkdeZ16LXmScsICfXl9ee15nXqdeZJywgJ9ep15nXqdeZJywgJ9ep15HXqiddLFxuICBkYXlOYW1lc1Nob3J0OiBbXCLXkCdcIiwgXCLXkSdcIiwgXCLXkidcIiwgXCLXkydcIiwgXCLXlCdcIiwgXCLXlSdcIiwgXCLXqSdcIl0sXG4gIGRheU5hbWVzTWluOiBbJ9eQJywgJ9eRJywgJ9eSJywgJ9eTJywgJ9eUJywgJ9eVJywgJ9epJ10sXG4gIGRheVRleHQ6ICfXmdeV150nLFxuICBob3VyVGV4dDogJ9ep16LXldeqJyxcbiAgbWludXRlVGV4dDogJ9eT16fXldeqJyxcbiAgbW9udGhOYW1lczogWyfXmdeg15XXkNeoJywgJ9ek15HXqNeV15DXqCcsICfXnteo16UnLCAn15DXpNeo15nXnCcsICfXnteQ15knLCAn15nXldeg15knLCAn15nXldec15knLCAn15DXldeS15XXodeYJywgJ9eh16TXmNee15HXqCcsICfXkNeV16fXmNeV15HXqCcsICfXoNeV15HXnteR16gnLCAn15PXptee15HXqCddLFxuICBtb250aE5hbWVzU2hvcnQ6IFtcIteZ16DXlVwiLCBcItek15HXqFwiLCBcItee16jXpVwiLCBcIteQ16TXqFwiLCBcItee15DXmVwiLCBcIteZ15XXoFwiLCBcIteZ15XXnFwiLCBcIteQ15XXklwiLCBcIteh16TXmFwiLCBcIteQ15XXp1wiLCBcIteg15XXkVwiLCBcIteT16bXnlwiXSxcbiAgbW9udGhUZXh0OiAn15fXldeT16knLFxuICBzZWNUZXh0OiAn16nXoNeZ15XXqicsXG4gIGFtVGV4dDogJ2FtJyxcbiAgcG1UZXh0OiAncG0nLFxuICB0aW1lRm9ybWF0OiAnSEg6aWknLFxuICB0aW1lV2hlZWxzOiAnaWlISCcsXG4gIC8vIE5lZWQgdGhpcyBmb3IgY29ycmVjdCBSVEwgZGlzcGxheVxuICB5ZWFyVGV4dDogJ9ep16DXlCcsXG4gIG5vd1RleHQ6ICfXoteb16nXmdeVJyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGZpcnN0RGF5OiAwLFxuICBkYXRlVGV4dDogJ9eq15DXqNeZ15onLFxuICB0aW1lVGV4dDogJ9eW157XnycsXG4gIGNsb3NlVGV4dDogJ9eh15LXmdeo15QnLFxuICB0b2RheVRleHQ6ICfXlNeZ15XXnScsXG4gIGFsbERheVRleHQ6ICfXm9ecINeU15nXldedJyxcbiAgbm9FdmVudHNUZXh0OiAn15DXmdefINeQ15nXqNeV16LXmdedJyxcbiAgLy8gRXZlbnQgY2FsZW5kYXJcbiAgZXZlbnRUZXh0OiAn157WtNen16jWtteUJyxcbiAgZXZlbnRzVGV4dDogJ9ee1rTXp9eo1rbXlCcsXG4gIG1vcmVFdmVudHNUZXh0OiAn15DXmdeo15XXoiDXkNeX15Mg16DXldeh16MnLFxuICBtb3JlRXZlbnRzUGx1cmFsVGV4dDogJ3tjb3VudH0g15DXmdeo15XXoteZ150g16DXldeh16TXmdedJyxcbiAgLy8gRGF0ZXJhbmdlIGNvbXBvbmVudFxuICBmcm9tVGV4dDogJ9eU16rXl9ec15QnLFxuICB0b1RleHQ6ICfXodeZ15XXnScsXG4gIC8vIE1lYXN1cmVtZW50IGNvbXBvbmVudHNcbiAgd2hvbGVUZXh0OiAn15vWvNa515wnLFxuICBmcmFjdGlvblRleHQ6ICfXqdeR16jXmdeoJyxcbiAgdW5pdFRleHQ6ICfXmdeX15nXk9eUJyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsn16nXoNeZ150nLCAn15fXldeT16nXmdedJywgJ9eZ157XmdedJywgJ9ep16LXldeqJywgJ9eT16fXldeqJywgJ9ep16DXmdeZ150nLCAnJ10sXG4gIGxhYmVsc1Nob3J0OiBbJ9ep16DXmdedJywgJ9eX15XXk9ep15nXnScsICfXmdee15nXnScsICfXqdei15XXqicsICfXk9en15XXqicsICfXqdeg15nXmdedJywgJyddLFxuICAvLyBUaW1lciBjb21wb25lbnRcbiAgc3RhcnRUZXh0OiAn15TXqteX15wnLFxuICBzdG9wVGV4dDogJ9ei16bXldeoJyxcbiAgcmVzZXRUZXh0OiAn15DXqteX15XXnCcsXG4gIGxhcFRleHQ6ICfXlNen16TXlCcsXG4gIGhpZGVUZXh0OiAn15TXodeq16gnLFxuICAvLyBGb3Jtc1xuICBvZmZUZXh0OiAn15vXmdeR15XXmScsXG4gIG9uVGV4dDogJ9eU16TXotec15QnLFxuICAvLyBMaXN0dmlld1xuICBiYWNrVGV4dDogJ9eX15bXldeoJyxcbiAgdW5kb1RleHQ6ICfXkdeZ15jXldecINek16LXldec15QnXG59O1xuXG4vLyBIaW5kaVxubW9iaXNjcm9sbC5pMThuLmhpID0ge1xuICAvLyBDb3JlXG4gIHNldFRleHQ6ICfgpLjgpYjgpJ8g4KSV4KSw4KWH4KSCJyxcbiAgY2FuY2VsVGV4dDogJ+CksOCkpuCljeCkpiDgpJXgpLDgpYfgpIInLFxuICBjbGVhclRleHQ6ICfgpLjgpL7gpZ4g4KSV4KWLJyxcbiAgc2VsZWN0ZWRUZXh0OiAne2NvdW50fSDgpJrgpK/gpKjgpL/gpKQnLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ2RkL21tL3l5JyxcbiAgZGF5TmFtZXM6IFsn4KSw4KS14KS/4KS14KS+4KSwJywgJ+CkuOCli+CkruCkteCkvuCksCcsICfgpK7gpILgpJfgpLLgpLXgpL7gpLAnLCAn4KSs4KWB4KSn4KS14KS+4KSwJywgJ+Ckl+ClgeCksOClgeCkteCkvuCksCcsICfgpLbgpYHgpJXgpY3gpLDgpLXgpL7gpLAnLCAn4KS24KSo4KS/4KS14KS+4KSwJ10sXG4gIGRheU5hbWVzU2hvcnQ6IFsn4KSw4KS14KS/JywgJ+CkuOCli+CkricsICfgpK7gpILgpJfgpLInLCAn4KSs4KWB4KSnJywgJ+Ckl+ClgeCksOClgScsICfgpLbgpYHgpJXgpY3gpLAnLCAn4KS24KSo4KS/J10sXG4gIGRheU5hbWVzTWluOiBbJ+CksOCkteCkvycsICfgpLjgpYvgpK4nLCAn4KSu4KSC4KSX4KSyJywgJ+CkrOClgeCkpycsICfgpJfgpYHgpLDgpYEnLCAn4KS24KWB4KSV4KWN4KSwJywgJ+CktuCkqOCkvyddLFxuICBkYXlUZXh0OiAn4KSm4KS/4KSoJyxcbiAgZGVsaW1pdGVyOiAnLicsXG4gIGhvdXJUZXh0OiAn4KSY4KSC4KSf4KS+JyxcbiAgbWludXRlVGV4dDogJ+CkruCkv+CkqOCknycsXG4gIG1vbnRoTmFtZXM6IFsn4KSc4KSo4KS14KSw4KWAICcsICfgpKvgpLDgpLXgpLDgpYAnLCAn4KSu4KS+4KSw4KWN4KSaJywgJ+CkheCkquCljeCksOClh+CksicsICfgpK7gpIgnLCAn4KSc4KWC4KSoJywgJ+CknOClguCksuCkvuCkiCcsICfgpIXgpJfgpLjgpY3gpKQgJywgJ+CkuOCkv+CkpOCkruCljeCkrOCksCcsICfgpIXgpJXgpY3gpJ/gpYLgpKzgpLAnLCAn4KSo4KS14KSu4KWN4KSs4KSwJywgJ+CkpuCkv+CkuOCkruCljeCkrOCksCddLFxuICBtb250aE5hbWVzU2hvcnQ6IFsn4KSc4KSoJywgJ+Ckq+CksCcsICfgpK7gpL7gpLDgpY3gpJonLCAn4KSF4KSq4KWN4KSw4KWH4KSyJywgJ+CkruCkiCcsICfgpJzgpYLgpKgnLCAn4KSc4KWC4KSy4KS+4KSIJywgJ+CkheCklycsICfgpLjgpL/gpKQnLCAn4KSF4KSV4KWN4KSfJywgJ+CkqOCktScsICfgpKbgpL8nXSxcbiAgbW9udGhUZXh0OiAn4KSu4KS54KWA4KSo4KS+JyxcbiAgc2VjVGV4dDogJ+CkuOClh+CkleCkguCkoScsXG4gIHRpbWVGb3JtYXQ6ICdIOmlpJyxcbiAgeWVhclRleHQ6ICfgpLjgpL7gpLInLFxuICBub3dUZXh0OiAn4KSF4KSsJyxcbiAgcG1UZXh0OiAn4KSF4KSq4KSw4KS+4KS54KWN4KSoJyxcbiAgYW1UZXh0OiAn4KSq4KWC4KSw4KWN4KS14KS+4KS54KWN4KSoJyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGZpcnN0RGF5OiAxLFxuICBkYXRlVGV4dDogJ+CkpOCkv+CkpeCkvycsXG4gIHRpbWVUZXh0OiAn4KS44KSu4KSvJyxcbiAgdG9kYXlUZXh0OiAn4KSG4KScJyxcbiAgcHJldk1vbnRoVGV4dDogJ+CkquCkv+Ckm+CljeCksuCkviDgpK7gpLngpL/gpKjgpL4nLFxuICBuZXh0TW9udGhUZXh0OiAn4KSF4KSX4KSy4KWHIOCkruCkueClgOCkqOClhycsXG4gIHByZXZZZWFyVGV4dDogJ+CkquCkv+Ckm+CksuCkviDgpLjgpL7gpLInLFxuICBuZXh0WWVhclRleHQ6ICfgpIXgpJfgpLLgpYcg4KS14KSw4KWN4KS3JyxcbiAgY2xvc2VUZXh0OiAn4KSs4KSC4KSmJyxcbiAgZXZlbnRUZXh0OiAn4KSH4KS14KWH4KSf4KWpJyxcbiAgZXZlbnRzVGV4dDogJ+Ckh+CkteClh+Ckn+ClqScsXG4gIGFsbERheVRleHQ6ICfgpKrgpYLgpLDgpYcg4KSm4KS/4KSoJyxcbiAgbm9FdmVudHNUZXh0OiAnRWkgdGFwYWh0dW1pYScsXG4gIG1vcmVFdmVudHNUZXh0OiAne2NvdW50fSDgpJTgpLAnLFxuICAvLyBEYXRlcmFuZ2UgY29tcG9uZW50XG4gIGZyb21UZXh0OiAn4KS44KWHJyxcbiAgdG9UZXh0OiAn4KSk4KSVJyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICfgpLjgpK7gpYLgpJrgpL4nLFxuICBmcmFjdGlvblRleHQ6ICfgpIXgpILgpLYnLFxuICB1bml0VGV4dDogJ+Ckh+CkleCkvuCkiCcsXG4gIC8vIFRpbWUgLyBUaW1lc3BhbiBjb21wb25lbnRcbiAgbGFiZWxzOiBbJ+CkuOCkvuCksicsICfgpK7gpLngpYDgpKjgpYcnLCAn4KSm4KS/4KSoJywgJ+CkmOCkguCkn+ClhycsICfgpK7gpL/gpKjgpJ8nLCAn4KS44KWH4KSV4KSC4KShJywgJyddLFxuICBsYWJlbHNTaG9ydDogWyfgpLjgpL7gpLInLCAn4KSu4KS54KWA4KSo4KWHJywgJ+CkpuCkv+CkqCcsICfgpJjgpILgpJ/gpYcnLCAn4KSu4KS/4KSo4KSfJywgJ+CkuOClh+CkleCkguCkoScsICcnXSxcbiAgLy8gVGltZXIgY29tcG9uZW50XG4gIHN0YXJ0VGV4dDogJ+CkquCljeCksOCkvuCksOCkguCkrScsXG4gIHN0b3BUZXh0OiAn4KSw4KWL4KSV4KWH4KSCJyxcbiAgcmVzZXRUZXh0OiAn4KSw4KWA4KS44KWH4KSfIOCkleCksOClh+CkgicsXG4gIGxhcFRleHQ6ICfgpLLgpYjgpKonLFxuICBoaWRlVGV4dDogJ+Ckm+Ckv+CkquCkvuCkqOCkvicsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAn4KS14KS+4KSq4KS4JyxcbiAgLy8gY2hlY2tcbiAgdW5kb1RleHQ6ICfgpLXgpL7gpKrgpLgg4KSy4KS+4KSP4KSCJyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAn4KSs4KSC4KSmJyxcbiAgb25UZXh0OiAn4KSa4KS+4KSy4KWCJyxcbiAgLy8gTnVtcGFkXG4gIGRlY2ltYWxTZXBhcmF0b3I6ICcsJyxcbiAgdGhvdXNhbmRzU2VwYXJhdG9yOiAnICdcbn07XG5cbi8vIENyb2F0aWFuXG5tb2Jpc2Nyb2xsLmkxOG4uaHIgPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ1Bvc3RhdmknLFxuICBjYW5jZWxUZXh0OiAnSXpsYXonLFxuICBjbGVhclRleHQ6ICdJemJyacWhaScsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0gb2RhYnJhbicsXG4gIC8vIERhdGV0aW1lIGNvbXBvbmVudFxuICBkYXRlRm9ybWF0OiAnZGQubW0ueXknLFxuICBkYXlOYW1lczogWydOZWRqZWxqYScsICdQb25lZGplbGphaycsICdVdG9yYWsnLCAnU3JpamVkYScsICfEjGV0dnJ0YWsnLCAnUGV0YWsnLCAnU3Vib3RhJ10sXG4gIGRheU5hbWVzU2hvcnQ6IFsnTmVkJywgJ1BvbicsICdVdG8nLCAnU3JpJywgJ8SMZXQnLCAnUGV0JywgJ1N1YiddLFxuICBkYXlOYW1lc01pbjogWydOZScsICdQbycsICdVdCcsICdTcicsICfEjGUnLCAnUGUnLCAnU3UnXSxcbiAgZGF5VGV4dDogJ0RhbicsXG4gIGRlbGltaXRlcjogJy4nLFxuICBob3VyVGV4dDogJ1NhdCcsXG4gIG1pbnV0ZVRleHQ6ICdNaW51dGEnLFxuICBtb250aE5hbWVzOiBbJ1NpamXEjWFuaicsICdWZWxqYcSNYScsICdPxb51amFrJywgJ1RyYXZhbmonLCAnU3ZpYmFuaicsICdMaXBhbmonLCAnU3JwYW5qJywgJ0tvbG92b3onLCAnUnVqYW4nLCAnTGlzdG9wYWQnLCAnU3R1ZGVuaScsICdQcm9zaW5hYyddLFxuICBtb250aE5hbWVzU2hvcnQ6IFsnU2lqJywgJ1ZlbGonLCAnT8W+dScsICdUcmEnLCAnU3ZpJywgJ0xpcCcsICdTcnAnLCAnS29sJywgJ1J1aicsICdMaXMnLCAnU3R1JywgJ1BybyddLFxuICBtb250aFRleHQ6ICdNamVzZWMnLFxuICBzZWNUZXh0OiAnU2VrdW5kYScsXG4gIHRpbWVGb3JtYXQ6ICdIOmlpJyxcbiAgeWVhclRleHQ6ICdHb2RpbmEnLFxuICBub3dUZXh0OiAnU2FkYScsXG4gIHBtVGV4dDogJ3BtJyxcbiAgYW1UZXh0OiAnYW0nLFxuICAvLyBDYWxlbmRhciBjb21wb25lbnRcbiAgZmlyc3REYXk6IDEsXG4gIGRhdGVUZXh0OiAnRGF0dW0nLFxuICB0aW1lVGV4dDogJ1ZyaWplbWUnLFxuICB0b2RheVRleHQ6ICdEYW5hcycsXG4gIHByZXZNb250aFRleHQ6ICdQcmV0aG9kbmkgbWplc2VjJyxcbiAgbmV4dE1vbnRoVGV4dDogJ1NsamVkZcSHaSBtamVzZWMnLFxuICBwcmV2WWVhclRleHQ6ICdQcmV0aG9kbmkgZ29kaW5hJyxcbiAgbmV4dFllYXJUZXh0OiAnU2xpamVkZcSHZSBnb2RpbmUnLFxuICBjbG9zZVRleHQ6ICdaYXR2b3JpJyxcbiAgZXZlbnRUZXh0OiAnRG9nYcSRYWonLFxuICBldmVudHNUZXh0OiAnZG9nYcSRYWphJyxcbiAgYWxsRGF5VGV4dDogJ0NpamVsaSBkYW4nLFxuICBub0V2ZW50c1RleHQ6ICdCZXogZG9nYcSRYWphJyxcbiAgbW9yZUV2ZW50c1RleHQ6ICdKb8WhIHtjb3VudH0nLFxuICAvLyBEYXRlcmFuZ2UgY29tcG9uZW50XG4gIGZyb21UZXh0OiAnUG/EjWluamUnLFxuICB0b1RleHQ6ICdaYXZyxaFhdmEnLFxuICAvLyBNZWFzdXJlbWVudCBjb21wb25lbnRzXG4gIHdob2xlVGV4dDogJ0NqZWxpbmEnLFxuICBmcmFjdGlvblRleHQ6ICdGcmFrY2lqYScsXG4gIHVuaXRUZXh0OiAnSmVkaW5pY2EnLFxuICAvLyBUaW1lIC8gVGltZXNwYW4gY29tcG9uZW50XG4gIGxhYmVsczogWydnb2RpbmEnLCAnbWplc2VjJywgJ2RhbicsICdzYXQnLCAnbWludXRhJywgJ3Nla3VuZGEnLCAnJ10sXG4gIGxhYmVsc1Nob3J0OiBbJ2dvZCcsICdtamUnLCAnZGFuJywgJ3NhdCcsICdtaW4nLCAnc2VjJywgJyddLFxuICAvLyBUaW1lciBjb21wb25lbnRcbiAgc3RhcnRUZXh0OiAnUG/EjWV0YWsnLFxuICBzdG9wVGV4dDogJ1ByZWtpZCcsXG4gIHJlc2V0VGV4dDogJ1Jlc2V0aXJhaicsXG4gIGxhcFRleHQ6ICdDaWtsdXMnLFxuICBoaWRlVGV4dDogJ1Nha3JpdGknLFxuICAvLyBMaXN0dmlld1xuICBiYWNrVGV4dDogJ05hdHJhZycsXG4gIHVuZG9UZXh0OiAnUG9uacWhdGF2YW5qZScsXG4gIC8vIEZvcm1cbiAgb2ZmVGV4dDogJ1VrbGouJyxcbiAgb25UZXh0OiAnSXNrbGouJyxcbiAgLy8gTnVtcGFkXG4gIGRlY2ltYWxTZXBhcmF0b3I6ICcsJyxcbiAgdGhvdXNhbmRzU2VwYXJhdG9yOiAnICdcbn07XG5cbi8vIE1hZ3lhclxubW9iaXNjcm9sbC5pMThuLmh1ID0ge1xuICAvLyBDb3JlXG4gIHNldFRleHQ6ICdPSycsXG4gIGNhbmNlbFRleHQ6ICdNw6lnc2UnLFxuICBjbGVhclRleHQ6ICdUw7ZybMOpcycsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0ga2l2w6FsYXN6dHZhJyxcbiAgLy8gRGF0ZXRpbWUgY29tcG9uZW50XG4gIGRhdGVGb3JtYXQ6ICd5eS5tbS5kZC4nLFxuICBkYXlOYW1lczogWydWYXPDoXJuYXAnLCAnSMOpdGbFkScsICdLZWRkJywgJ1N6ZXJkYScsICdDc8O8dMO2cnTDtmsnLCAnUMOpbnRlaycsICdTem9tYmF0J10sXG4gIGRheU5hbWVzU2hvcnQ6IFsnVmEnLCAnSMOpJywgJ0tlJywgJ1N6ZScsICdDc8O8JywgJ1DDqScsICdTem8nXSxcbiAgZGF5TmFtZXNNaW46IFsnVicsICdIJywgJ0snLCAnU3onLCAnQ3MnLCAnUCcsICdTeiddLFxuICBkYXlUZXh0OiAnTmFwJyxcbiAgZGVsaW1pdGVyOiAnLicsXG4gIGhvdXJUZXh0OiAnw5NyYScsXG4gIG1pbnV0ZVRleHQ6ICdQZXJjJyxcbiAgbW9udGhOYW1lczogWydKYW51w6FyJywgJ0ZlYnJ1w6FyJywgJ03DoXJjaXVzJywgJ8OBcHJpbGlzJywgJ03DoWp1cycsICdKw7puaXVzJywgJ0rDumxpdXMnLCAnQXVndXN6dHVzJywgJ1N6ZXB0ZW1iZXInLCAnT2t0w7NiZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXSxcbiAgbW9udGhOYW1lc1Nob3J0OiBbJ0phbicsICdGZWInLCAnTcOhcicsICfDgXByJywgJ03DoWonLCAnSsO6bicsICdKw7psJywgJ0F1ZycsICdTemVwJywgJ09rdCcsICdOb3YnLCAnRGVjJ10sXG4gIG1vbnRoVGV4dDogJ0jDs25hcCcsXG4gIHNlY1RleHQ6ICdNw6Fzb2RwZXJjJyxcbiAgdGltZUZvcm1hdDogJ0g6aWknLFxuICB5ZWFyVGV4dDogJ8OJdicsXG4gIG5vd1RleHQ6ICdNb3N0JyxcbiAgcG1UZXh0OiAncG0nLFxuICBhbVRleHQ6ICdhbScsXG4gIC8vIENhbGVuZGFyIGNvbXBvbmVudFxuICBmaXJzdERheTogMSxcbiAgZGF0ZVRleHQ6ICdEw6F0dW0nLFxuICB0aW1lVGV4dDogJ0lkxZEnLFxuICB0b2RheVRleHQ6ICdNYScsXG4gIHByZXZNb250aFRleHQ6ICdFbMWResWRIGjDs25hcCcsXG4gIG5leHRNb250aFRleHQ6ICdLw7Z2ZXRrZXrFkSBow7NuYXAnLFxuICBwcmV2WWVhclRleHQ6ICdFbMWResWRIMOpdicsXG4gIG5leHRZZWFyVGV4dDogJ0vDtnZldGtlesWRIMOpdicsXG4gIGNsb3NlVGV4dDogJ0JlesOhcicsXG4gIGV2ZW50VGV4dDogJ2VzZW3DqW55JyxcbiAgZXZlbnRzVGV4dDogJ2VzZW3DqW55JyxcbiAgYWxsRGF5VGV4dDogJ0Vnw6lzeiBuYXAnLFxuICBub0V2ZW50c1RleHQ6ICdOaW5jcyBlc2Vtw6lueScsXG4gIG1vcmVFdmVudHNUZXh0OiAne2NvdW50fSB0b3bDoWJiaScsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICdFbGVqZScsXG4gIHRvVGV4dDogJ1bDqWdlJyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICdFZ8Opc3onLFxuICBmcmFjdGlvblRleHQ6ICdUw7ZydCcsXG4gIHVuaXRUZXh0OiAnRWd5c8OpZycsXG4gIC8vIFRpbWUgLyBUaW1lc3BhbiBjb21wb25lbnRcbiAgbGFiZWxzOiBbJ8OJdicsICdIw7NuYXAnLCAnTmFwJywgJ8OTcmEnLCAnUGVyYycsICdNw6Fzb2RwZXJjJywgJyddLFxuICBsYWJlbHNTaG9ydDogWyfDiXYnLCAnSMOzLicsICdOYXAnLCAnw5NyYScsICdQZXJjJywgJ01wLicsICcnXSxcbiAgLy8gVGltZXIgY29tcG9uZW50XG4gIHN0YXJ0VGV4dDogJ0luZMOtdCcsXG4gIHN0b3BUZXh0OiAnTWVnw6FsbMOtdCcsXG4gIHJlc2V0VGV4dDogJ1Zpc3N6YcOhbGzDrXQnLFxuICBsYXBUZXh0OiAnTGFwJyxcbiAgaGlkZVRleHQ6ICdFbHJlanQnLFxuICAvLyBMaXN0dmlld1xuICBiYWNrVGV4dDogJ1Zpc3N6YScsXG4gIHVuZG9UZXh0OiAnVmlzc3phdm9uJyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAnS2knLFxuICBvblRleHQ6ICdCZScsXG4gIC8vIE51bXBhZFxuICBkZWNpbWFsU2VwYXJhdG9yOiAnLCcsXG4gIHRob3VzYW5kc1NlcGFyYXRvcjogJyAnXG59O1xuXG4vLyBJdGFsaWFubyBcbm1vYmlzY3JvbGwuaTE4bi5pdCA9IHtcbiAgLy8gQ29yZVxuICBzZXRUZXh0OiAnT0snLFxuICBjYW5jZWxUZXh0OiAnQW5udWxsYScsXG4gIGNsZWFyVGV4dDogJ0NoaWFyaXJlJyxcbiAgc2VsZWN0ZWRUZXh0OiAne2NvdW50fSBzZWxlemlvbmF0bycsXG4gIHNlbGVjdGVkUGx1cmFsVGV4dDogJ3tjb3VudH0gc2VsZXppb25hdGknLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ2RkL21tL3l5JyxcbiAgZGF5TmFtZXM6IFsnRG9tZW5pY2EnLCAnTHVuZWTDrCcsICdNYXJ0ZWTDrCcsICdNZXJjb2xlZMOsJywgJ0dpb3ZlZMOsJywgJ1ZlbmVyZMOsJywgJ1NhYmF0byddLFxuICBkYXlOYW1lc1Nob3J0OiBbJ0RvJywgJ0x1JywgJ01hJywgJ01lJywgJ0dpJywgJ1ZlJywgJ1NhJ10sXG4gIGRheU5hbWVzTWluOiBbJ0QnLCAnTCcsICdNJywgJ00nLCAnRycsICdWJywgJ1MnXSxcbiAgZGF5VGV4dDogJ0dpb3JubycsXG4gIGhvdXJUZXh0OiAnT3JlJyxcbiAgbWludXRlVGV4dDogJ01pbnV0aScsXG4gIG1vbnRoTmFtZXM6IFsnR2VubmFpbycsICdGZWJicmFpbycsICdNYXJ6bycsICdBcHJpbGUnLCAnTWFnZ2lvJywgJ0dpdWdubycsICdMdWdsaW8nLCAnQWdvc3RvJywgJ1NldHRlbWJyZScsICdPdHRvYnJlJywgJ05vdmVtYnJlJywgJ0RpY2VtYnJlJ10sXG4gIG1vbnRoTmFtZXNTaG9ydDogWydHZW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWFnJywgJ0dpdScsICdMdWcnLCAnQWdvJywgJ1NldCcsICdPdHQnLCAnTm92JywgJ0RpYyddLFxuICBtb250aFRleHQ6ICdNZXNlJyxcbiAgc2VjVGV4dDogJ1NlY29uZGknLFxuICB0aW1lRm9ybWF0OiAnSEg6aWknLFxuICB5ZWFyVGV4dDogJ0Fubm8nLFxuICBub3dUZXh0OiAnT3JhJyxcbiAgcG1UZXh0OiAncG0nLFxuICBhbVRleHQ6ICdhbScsXG4gIHRvZGF5VGV4dDogJ09nZ2knLFxuICAvLyBDYWxlbmRhciBjb21wb25lbnRcbiAgZmlyc3REYXk6IDEsXG4gIGRhdGVUZXh0OiAnRGF0YScsXG4gIHRpbWVUZXh0OiAnVm9sdGEnLFxuICBjbG9zZVRleHQ6ICdDaGl1ZGVyZScsXG4gIGFsbERheVRleHQ6ICdUdXR0byBpbCBnaW9ybm8nLFxuICBub0V2ZW50c1RleHQ6ICdOZXNzdW4gZXZlbnRvJyxcbiAgZXZlbnRUZXh0OiAnRXZlbnRvJyxcbiAgZXZlbnRzVGV4dDogJ0V2ZW50aScsXG4gIG1vcmVFdmVudHNUZXh0OiAne2NvdW50fSBhbHRybycsXG4gIG1vcmVFdmVudHNQbHVyYWxUZXh0OiAnYWx0cmkge2NvdW50fScsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICdJbml6aW8nLFxuICB0b1RleHQ6ICdGaW5lJyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICdJbnRlcm8nLFxuICBmcmFjdGlvblRleHQ6ICdGcmF6aW9uZScsXG4gIHVuaXRUZXh0OiAnVW5pdMOgJyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsnQW5uaScsICdNZXNpJywgJ0dpb3JuaScsICdPcmUnLCAnTWludXRpJywgJ1NlY29uZGknLCAnJ10sXG4gIGxhYmVsc1Nob3J0OiBbJ0FubmknLCAnTWVzaScsICdHaW8nLCAnT3JlJywgJ01pbicsICdTZWMnLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICdJbml6aW8nLFxuICBzdG9wVGV4dDogJ0FycmVzdG8nLFxuICByZXNldFRleHQ6ICdSaXByaXN0aW5hJyxcbiAgbGFwVGV4dDogJ0xhcCcsXG4gIGhpZGVUZXh0OiAnTmFzY29uZGknLFxuICAvLyBMaXN0dmlld1xuICBiYWNrVGV4dDogJ0luZGlldHJvJyxcbiAgdW5kb1RleHQ6ICdBbm51bGxhJyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAnVmlhJyxcbiAgb25UZXh0OiAnU3UnLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxuLy8g5pel5pys6KqeIC0gSmFwYW5lc2Vcbm1vYmlzY3JvbGwuaTE4bi5qYSA9IHtcbiAgLy8gQ29yZVxuICBzZXRUZXh0OiAn44K744OD44OIJyxcbiAgY2FuY2VsVGV4dDogJ+OCreODo+ODs+OCu+ODqycsXG4gIGNsZWFyVGV4dDogJ+OCr+ODquOCoicsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0g6YG45oqeJyxcbiAgLy8gRGF0ZXRpbWUgY29tcG9uZW50XG4gIGRhdGVGb3JtYXQ6ICd5eeW5tG1t5pyIZGTml6UnLFxuICBkYXlOYW1lczogWyfml6UnLCAn5pyIJywgJ+eBqycsICfmsLQnLCAn5pyoJywgJ+mHkScsICflnJ8nXSxcbiAgZGF5TmFtZXNTaG9ydDogWyfml6UnLCAn5pyIJywgJ+eBqycsICfmsLQnLCAn5pyoJywgJ+mHkScsICflnJ8nXSxcbiAgZGF5TmFtZXNNaW46IFsn5pelJywgJ+aciCcsICfngasnLCAn5rC0JywgJ+acqCcsICfph5EnLCAn5ZyfJ10sXG4gIGRheVRleHQ6ICfml6UnLFxuICBob3VyVGV4dDogJ+aZgicsXG4gIG1pbnV0ZVRleHQ6ICfliIYnLFxuICBtb250aE5hbWVzOiBbJzHmnIgnLCAnMuaciCcsICcz5pyIJywgJzTmnIgnLCAnNeaciCcsICc25pyIJywgJzfmnIgnLCAnOOaciCcsICc55pyIJywgJzEw5pyIJywgJzEx5pyIJywgJzEy5pyIJ10sXG4gIG1vbnRoTmFtZXNTaG9ydDogWycx5pyIJywgJzLmnIgnLCAnM+aciCcsICc05pyIJywgJzXmnIgnLCAnNuaciCcsICc35pyIJywgJzjmnIgnLCAnOeaciCcsICcxMOaciCcsICcxMeaciCcsICcxMuaciCddLFxuICBtb250aFRleHQ6ICfmnIgnLFxuICBzZWNUZXh0OiAn56eSJyxcbiAgdGltZUZvcm1hdDogJ0hIOmlpJyxcbiAgeWVhclRleHQ6ICflubQnLFxuICBub3dUZXh0OiAn5LuKJyxcbiAgcG1UZXh0OiAn5Y2I5b6MJyxcbiAgYW1UZXh0OiAn5Y2I5YmNJyxcbiAgeWVhclN1ZmZpeDogJ+W5tCcsXG4gIG1vbnRoU3VmZml4OiAn5pyIJyxcbiAgZGF5U3VmZml4OiAn5pelJyxcbiAgdG9kYXlUZXh0OiAn5LuK5pelJyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGRhdGVUZXh0OiAn5pel5LuYJyxcbiAgdGltZVRleHQ6ICfmmYLplpMnLFxuICBjbG9zZVRleHQ6ICfjgq/jg63jg7zjgronLFxuICBhbGxEYXlUZXh0OiAn57WC5pelJyxcbiAgbm9FdmVudHNUZXh0OiAn44Kk44OZ44Oz44OI44Gv44GC44KK44G+44Gb44KTJyxcbiAgZXZlbnRUZXh0OiAn44Kk44OZ44Oz44OIJyxcbiAgZXZlbnRzVGV4dDogJ+OCpOODmeODs+ODiCcsXG4gIG1vcmVFdmVudHNUZXh0OiAn5LuWIHtjb3VudH0g5Lu2JyxcbiAgLy8gRGF0ZXJhbmdlIGNvbXBvbmVudFxuICBmcm9tVGV4dDogJ+mWi+WniycsXG4gIHRvVGV4dDogJ+e1guOCj+OCiicsXG4gIC8vIE1lYXN1cmVtZW50IGNvbXBvbmVudHNcbiAgd2hvbGVUZXh0OiAn5YWo5pWwJyxcbiAgZnJhY3Rpb25UZXh0OiAn5YiG5pWwJyxcbiAgdW5pdFRleHQ6ICfljZjkvY0nLFxuICAvLyBUaW1lIC8gVGltZXNwYW4gY29tcG9uZW50XG4gIGxhYmVsczogWyflubTplpMnLCAn5pyI6ZaTJywgJ+aXpemWkycsICfmmYLplpMnLCAn5YiGJywgJ+enkicsICcnXSxcbiAgbGFiZWxzU2hvcnQ6IFsn5bm06ZaTJywgJ+aciOmWkycsICfml6XplpMnLCAn5pmC6ZaTJywgJ+WIhicsICfnp5InLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICfplovlp4snLFxuICBzdG9wVGV4dDogJ+WBnOatoicsXG4gIHJlc2V0VGV4dDogJ+ODquOCu+ODg+ODiCcsXG4gIGxhcFRleHQ6ICfjg6njg4Pjg5cnLFxuICBoaWRlVGV4dDogJ+maoOOBmScsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAn44OQ44OD44KvJyxcbiAgdW5kb1RleHQ6ICfjgqLjg7Pjg4njgqUnXG59O1xuXG4vLyBLb3JlYW5cbm1vYmlzY3JvbGwuaTE4bi5rbyA9IHtcbiAgLy8gQ29yZVxuICBzZXRUZXh0OiAn7ISk7KCVJyxcbiAgY2FuY2VsVGV4dDogJ+y3qOyGjCcsXG4gIGNsZWFyVGV4dDogJ+yCreygnCcsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0g7ISg7YOd65CcJyxcbiAgLy8gRGF0ZXRpbWUgY29tcG9uZW50XG4gIGRhdGVGb3JtYXQ6ICd5eeuFhG1t7JuUZGTsnbwnLFxuICBkYXlOYW1lczogWyfsnbzsmpTsnbwnLCAn7JuU7JqU7J28JywgJ+2ZlOyalOydvCcsICfsiJjsmpTsnbwnLCAn66qp7JqU7J28JywgJ+q4iOyalOydvCcsICfthqDsmpTsnbwnXSxcbiAgZGF5TmFtZXNTaG9ydDogWyfsnbwnLCAn7JuUJywgJ+2ZlCcsICfsiJgnLCAn66qpJywgJ+q4iCcsICfthqAnXSxcbiAgZGF5TmFtZXNNaW46IFsn7J28JywgJ+yblCcsICftmZQnLCAn7IiYJywgJ+uqqScsICfquIgnLCAn7YagJ10sXG4gIGRheVRleHQ6ICfsnbwnLFxuICBkZWxpbWl0ZXI6ICctJyxcbiAgaG91clRleHQ6ICfsi5zqsIQnLFxuICBtaW51dGVUZXh0OiAn67aEJyxcbiAgbW9udGhOYW1lczogWycx7JuUJywgJzLsm5QnLCAnM+yblCcsICc07JuUJywgJzXsm5QnLCAnNuyblCcsICc37JuUJywgJzjsm5QnLCAnOeyblCcsICcxMOyblCcsICcxMeyblCcsICcxMuyblCddLFxuICBtb250aE5hbWVzU2hvcnQ6IFsnMeyblCcsICcy7JuUJywgJzPsm5QnLCAnNOyblCcsICc17JuUJywgJzbsm5QnLCAnN+yblCcsICc47JuUJywgJznsm5QnLCAnMTDsm5QnLCAnMTHsm5QnLCAnMTLsm5QnXSxcbiAgbW9udGhUZXh0OiAn64usJyxcbiAgc2VjVGV4dDogJ+y0iCcsXG4gIHRpbWVGb3JtYXQ6ICdIOmlpJyxcbiAgeWVhclRleHQ6ICfrhYQnLFxuICBub3dUZXh0OiAn7KeA6riIJyxcbiAgcG1UZXh0OiAn7Jik7ZuEJyxcbiAgYW1UZXh0OiAn7Jik7KCEJyxcbiAgeWVhclN1ZmZpeDogJ+uFhCcsXG4gIG1vbnRoU3VmZml4OiAn7JuUJyxcbiAgZGF5U3VmZml4OiAn7J28JyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGZpcnN0RGF5OiAwLFxuICBkYXRlVGV4dDogJ+uCoOynnCcsXG4gIHRpbWVUZXh0OiAn7Iuc6rCEJyxcbiAgdG9kYXlUZXh0OiAn7Jik64qYJyxcbiAgcHJldk1vbnRoVGV4dDogJ+ydtOyghCDri6wnLFxuICBuZXh0TW9udGhUZXh0OiAn64uk7J2MIOuLrCcsXG4gIHByZXZZZWFyVGV4dDogJ+ydtOyghCDrhYQnLFxuICBuZXh0WWVhclRleHQ6ICfri6TsnYwg64WEJyxcbiAgY2xvc2VUZXh0OiAn64ur6riwJyxcbiAgZXZlbnRUZXh0OiAn7J2067Kk7Yq4JyxcbiAgZXZlbnRzVGV4dDogJ+ydtOuypO2KuCcsXG4gIGFsbERheVRleHQ6ICfsooXsnbwnLFxuICBub0V2ZW50c1RleHQ6ICfsnbTrsqTtirgg7JeG7J2MJyxcbiAgbW9yZUV2ZW50c1RleHQ6ICd7Y291bnR96rCcIOuNlOuztOq4sCcsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICfsi5zsnpEnLFxuICB0b1RleHQ6ICfsooXro4wnLFxuICAvLyBNZWFzdXJlbWVudCBjb21wb25lbnRzXG4gIHdob2xlVGV4dDogJ+ygleyImCcsXG4gIGZyYWN0aW9uVGV4dDogJ+u2hOyImCcsXG4gIHVuaXRUZXh0OiAn64uo7JyEJyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsn64WEJywgJ+uLrCcsICfsnbwnLCAn7Iuc6rCEJywgJ+u2hCcsICfstIgnLCAnJ10sXG4gIGxhYmVsc1Nob3J0OiBbJ+uFhCcsICfri6wnLCAn7J28JywgJ+yLnOqwhCcsICfrtoQnLCAn7LSIJywgJyddLFxuICAvLyBUaW1lciBjb21wb25lbnRcbiAgc3RhcnRUZXh0OiAn7Iuc7J6RJyxcbiAgc3RvcFRleHQ6ICfspJHsp4AgJyxcbiAgcmVzZXRUZXh0OiAn7LSI6riw7ZmUJyxcbiAgbGFwVGV4dDogJ+q4sOuhnScsXG4gIGhpZGVUZXh0OiAn7Iio64qUIOyepeyGjCcsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAn65Kk66GcJyxcbiAgdW5kb1RleHQ6ICfsi6Ttlonst6jshownLFxuICAvLyBGb3JtXG4gIG9mZlRleHQ6ICfrgZQnLFxuICBvblRleHQ6ICfsvKwnLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxuLy8gTGlldHV2acWzXG5tb2Jpc2Nyb2xsLmkxOG4ubHQgPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ09LJyxcbiAgY2FuY2VsVGV4dDogJ0F0xaFhdWt0aScsXG4gIGNsZWFyVGV4dDogJ0nFoXZhbHl0aScsXG4gIHNlbGVjdGVkVGV4dDogJ1Bhc2lyaW5rdGFzIHtjb3VudH0nLFxuICBzZWxlY3RlZFBsdXJhbFRleHQ6ICdQYXNpcmlua3RpIHtjb3VudH0nLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ3l5LW1tLWRkJyxcbiAgZGF5TmFtZXM6IFsnU2VrbWFkaWVuaXMnLCAnUGlybWFkaWVuaXMnLCAnQW50cmFkaWVuaXMnLCAnVHJlxI1pYWRpZW5pcycsICdLZXR2aXJ0YWRpZW5pcycsICdQZW5rdGFkaWVuaXMnLCAnxaBlxaF0YWRpZW5pcyddLFxuICBkYXlOYW1lc1Nob3J0OiBbJ1MnLCAnUHInLCAnQScsICdUJywgJ0snLCAnUG4nLCAnxaAnXSxcbiAgZGF5TmFtZXNNaW46IFsnUycsICdQcicsICdBJywgJ1QnLCAnSycsICdQbicsICfFoCddLFxuICBkYXlUZXh0OiAnRGllbmEnLFxuICBob3VyVGV4dDogJ1ZhbGFuZGEnLFxuICBtaW51dGVUZXh0OiAnTWludXRlcycsXG4gIG1vbnRoTmFtZXM6IFsnU2F1c2lzJywgJ1Zhc2FyaXMnLCAnS292YXMnLCAnQmFsYW5kaXMnLCAnR2VndcW+xJcnLCAnQmlyxb5lbGlzJywgJ0xpZXBhJywgJ1J1Z3Bqxat0aXMnLCAnUnVnc8SXamlzJywgJ1NwYWxpcycsICdMYXBrcml0aXMnLCAnR3J1b2RpcyddLFxuICBtb250aE5hbWVzU2hvcnQ6IFsnU2F1JywgJ1ZhcycsICdLb3YnLCAnQmFsJywgJ0dlZycsICdCaXInLCAnTGllJywgJ1J1Z3AnLCAnUnVncycsICdTcGEnLCAnTGFwJywgJ0dydW8nXSxcbiAgbW9udGhUZXh0OiAnTcSXbnVvJyxcbiAgc2VjVGV4dDogJ1Nla3VuZGVzJyxcbiAgYW1UZXh0OiAnYW0nLFxuICBwbVRleHQ6ICdwbScsXG4gIHRpbWVGb3JtYXQ6ICdISDppaScsXG4gIHllYXJUZXh0OiAnTWV0YWknLFxuICBub3dUZXh0OiAnRGFiYXInLFxuICB0b2RheVRleHQ6ICfFoGlhbmRpZW4nLFxuICAvLyBDYWxlbmRhciBjb21wb25lbnRcbiAgZmlyc3REYXk6IDEsXG4gIGRhdGVUZXh0OiAnRGF0YScsXG4gIHRpbWVUZXh0OiAnTGFpa2FzJyxcbiAgY2xvc2VUZXh0OiAnVcW+ZGFyeXRpJyxcbiAgYWxsRGF5VGV4dDogJ1Zpc8SFIGRpZW7EhScsXG4gIG5vRXZlbnRzVGV4dDogJ07El3JhIMSvdnlracWzJyxcbiAgZXZlbnRUZXh0OiAnxK52eWtpxbMnLFxuICBldmVudHNUZXh0OiAnxK52eWtpYWknLFxuICBtb3JlRXZlbnRzVGV4dDogJ0RhciB7Y291bnR9JyxcbiAgLy8gRGF0ZXJhbmdlIGNvbXBvbmVudFxuICBmcm9tVGV4dDogJ051bycsXG4gIHRvVGV4dDogJ0lraScsXG4gIC8vIE1lYXN1cmVtZW50IGNvbXBvbmVudHNcbiAgd2hvbGVUZXh0OiAnVmlzYXMnLFxuICBmcmFjdGlvblRleHQ6ICdGcmFrY2lqYScsXG4gIHVuaXRUZXh0OiAnVmllbmV0YXMnLFxuICAvLyBUaW1lIC8gVGltZXNwYW4gY29tcG9uZW50XG4gIGxhYmVsczogWydNZXRhaScsICdNxJduZXNpYWknLCAnRGllbm9zJywgJ1ZhbGFuZG9zJywgJ01pbnV0ZXMnLCAnU2VrdW5kZXMnLCAnJ10sXG4gIGxhYmVsc1Nob3J0OiBbJ20nLCAnbcSXbi4nLCAnZCcsICdoJywgJ21pbicsICdzJywgJyddLFxuICAvLyBUaW1lciBjb21wb25lbnRcbiAgc3RhcnRUZXh0OiAnUHJhZMSXdGknLFxuICBzdG9wVGV4dDogJ1N1c3RhYmR5dGknLFxuICByZXNldFRleHQ6ICdJxaFuYXVqbycsXG4gIGxhcFRleHQ6ICdSYXRhcycsXG4gIGhpZGVUZXh0OiAnU2zEl3B0aScsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAnQXRnYWwnLFxuICB1bmRvVGV4dDogJ0FudWxpdW90aScsXG4gIC8vIEZvcm1cbiAgb2ZmVGV4dDogJ0nFoWouJyxcbiAgb25UZXh0OiAnxK5qLicsXG4gIC8vIE51bXBhZFxuICBkZWNpbWFsU2VwYXJhdG9yOiAnLCcsXG4gIHRob3VzYW5kc1NlcGFyYXRvcjogJyAnXG59O1xuXG4vLyBOZWRlcmxhbmRzXG5tb2Jpc2Nyb2xsLmkxOG4ubmwgPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ0luc3RlbGxlbicsXG4gIGNhbmNlbFRleHQ6ICdBbm51bGVyZW4nLFxuICBjbGVhclRleHQ6ICdMZWVnbWFrZW4nLFxuICBzZWxlY3RlZFRleHQ6ICd7Y291bnR9IGdla296ZW4nLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ2RkLW1tLXl5JyxcbiAgZGF5TmFtZXM6IFsnWm9uZGFnJywgJ01hYW5kYWcnLCAnRGluc2RhZycsICdXb2Vuc2RhZycsICdEb25kZXJkYWcnLCAnVnJpamRhZycsICdaYXRlcmRhZyddLFxuICBkYXlOYW1lc1Nob3J0OiBbJ3pvJywgJ21hJywgJ2RpJywgJ3dvJywgJ2RvJywgJ3ZyJywgJ3phJ10sXG4gIGRheU5hbWVzTWluOiBbJ3onLCAnbScsICdkJywgJ3cnLCAnZCcsICd2JywgJ3onXSxcbiAgZGF5VGV4dDogJ0RhZycsXG4gIGhvdXJUZXh0OiAnVXVyJyxcbiAgbWludXRlVGV4dDogJ01pbnV0ZW4nLFxuICBtb250aE5hbWVzOiBbJ2phbnVhcmknLCAnZmVicnVhcmknLCAnbWFhcnQnLCAnYXByaWwnLCAnbWVpJywgJ2p1bmknLCAnanVsaScsICdhdWd1c3R1cycsICdzZXB0ZW1iZXInLCAnb2t0b2JlcicsICdub3ZlbWJlcicsICdkZWNlbWJlciddLFxuICBtb250aE5hbWVzU2hvcnQ6IFsnamFuJywgJ2ZlYicsICdtcnQnLCAnYXByJywgJ21laScsICdqdW4nLCAnanVsJywgJ2F1ZycsICdzZXAnLCAnb2t0JywgJ25vdicsICdkZWMnXSxcbiAgbW9udGhUZXh0OiAnTWFhbmQnLFxuICBzZWNUZXh0OiAnU2Vjb25kZW4nLFxuICB0aW1lRm9ybWF0OiAnSEg6aWknLFxuICB5ZWFyVGV4dDogJ0phYXInLFxuICBub3dUZXh0OiAnTnUnLFxuICBwbVRleHQ6ICdwbScsXG4gIGFtVGV4dDogJ2FtJyxcbiAgdG9kYXlUZXh0OiAnVmFuZGFhZycsXG4gIC8vIENhbGVuZGFyIGNvbXBvbmVudFxuICBmaXJzdERheTogMSxcbiAgZGF0ZVRleHQ6ICdEYXR1bScsXG4gIHRpbWVUZXh0OiAnVGlqZCcsXG4gIGNsb3NlVGV4dDogJ1NsdWl0ZW4nLFxuICBhbGxEYXlUZXh0OiAnSGVsZSBkYWcnLFxuICBub0V2ZW50c1RleHQ6ICdHZWVuIGFjdGl2aXRlaXRlbicsXG4gIGV2ZW50VGV4dDogJ0FjdGl2aXRlaXQnLFxuICBldmVudHNUZXh0OiAnQWN0aXZpdGVpdGVuJyxcbiAgbW9yZUV2ZW50c1RleHQ6ICdub2cge2NvdW50fScsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICdTdGFydCcsXG4gIHRvVGV4dDogJ0VpbmRlJyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICdnZWhlZWwnLFxuICBmcmFjdGlvblRleHQ6ICdmcmFjdGllJyxcbiAgdW5pdFRleHQ6ICdlZW5oZWlkJyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsnSmFyZW4nLCAnTWFhbmRlbicsICdEYWdlbicsICdVcmVuJywgJ01pbnV0ZW4nLCAnU2Vjb25kZW4nLCAnJ10sXG4gIGxhYmVsc1Nob3J0OiBbJ2onLCAnbScsICdkJywgJ3UnLCAnbWluJywgJ3NlYycsICcnXSxcbiAgLy8gVGltZXIgY29tcG9uZW50XG4gIHN0YXJ0VGV4dDogJ1N0YXJ0JyxcbiAgc3RvcFRleHQ6ICdTdG9wJyxcbiAgcmVzZXRUZXh0OiAnUmVzZXQnLFxuICBsYXBUZXh0OiAnUm9uZGUnLFxuICBoaWRlVGV4dDogJ1ZlcmJlcmdlbicsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAnVGVydWcnLFxuICB1bmRvVGV4dDogJ09uZ2VkLiBtYWtlbicsXG4gIC8vIEZvcm1cbiAgb2ZmVGV4dDogJ1VpdCcsXG4gIG9uVGV4dDogJ0FhbicsXG4gIC8vIE51bXBhZFxuICBkZWNpbWFsU2VwYXJhdG9yOiAnLCcsXG4gIHRob3VzYW5kc1NlcGFyYXRvcjogJyAnXG59O1xuXG4vLyBOb3Jza1xubW9iaXNjcm9sbC5pMThuLm5vID0ge1xuICAvLyBDb3JlXG4gIHNldFRleHQ6ICdPSycsXG4gIGNhbmNlbFRleHQ6ICdBdmJyeXQnLFxuICBjbGVhclRleHQ6ICdUw7htbWUnLFxuICBzZWxlY3RlZFRleHQ6ICd7Y291bnR9IHZhbGd0JyxcbiAgLy8gRGF0ZXRpbWUgY29tcG9uZW50XG4gIGRhdGVGb3JtYXQ6ICdkZC5tbS55eScsXG4gIGRheU5hbWVzOiBbJ1PDuG5kYWcnLCAnTWFuZGFnJywgJ1RpcnNkYWcnLCAnT25zZGFnJywgJ1RvcnNkYWcnLCAnRnJlZGFnJywgJ0zDuHJkYWcnXSxcbiAgZGF5TmFtZXNTaG9ydDogWydTw7gnLCAnTWEnLCAnVGknLCAnT24nLCAnVG8nLCAnRnInLCAnTMO4J10sXG4gIGRheU5hbWVzTWluOiBbJ1MnLCAnTScsICdUJywgJ08nLCAnVCcsICdGJywgJ0wnXSxcbiAgZGF5VGV4dDogJ0RhZycsXG4gIGRlbGltaXRlcjogJy4nLFxuICBob3VyVGV4dDogJ1RpbWUnLFxuICBtaW51dGVUZXh0OiAnTWludXR0JyxcbiAgbW9udGhOYW1lczogWydKYW51YXInLCAnRmVicnVhcicsICdNYXJzJywgJ0FwcmlsJywgJ01haScsICdKdW5pJywgJ0p1bGknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPa3RvYmVyJywgJ05vdmVtYmVyJywgJ0Rlc2VtYmVyJ10sXG4gIG1vbnRoTmFtZXNTaG9ydDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWFpJywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPa3QnLCAnTm92JywgJ0RlcyddLFxuICBtb250aFRleHQ6ICdNw6VuZWQnLFxuICBzZWNUZXh0OiAnU2VrdW5kJyxcbiAgdGltZUZvcm1hdDogJ0hIOmlpJyxcbiAgeWVhclRleHQ6ICfDhXInLFxuICBub3dUZXh0OiAnTsOlJyxcbiAgcG1UZXh0OiAncG0nLFxuICBhbVRleHQ6ICdhbScsXG4gIHRvZGF5VGV4dDogJ0kgZGFnJyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGZpcnN0RGF5OiAxLFxuICBkYXRlVGV4dDogJ0RhdG8nLFxuICB0aW1lVGV4dDogJ1RpZCcsXG4gIGNsb3NlVGV4dDogJ0x1a2snLFxuICBhbGxEYXlUZXh0OiAnSGVsZSBkYWdlbicsXG4gIG5vRXZlbnRzVGV4dDogJ0luZ2VuIGhlbmRlbHNlcicsXG4gIGV2ZW50VGV4dDogJ0hlbmRlbHNlJyxcbiAgZXZlbnRzVGV4dDogJ0hlbmRlbHNlcicsXG4gIG1vcmVFdmVudHNUZXh0OiAne2NvdW50fSBtZXJlJyxcbiAgLy8gRGF0ZXJhbmdlIGNvbXBvbmVudFxuICBmcm9tVGV4dDogJ1N0YXJ0JyxcbiAgdG9UZXh0OiAnRW5kJyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICdIZWxlJyxcbiAgZnJhY3Rpb25UZXh0OiAnRnJha3Nqb24nLFxuICB1bml0VGV4dDogJ0VuaGV0JyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsnw4VyJywgJ03DpW5lZGVyJywgJ0RhZ2VyJywgJ1RpbWVyJywgJ01pbnV0dGVyJywgJ1Nla3VuZGVyJywgJyddLFxuICBsYWJlbHNTaG9ydDogWyfDhXInLCAnTcOlbicsICdEYWcnLCAnVGltZScsICdNaW4nLCAnU2VrJywgJyddLFxuICAvLyBUaW1lciBjb21wb25lbnRcbiAgc3RhcnRUZXh0OiAnU3RhcnQnLFxuICBzdG9wVGV4dDogJ1N0b3BwJyxcbiAgcmVzZXRUZXh0OiAnVGlsYmFrZXN0aWxsZScsXG4gIGxhcFRleHQ6ICdSdW5kZScsXG4gIGhpZGVUZXh0OiAnU2tqdWwnLFxuICAvLyBMaXN0dmlld1xuICBiYWNrVGV4dDogJ1RpbGJha2UnLFxuICB1bmRvVGV4dDogJ0FuZ3JlJyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAnQXYnLFxuICBvblRleHQ6ICdQw6UnLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxuLy8gUG9sc2tpXG5tb2Jpc2Nyb2xsLmkxOG4ucGwgPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ1plc3RhdycsXG4gIGNhbmNlbFRleHQ6ICdBbnVsdWonLFxuICBjbGVhclRleHQ6ICdPY3p5xZtjacSHJyxcbiAgc2VsZWN0ZWRUZXh0OiAnV3liw7NyOiB7Y291bnR9JyxcbiAgLy8gRGF0ZXRpbWUgY29tcG9uZW50XG4gIGRhdGVGb3JtYXQ6ICd5eS1tbS1kZCcsXG4gIGRheU5hbWVzOiBbJ05pZWR6aWVsYScsICdQb25pZWR6aWHFgmVrJywgJ1d0b3JlaycsICfFmnJvZGEnLCAnQ3p3YXJ0ZWsnLCAnUGnEhXRlaycsICdTb2JvdGEnXSxcbiAgZGF5TmFtZXNTaG9ydDogWydOaWVkei4nLCAnUG9uLicsICdXdC4nLCAnxZpyLicsICdDencuJywgJ1B0LicsICdTb2IuJ10sXG4gIGRheU5hbWVzTWluOiBbJ04nLCAnUCcsICdXJywgJ8WaJywgJ0MnLCAnUCcsICdTJ10sXG4gIGRheVRleHQ6ICdEemllxYQnLFxuICBob3VyVGV4dDogJ0dvZHppbnknLFxuICBtaW51dGVUZXh0OiAnTWludXR5JyxcbiAgbW9udGhOYW1lczogWydTdHljemXFhCcsICdMdXR5JywgJ01hcnplYycsICdLd2llY2llxYQnLCAnTWFqJywgJ0N6ZXJ3aWVjJywgJ0xpcGllYycsICdTaWVycGllxYQnLCAnV3J6ZXNpZcWEJywgJ1Bhxbpkemllcm5paycsICdMaXN0b3BhZCcsICdHcnVkemllxYQnXSxcbiAgbW9udGhOYW1lc1Nob3J0OiBbJ1N0eScsICdMdXQnLCAnTWFyJywgJ0t3aScsICdNYWonLCAnQ3plJywgJ0xpcCcsICdTaWUnLCAnV3J6JywgJ1BhxbonLCAnTGlzJywgJ0dydSddLFxuICBtb250aFRleHQ6ICdNaWVzacSFYycsXG4gIHNlY1RleHQ6ICdTZWt1bmR5JyxcbiAgdGltZUZvcm1hdDogJ0hIOmlpJyxcbiAgeWVhclRleHQ6ICdSb2snLFxuICBub3dUZXh0OiAnVGVyYXonLFxuICBhbVRleHQ6ICdhbScsXG4gIHBtVGV4dDogJ3BtJyxcbiAgdG9kYXlUZXh0OiAnRHppc2lhaicsXG4gIC8vIENhbGVuZGFyIGNvbXBvbmVudFxuICBmaXJzdERheTogMSxcbiAgZGF0ZVRleHQ6ICdEYXRhJyxcbiAgdGltZVRleHQ6ICdDemFzJyxcbiAgY2xvc2VUZXh0OiAnWmFrb8WEY3plbmllJyxcbiAgYWxsRGF5VGV4dDogJ0NhxYJ5IGR6aWXFhCcsXG4gIG5vRXZlbnRzVGV4dDogJ0JyYWsgd3lkYXJ6ZcWEJyxcbiAgZXZlbnRUZXh0OiAnV3lkYXJ6ZcWEJyxcbiAgZXZlbnRzVGV4dDogJ1d5ZGFyemVuaWEnLFxuICBtb3JlRXZlbnRzVGV4dDogJ0plc3pjemUge2NvdW50fScsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICdSb3pwb2N6xJljaWUnLFxuICB0b1RleHQ6ICdLb25pZWMnLFxuICAvLyBNZWFzdXJlbWVudCBjb21wb25lbnRzXG4gIHdob2xlVGV4dDogJ0NhxYJ5JyxcbiAgZnJhY3Rpb25UZXh0OiAnVcWCYW1laycsXG4gIHVuaXRUZXh0OiAnSmVkbm9zdGthJyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsnTGF0YScsICdNaWVzacSFYycsICdEbmknLCAnR29kemlueScsICdNaW51dHknLCAnU2VrdW5keScsICcnXSxcbiAgbGFiZWxzU2hvcnQ6IFsnUicsICdNJywgJ0R6JywgJ0dvZHonLCAnTWluJywgJ1NlaycsICcnXSxcbiAgLy8gVGltZXIgY29tcG9uZW50XG4gIHN0YXJ0VGV4dDogJ1JvenBvY3rEmWNpZScsXG4gIHN0b3BUZXh0OiAnWmF0cnp5bWHEhycsXG4gIHJlc2V0VGV4dDogJ1pyZXNldG93YcSHJyxcbiAgbGFwVGV4dDogJ1pha8WCYWRrYScsXG4gIGhpZGVUZXh0OiAnVWtyecSHJyxcbiAgLy8gTGlzdHZpZXdcbiAgYmFja1RleHQ6ICdXcsOzxIcnLFxuICB1bmRvVGV4dDogJ0NvZm5paicsXG4gIC8vIEZvcm1cbiAgb2ZmVGV4dDogJ1d5xYInLFxuICBvblRleHQ6ICdXxYInLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxuLy8gUG9ydHVndcOqcyBCcmFzaWxlaXJvXG5tb2Jpc2Nyb2xsLmkxOG5bJ3B0LUJSJ10gPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ1NlbGVjaW9uYXInLFxuICBjYW5jZWxUZXh0OiAnQ2FuY2VsYXInLFxuICBjbGVhclRleHQ6ICdDbGFybycsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0gc2VsZWNpb25hZG8nLFxuICBzZWxlY3RlZFBsdXJhbFRleHQ6ICd7Y291bnR9IHNlbGVjaW9uYWRvcycsXG4gIC8vIERhdGV0aW1lIGNvbXBvbmVudFxuICBkYXRlRm9ybWF0OiAnZGQvbW0veXknLFxuICBkYXlOYW1lczogWydEb21pbmdvJywgJ1NlZ3VuZGEtZmVpcmEnLCAnVGVyw6dhLWZlaXJhJywgJ1F1YXJ0YS1mZWlyYScsICdRdWludGEtZmVpcmEnLCAnU2V4dGEtZmVpcmEnLCAnU8OhYmFkbyddLFxuICBkYXlOYW1lc1Nob3J0OiBbJ0RvbScsICdTZWcnLCAnVGVyJywgJ1F1YScsICdRdWknLCAnU2V4JywgJ1PDoWInXSxcbiAgZGF5TmFtZXNNaW46IFsnRCcsICdTJywgJ1QnLCAnUScsICdRJywgJ1MnLCAnUyddLFxuICBkYXlUZXh0OiAnRGlhJyxcbiAgaG91clRleHQ6ICdIb3JhJyxcbiAgbWludXRlVGV4dDogJ01pbnV0b3MnLFxuICBtb250aE5hbWVzOiBbJ0phbmVpcm8nLCAnRmV2ZXJlaXJvJywgJ01hcsOnbycsICdBYnJpbCcsICdNYWlvJywgJ0p1bmhvJywgJ0p1bGhvJywgJ0Fnb3N0bycsICdTZXRlbWJybycsICdPdXR1YnJvJywgJ05vdmVtYnJvJywgJ0RlemVtYnJvJ10sXG4gIG1vbnRoTmFtZXNTaG9ydDogWydKYW4nLCAnRmV2JywgJ01hcicsICdBYnInLCAnTWFpJywgJ0p1bicsICdKdWwnLCAnQWdvJywgJ1NldCcsICdPdXQnLCAnTm92JywgJ0RleiddLFxuICBtb250aFRleHQ6ICdNw6pzJyxcbiAgc2VjVGV4dDogJ1NlZ3VuZG8nLFxuICB0aW1lRm9ybWF0OiAnSEg6aWknLFxuICB5ZWFyVGV4dDogJ0FubycsXG4gIG5vd1RleHQ6ICdBZ29yYScsXG4gIHBtVGV4dDogJ3BtJyxcbiAgYW1UZXh0OiAnYW0nLFxuICB0b2RheVRleHQ6ICdIb2plJyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGRhdGVUZXh0OiAnRGF0YScsXG4gIHRpbWVUZXh0OiAnVGVtcG8nLFxuICBjbG9zZVRleHQ6ICdGZWNoYXInLFxuICBhbGxEYXlUZXh0OiAnRGlhIGludGVpcm8nLFxuICBub0V2ZW50c1RleHQ6ICdOZW5odW0gZXZlbnRvJyxcbiAgZXZlbnRUZXh0OiAnRXZlbnRvJyxcbiAgZXZlbnRzVGV4dDogJ0V2ZW50b3MnLFxuICBtb3JlRXZlbnRzVGV4dDogJ01haXMge2NvdW50fScsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICdJbiZpYWN1dGU7Y2lvJyxcbiAgdG9UZXh0OiAnRmltJyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICdJbnRlaXJvJyxcbiAgZnJhY3Rpb25UZXh0OiAnRnJhw6fDo28nLFxuICB1bml0VGV4dDogJ1VuaWRhZGUnLFxuICAvLyBUaW1lIC8gVGltZXNwYW4gY29tcG9uZW50XG4gIGxhYmVsczogWydBbm9zJywgJ01lc2VzJywgJ0RpYXMnLCAnSG9yYXMnLCAnTWludXRvcycsICdTZWd1bmRvcycsICcnXSxcbiAgbGFiZWxzU2hvcnQ6IFsnQW5vJywgJ00mZWNpcmM7cycsICdEaWEnLCAnSG9yYScsICdNaW4nLCAnU2VnJywgJyddLFxuICAvLyBUaW1lciBjb21wb25lbnRcbiAgc3RhcnRUZXh0OiAnQ29tZcOnYXInLFxuICBzdG9wVGV4dDogJ1BhcmUnLFxuICByZXNldFRleHQ6ICdSZWluaWNpYWxpemFyJyxcbiAgbGFwVGV4dDogJ0xhcCcsXG4gIGhpZGVUZXh0OiAnRXNjb25kZXInLFxuICAvLyBMaXN0dmlld1xuICBiYWNrVGV4dDogJ0FudGVyaW9yJyxcbiAgdW5kb1RleHQ6ICdEZXNmYXplcicsXG4gIC8vIEZvcm1cbiAgb2ZmVGV4dDogJ0Rlc2wnLFxuICBvblRleHQ6ICdMaWcnLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxuLy8gUG9ydHVndcOqcyBFdXJvcGV1XG5tb2Jpc2Nyb2xsLmkxOG5bJ3B0LVBUJ10gPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ1NlbGVjY2lvbmFyJyxcbiAgY2FuY2VsVGV4dDogJ0NhbmNlbGFyJyxcbiAgY2xlYXJUZXh0OiAnQ2xhcm8nLFxuICBzZWxlY3RlZFRleHQ6ICd7Y291bnR9IHNlbGVjaW9uYWRvJyxcbiAgc2VsZWN0ZWRQbHVyYWxUZXh0OiAne2NvdW50fSBzZWxlY2lvbmFkb3MnLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ2RkLW1tLXl5JyxcbiAgZGF5TmFtZXM6IFsnRG9taW5nbycsICdTZWd1bmRhLWZlaXJhJywgJ1RlcsOnYS1mZWlyYScsICdRdWFydGEtZmVpcmEnLCAnUXVpbnRhLWZlaXJhJywgJ1NleHRhLWZlaXJhJywgJ1PDoWJhZG8nXSxcbiAgZGF5TmFtZXNTaG9ydDogWydEb20nLCAnU2VnJywgJ1RlcicsICdRdWEnLCAnUXVpJywgJ1NleCcsICdTw6FiJ10sXG4gIGRheU5hbWVzTWluOiBbJ0QnLCAnUycsICdUJywgJ1EnLCAnUScsICdTJywgJ1MnXSxcbiAgZGF5VGV4dDogJ0RpYScsXG4gIGhvdXJUZXh0OiAnSG9yYXMnLFxuICBtaW51dGVUZXh0OiAnTWludXRvcycsXG4gIG1vbnRoTmFtZXM6IFsnSmFuZWlybycsICdGZXZlcmVpcm8nLCAnTWFyw6dvJywgJ0FicmlsJywgJ01haW8nLCAnSnVuaG8nLCAnSnVsaG8nLCAnQWdvc3RvJywgJ1NldGVtYnJvJywgJ091dHVicm8nLCAnTm92ZW1icm8nLCAnRGV6ZW1icm8nXSxcbiAgbW9udGhOYW1lc1Nob3J0OiBbJ0phbicsICdGZXYnLCAnTWFyJywgJ0FicicsICdNYWknLCAnSnVuJywgJ0p1bCcsICdBZ28nLCAnU2V0JywgJ091dCcsICdOb3YnLCAnRGV6J10sXG4gIG1vbnRoVGV4dDogJ03DqnMnLFxuICBzZWNUZXh0OiAnU2VndW5kbycsXG4gIHRpbWVGb3JtYXQ6ICdISDppaScsXG4gIHllYXJUZXh0OiAnQW5vJyxcbiAgbm93VGV4dDogJ0FjdHVhbGl6YXInLFxuICBwbVRleHQ6ICdwbScsXG4gIGFtVGV4dDogJ2FtJyxcbiAgdG9kYXlUZXh0OiAnSG95JyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGZpcnN0RGF5OiAxLFxuICBkYXRlVGV4dDogJ0RhdGEnLFxuICB0aW1lVGV4dDogJ1RlbXBvJyxcbiAgY2xvc2VUZXh0OiAnRmVjaGFyJyxcbiAgYWxsRGF5VGV4dDogJ1RvZG8gbyBkaWEnLFxuICBub0V2ZW50c1RleHQ6ICdOZW5odW0gZXZlbnRvJyxcbiAgZXZlbnRUZXh0OiAnRXZlbnRvJyxcbiAgZXZlbnRzVGV4dDogJ0V2ZW50b3MnLFxuICBtb3JlRXZlbnRzVGV4dDogJ21haXMge2NvdW50fScsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICdJbsOtY2lvJyxcbiAgdG9UZXh0OiAnRmltJyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICdJbnRlaXJvJyxcbiAgZnJhY3Rpb25UZXh0OiAnRnJhY8Onw6NvJyxcbiAgdW5pdFRleHQ6ICdVbmlkYWRlJyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsnQW5vcycsICdNZXNlcycsICdEaWFzJywgJ0hvcmFzJywgJ01pbnV0b3MnLCAnU2VndW5kb3MnLCAnJ10sXG4gIGxhYmVsc1Nob3J0OiBbJ0FubycsICdNw6pzJywgJ0RpYScsICdIb3JhJywgJ01pbicsICdTZWcnLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICdDb21lw6dhcicsXG4gIHN0b3BUZXh0OiAnUGFyYXInLFxuICByZXNldFRleHQ6ICdSZWluaWNpYWxpemFyJyxcbiAgbGFwVGV4dDogJ0xhcCcsXG4gIGhpZGVUZXh0OiAnRXNjb25kZXInLFxuICAvLyBMaXN0dmlld1xuICBiYWNrVGV4dDogJ0FudGVyaW9yJyxcbiAgdW5kb1RleHQ6ICdBbnVsYXInLFxuICAvLyBGb3JtXG4gIG9mZlRleHQ6ICdEZXNsJyxcbiAgb25UZXh0OiAnTGlnJyxcbiAgLy8gTnVtcGFkXG4gIGRlY2ltYWxTZXBhcmF0b3I6ICcsJyxcbiAgdGhvdXNhbmRzU2VwYXJhdG9yOiAnICdcbn07XG5cbi8vIFJvbcOibsSDXG5tb2Jpc2Nyb2xsLmkxOG4ucm8gPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ1NldGFyZScsXG4gIGNhbmNlbFRleHQ6ICdBbnVsYXJlJyxcbiAgY2xlYXJUZXh0OiAnxZ50ZXJnZXJlJyxcbiAgc2VsZWN0ZWRUZXh0OiAne2NvdW50fSBzZWxlY3RhdCcsXG4gIHNlbGVjdGVkUGx1cmFsVGV4dDogJ3tjb3VudH0gc2VsZWN0YXRlJyxcbiAgLy8gRGF0ZXRpbWUgY29tcG9uZW50XG4gIGRhdGVGb3JtYXQ6ICdkZC5tbS55eScsXG4gIGRheU5hbWVzOiBbJ0R1bWluaWPEgycsICdMdW5pJywgJ01hcsibaScsICdNaWVyY3VyaScsICdKb2knLCAnVmluZXJpJywgJ1PDom1ixIN0xIMnXSxcbiAgZGF5TmFtZXNTaG9ydDogWydEdScsICdMdScsICdNYScsICdNaScsICdKbycsICdWaScsICdTw6InXSxcbiAgZGF5TmFtZXNNaW46IFsnRCcsICdMJywgJ00nLCAnTScsICdKJywgJ1YnLCAnUyddLFxuICBkYXlUZXh0OiAnIFppdWEnLFxuICBkZWxpbWl0ZXI6ICcuJyxcbiAgaG91clRleHQ6ICcgT3JlICcsXG4gIG1pbnV0ZVRleHQ6ICdNaW51dGUnLFxuICBtb250aE5hbWVzOiBbJ0lhbnVhcmllJywgJ0ZlYnJ1YXJpZScsICdNYXJ0aWUnLCAnQXByaWxpZScsICdNYWknLCAnSXVuaWUnLCAnSXVsaWUnLCAnQXVndXN0JywgJ1NlcHRlbWJyaWUnLCAnT2N0b21icmllJywgJ05vaWVtYnJpZScsICdEZWNlbWJyaWUnXSxcbiAgbW9udGhOYW1lc1Nob3J0OiBbJ0lhbi4nLCAnRmViLicsICdNYXIuJywgJ0Fwci4nLCAnTWFpJywgJ0l1bi4nLCAnSXVsLicsICdBdWcuJywgJ1NlcHQuJywgJ09jdC4nLCAnTm92LicsICdEZWMuJ10sXG4gIG1vbnRoVGV4dDogJ0x1bmEnLFxuICBzZWNUZXh0OiAnU2VjdW5kZScsXG4gIHRpbWVGb3JtYXQ6ICdISDppaScsXG4gIHllYXJUZXh0OiAnQW51bCcsXG4gIG5vd1RleHQ6ICdBY3VtJyxcbiAgYW1UZXh0OiAnYW0nLFxuICBwbVRleHQ6ICdwbScsXG4gIHRvZGF5VGV4dDogJ0FzdMSDemknLFxuICBwcmV2TW9udGhUZXh0OiAnTHVuYSBhbnRlcmlvYXLEgycsXG4gIG5leHRNb250aFRleHQ6ICdMdW5hIHVybcSDdG9hcmUnLFxuICBwcmV2WWVhclRleHQ6ICdBbnVsIGFudGVyaW9yJyxcbiAgbmV4dFllYXJUZXh0OiAnQW51bCB1cm3Eg3RvcicsXG4gIGV2ZW50VGV4dDogJ0V2ZW5pbWVudCcsXG4gIGV2ZW50c1RleHQ6ICdFdmVuaW1lbnRlJyxcbiAgYWxsRGF5VGV4dDogJ1RvYXTEgyB6aXVhJyxcbiAgbm9FdmVudHNUZXh0OiAnTmljaXVuIGV2ZW5pbWVudCcsXG4gIG1vcmVFdmVudHNUZXh0OiAnw45uY8SDIHVudWwnLFxuICBtb3JlRXZlbnRzUGx1cmFsVGV4dDogJ8OObmPEgyB7Y291bnR9JyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGZpcnN0RGF5OiAxLFxuICBkYXRlVGV4dDogJ0RhdGEnLFxuICB0aW1lVGV4dDogJ09yYScsXG4gIGNsb3NlVGV4dDogJ8OObmNoaWRlcmUnLFxuICAvLyBEYXRlcmFuZ2UgY29tcG9uZW50XG4gIGZyb21UZXh0OiAnU3RhcnQnLFxuICB0b1RleHQ6ICdGaW5hbCcsXG4gIC8vIE1lYXN1cmVtZW50IGNvbXBvbmVudHNcbiAgd2hvbGVUZXh0OiAnQ29tcGxldCcsXG4gIGZyYWN0aW9uVGV4dDogJ1BhcsWjaWFsJyxcbiAgdW5pdFRleHQ6ICdVbml0YXRlJyxcbiAgLy8gVGltZSAvIFRpbWVzcGFuIGNvbXBvbmVudFxuICBsYWJlbHM6IFsnQW5pJywgJ0x1bmknLCAnWmlsZScsICdPcmUnLCAnTWludXRlJywgJ1NlY3VuZGUnLCAnJ10sXG4gIGxhYmVsc1Nob3J0OiBbJ0FuaScsICdMdW5pJywgJ1ppbGUnLCAnT3JlJywgJ01pbi4nLCAnU2VjLicsICcnXSxcbiAgLy8gVGltZXIgY29tcG9uZW50XG4gIHN0YXJ0VGV4dDogJ1N0YXJ0JyxcbiAgc3RvcFRleHQ6ICdTdG9wJyxcbiAgcmVzZXRUZXh0OiAnUmVzZXRhcmUnLFxuICBsYXBUZXh0OiAnVHVyxIMnLFxuICBoaWRlVGV4dDogJ0FzY3VuZGVyZScsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAnw45uYXBvaScsXG4gIHVuZG9UZXh0OiAnQW51bGVhesSDJyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAnTnUnLFxuICBvblRleHQ6ICdEYScsXG4gIC8vIE51bXBhZFxuICBkZWNpbWFsU2VwYXJhdG9yOiAnLCcsXG4gIHRob3VzYW5kc1NlcGFyYXRvcjogJyAnXG59O1xuXG4vLyDQoNGD0YHRgdC60LjQuSAoVUEpXG5tb2Jpc2Nyb2xsLmkxOG5bJ3J1LVVBJ10gPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ9Cj0YHRgtCw0L3QvtCy0LjRgtGMJyxcbiAgY2FuY2VsVGV4dDogJ9Ce0YLQvNC10L3QuNGC0YwnLFxuICBjbGVhclRleHQ6ICfQntGH0LjRgdGC0LjRgtGMcicsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0g0JLRltCx0YDQsNGC0YwnLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ2RkLm1tLnl5JyxcbiAgZGF5TmFtZXM6IFsn0LLQvtGB0LrRgNC10YHQtdC90YzQtScsICfQv9C+0L3QtdC00LXQu9GM0L3QuNC6JywgJ9Cy0YLQvtGA0L3QuNC6JywgJ9GB0YDQtdC00LAnLCAn0YfQtdGC0LLQtdGA0LMnLCAn0L/Rj9GC0L3QuNGG0LAnLCAn0YHRg9Cx0LHQvtGC0LAnXSxcbiAgZGF5TmFtZXNTaG9ydDogWyfQstGBJywgJ9C/0L0nLCAn0LLRgicsICfRgdGAJywgJ9GH0YInLCAn0L/RgicsICfRgdCxJ10sXG4gIGRheU5hbWVzTWluOiBbJ9CyJywgJ9C/JywgJ9CyJywgJ9GBJywgJ9GHJywgJ9C/JywgJ9GBJ10sXG4gIGRheVRleHQ6ICfQlNC10L3RjCcsXG4gIGRlbGltaXRlcjogJy4nLFxuICBob3VyVGV4dDogJ9Cn0LDRgdGLJyxcbiAgbWludXRlVGV4dDogJ9Cc0LjQvdGD0YLRiycsXG4gIG1vbnRoTmFtZXM6IFsn0K/QvdCy0LDRgNGMJywgJ9Ck0LXQstGA0LDQu9GMJywgJ9Cc0LDRgNGCJywgJ9CQ0L/RgNC10LvRjCcsICfQnNCw0LknLCAn0JjRjtC90YwnLCAn0JjRjtC70YwnLCAn0JDQstCz0YPRgdGCJywgJ9Ch0LXQvdGC0Y/QsdGA0YwnLCAn0J7QutGC0Y/QsdGA0YwnLCAn0J3QvtGP0LHRgNGMJywgJ9CU0LXQutCw0LHRgNGMJ10sXG4gIG1vbnRoTmFtZXNTaG9ydDogWyfQr9C90LIuJywgJ9Ck0LXQstGALicsICfQnNCw0YDRgicsICfQkNC/0YAuJywgJ9Cc0LDQuScsICfQmNGO0L3RjCcsICfQmNGO0LvRjCcsICfQkNCy0LMuJywgJ9Ch0LXQvdGCLicsICfQntC60YIuJywgJ9Cd0L7Rj9CxLicsICfQlNC10LouJ10sXG4gIG1vbnRoVGV4dDogJ9Cc0LXRgdGP0YbRiycsXG4gIHNlY1RleHQ6ICfQodC40LrRg9C90LTRiycsXG4gIHRpbWVGb3JtYXQ6ICdISDppaScsXG4gIHllYXJUZXh0OiAn0JPQvtC0JyxcbiAgbm93VGV4dDogJ9Ch0LXQudGH0LDRgScsXG4gIGFtVGV4dDogJ2FtJyxcbiAgcG1UZXh0OiAncG0nLFxuICB0b2RheVRleHQ6ICdD0LXQs9C+0LTQvdGPJyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGZpcnN0RGF5OiAxLFxuICBkYXRlVGV4dDogJ9CU0LDRgtCwJyxcbiAgdGltZVRleHQ6ICfQktGA0LXQvNGPJyxcbiAgY2xvc2VUZXh0OiAn0JfQsNC60YDRi9GC0YwnLFxuICBhbGxEYXlUZXh0OiAn0JLQtdGB0Ywg0LTQtdC90YwnLFxuICBub0V2ZW50c1RleHQ6ICfQndC10YIg0YHQvtCx0YvRgtC40LknLFxuICBldmVudFRleHQ6ICfQnNC10YDQvtC/0YDQuNGP0YLQuNGPJyxcbiAgZXZlbnRzVGV4dDogJ9Cc0LXRgNC+0L/RgNC40Y/RgtC40Y8nLFxuICBtb3JlRXZlbnRzVGV4dDogJ9CV0YnRkSB7Y291bnR9JyxcbiAgLy8gRGF0ZXJhbmdlIGNvbXBvbmVudFxuICBmcm9tVGV4dDogJ9Cd0LDRh9Cw0LvQvicsXG4gIHRvVGV4dDogJ9Ca0L7QvdC10YYnLFxuICAvLyBNZWFzdXJlbWVudCBjb21wb25lbnRzXG4gIHdob2xlVGV4dDogJ9CS0LXRgdGMJyxcbiAgZnJhY3Rpb25UZXh0OiAn0KfQsNGB0YLRjCcsXG4gIHVuaXRUZXh0OiAn0JXQtNC40L3QuNGG0LAnLFxuICAvLyBUaW1lIC8gVGltZXNwYW4gY29tcG9uZW50XG4gIGxhYmVsczogWyfQk9C+0LTRiycsICcg0JzQtdGB0Y/RhtGLICcsICcg0JTQvdC4ICcsICcg0KfQsNGB0YsgJywgJyDQnNC40L3Rg9GC0YsgJywgJyDQodC10LrRg9C90LTRiycsICcnXSxcbiAgbGFiZWxzU2hvcnQ6IFsn0JPQvtC0JywgJ9Cc0LXRgS4nLCAn0JTQvS4nLCAn0KcuJywgJ9Cc0LjQvS4nLCAn0KHQtdC6LicsICcnXSxcbiAgLy8gVGltZXIgY29tcG9uZW50XG4gIHN0YXJ0VGV4dDogJ9Ch0YLQsNGA0YInLFxuICBzdG9wVGV4dDogJ9Ch0YLQvtC/JyxcbiAgcmVzZXRUZXh0OiAnINCh0LHRgNC+0YEgJyxcbiAgbGFwVGV4dDogJyDQrdGC0LDQvyAnLFxuICBoaWRlVGV4dDogJyDQodC60YDRi9GC0YwgJyxcbiAgLy8gTGlzdHZpZXdcbiAgYmFja1RleHQ6ICfQvdCw0LfQsNC0JyxcbiAgdW5kb1RleHQ6ICfQntGC0LzQtdC90LjRgtCsJyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAnTycsXG4gIG9uVGV4dDogJ0knLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxuLy8g0KDRg9GB0YHQutC40Llcbm1vYmlzY3JvbGwuaTE4blsncnUtUlUnXSA9IG1vYmlzY3JvbGwuaTE4bi5ydSA9IHtcbiAgLy8gQ29yZVxuICBzZXRUZXh0OiAn0KPRgdGC0LDQvdC+0LLQuNGC0YwnLFxuICBjYW5jZWxUZXh0OiAn0J7RgtC80LXQvdCwJyxcbiAgY2xlYXJUZXh0OiAn0J7Rh9C40YHRgtC40YLRjCcsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0g0JLRi9Cx0YDQsNGC0YwnLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ2RkLm1tLnl5JyxcbiAgZGF5TmFtZXM6IFsn0LLQvtGB0LrRgNC10YHQtdC90YzQtScsICfQv9C+0L3QtdC00LXQu9GM0L3QuNC6JywgJ9Cy0YLQvtGA0L3QuNC6JywgJ9GB0YDQtdC00LAnLCAn0YfQtdGC0LLQtdGA0LMnLCAn0L/Rj9GC0L3QuNGG0LAnLCAn0YHRg9Cx0LHQvtGC0LAnXSxcbiAgZGF5TmFtZXNTaG9ydDogWyfQstGBJywgJ9C/0L0nLCAn0LLRgicsICfRgdGAJywgJ9GH0YInLCAn0L/RgicsICfRgdCxJ10sXG4gIGRheU5hbWVzTWluOiBbJ9CyJywgJ9C/JywgJ9CyJywgJ9GBJywgJ9GHJywgJ9C/JywgJ9GBJ10sXG4gIGRheVRleHQ6ICfQlNC10L3RjCcsXG4gIGRlbGltaXRlcjogJy4nLFxuICBob3VyVGV4dDogJ9Cn0LDRgScsXG4gIG1pbnV0ZVRleHQ6ICfQnNC40L3Rg9GCJyxcbiAgbW9udGhOYW1lczogWyfQr9C90LLQsNGA0YwnLCAn0KTQtdCy0YDQsNC70YwnLCAn0JzQsNGA0YInLCAn0JDQv9GA0LXQu9GMJywgJ9Cc0LDQuScsICfQmNGO0L3RjCcsICfQmNGO0LvRjCcsICfQkNCy0LPRg9GB0YInLCAn0KHQtdC90YLRj9Cx0YDRjCcsICfQntC60YLRj9Cx0YDRjCcsICfQndC+0Y/QsdGA0YwnLCAn0JTQtdC60LDQsdGA0YwnXSxcbiAgbW9udGhOYW1lc1Nob3J0OiBbJ9Cv0L3QsicsICfQpNC10LInLCAn0JzQsNGAJywgJ9CQ0L/RgCcsICfQnNCw0LknLCAn0JjRjtC9JywgJ9CY0Y7QuycsICfQkNCy0LMnLCAn0KHQtdC9JywgJ9Ce0LrRgicsICfQndC+0Y8nLCAn0JTQtdC6J10sXG4gIG1vbnRoVGV4dDogJ9Cc0LXRgdGP0YYnLFxuICBzZWNUZXh0OiAn0KHQtdC60YPQvdC0JyxcbiAgdGltZUZvcm1hdDogJ0hIOmlpJyxcbiAgeWVhclRleHQ6ICfQk9C+0LQnLFxuICBub3dUZXh0OiAn0KHQtdC50YfQsNGBJyxcbiAgYW1UZXh0OiAnYW0nLFxuICBwbVRleHQ6ICdwbScsXG4gIHRvZGF5VGV4dDogJ0PQtdCz0L7QtNC90Y8nLFxuICAvLyBDYWxlbmRhciBjb21wb25lbnRcbiAgZmlyc3REYXk6IDEsXG4gIGRhdGVUZXh0OiAn0JTQsNGC0LAnLFxuICB0aW1lVGV4dDogJ9CS0YDQtdC80Y8nLFxuICBjbG9zZVRleHQ6ICfQl9Cw0LrRgNGL0YLRjCcsXG4gIGFsbERheVRleHQ6ICfQktC10YHRjCDQtNC10L3RjCcsXG4gIG5vRXZlbnRzVGV4dDogJ9Cd0LXRgiDRgdC+0LHRi9GC0LjQuScsXG4gIGV2ZW50VGV4dDogJ9Cc0LXRgNC+0L/RgNC40Y/RgtC40Y8nLFxuICBldmVudHNUZXh0OiAn0JzQtdGA0L7Qv9GA0LjRj9GC0LjRjycsXG4gIG1vcmVFdmVudHNUZXh0OiAn0JXRidGRIHtjb3VudH0nLFxuICAvLyBEYXRlcmFuZ2UgY29tcG9uZW50XG4gIGZyb21UZXh0OiAn0J3QsNGH0LDQu9C+JyxcbiAgdG9UZXh0OiAn0JrQvtC90LXRhicsXG4gIC8vIE1lYXN1cmVtZW50IGNvbXBvbmVudHNcbiAgd2hvbGVUZXh0OiAn0KbQtdC70L7QtScsXG4gIGZyYWN0aW9uVGV4dDogJ9CU0YDQvtCx0L3QvtC1JyxcbiAgdW5pdFRleHQ6ICfQldC00LjQvdC40YbQsCcsXG4gIC8vIFRpbWUgLyBUaW1lc3BhbiBjb21wb25lbnRcbiAgbGFiZWxzOiBbJ9Cb0LXRgicsICfQnNC10YHRj9GG0LXQsicsICfQlNC90LXQuScsICfQp9Cw0YHQvtCyJywgJ9Cc0LjQvdGD0YInLCAn0KHQtdC60YPQvdC0JywgJyddLFxuICBsYWJlbHNTaG9ydDogWyfQm9C10YInLCAn0JzQtdGBJywgJ9CU0L0nLCAn0KfQsNGBJywgJ9Cc0LjQvScsICfQodC10LonLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICfQodGC0LDRgNGCJyxcbiAgc3RvcFRleHQ6ICfQodGC0L7QvycsXG4gIHJlc2V0VGV4dDogJ9Ch0LHRgNC+0YHQuNGC0YwnLFxuICBsYXBUZXh0OiAn0JrRgNGD0LMnLFxuICBoaWRlVGV4dDogJ9Ch0LrRgNGL0YLRjCcsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAn0L3QsNC30LDQtCcsXG4gIHVuZG9UZXh0OiAn0J7RgtC80LXQvdC40YLQrCcsXG4gIC8vIEZvcm1cbiAgb2ZmVGV4dDogJ08nLFxuICBvblRleHQ6ICdJJyxcbiAgLy8gTnVtcGFkXG4gIGRlY2ltYWxTZXBhcmF0b3I6ICcsJyxcbiAgdGhvdXNhbmRzU2VwYXJhdG9yOiAnICdcbn07XG5cbi8vIFNsb3ZlbmNpbmFcbm1vYmlzY3JvbGwuaTE4bi5zayA9IHtcbiAgLy8gQ29yZVxuICBzZXRUZXh0OiAnWmFkYWonLFxuICBjYW5jZWxUZXh0OiAnWnJ1xaFpxaUnLFxuICBjbGVhclRleHQ6ICdWeW1hemHFpScsXG4gIHNlbGVjdGVkVGV4dDogJ096bmHEjWVuw706IHtjb3VudH0nLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ2QubS55eScsXG4gIGRheU5hbWVzOiBbJ05lZGXEvmEnLCAnUG9uZGVsb2snLCAnVXRvcm9rJywgJ1N0cmVkYScsICfFoHR2cnRvaycsICdQaWF0b2snLCAnU29ib3RhJ10sXG4gIGRheU5hbWVzU2hvcnQ6IFsnTmUnLCAnUG8nLCAnVXQnLCAnU3QnLCAnxaB0JywgJ1BpJywgJ1NvJ10sXG4gIGRheU5hbWVzTWluOiBbJ04nLCAnUCcsICdVJywgJ1MnLCAnxaAnLCAnUCcsICdTJ10sXG4gIGRheVRleHQ6ICfEjmXFiCcsXG4gIGhvdXJUZXh0OiAnSG9kaW55JyxcbiAgbWludXRlVGV4dDogJ01pbsO6dHknLFxuICBtb250aE5hbWVzOiBbJ0phbnXDoXInLCAnRmVicnXDoXInLCAnTWFyZWMnLCAnQXByw61sJywgJ03DoWonLCAnSsO6bicsICdKw7psJywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2t0w7NiZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXSxcbiAgbW9udGhOYW1lc1Nob3J0OiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNw6FqJywgJ0rDum4nLCAnSsO6bCcsICdBdWcnLCAnU2VwJywgJ09rdCcsICdOb3YnLCAnRGVjJ10sXG4gIG1vbnRoVGV4dDogJ01lc2lhYycsXG4gIHNlY1RleHQ6ICdTZWt1bmR5JyxcbiAgdGltZUZvcm1hdDogJ0g6aWknLFxuICB5ZWFyVGV4dDogJ1JvaycsXG4gIG5vd1RleHQ6ICdUZXJheicsXG4gIGFtVGV4dDogJ2FtJyxcbiAgcG1UZXh0OiAncG0nLFxuICB0b2RheVRleHQ6ICdEbmVzJyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGZpcnN0RGF5OiAxLFxuICBkYXRlVGV4dDogJ0RhdHVtJyxcbiAgdGltZVRleHQ6ICfEjGFzJyxcbiAgY2xvc2VUZXh0OiAnWmF2cmllxaUnLFxuICBhbGxEYXlUZXh0OiAnQ2Vsw70gZGXFiCcsXG4gIG5vRXZlbnRzVGV4dDogJ8W9aWFkbmUgdWRhbG9zdGknLFxuICBldmVudFRleHQ6ICdVZGFsb3N0w60nLFxuICBldmVudHNUZXh0OiAnVWRhbG9zdGknLFxuICBtb3JlRXZlbnRzVGV4dDogJ3tjb3VudH0gxI9hbMWhaWEnLFxuICBtb3JlRXZlbnRzUGx1cmFsVGV4dDogJ3tjb3VudH0gxI9hbMWhaWUnLFxuICAvLyBEYXRlcmFuZ2UgY29tcG9uZW50XG4gIGZyb21UZXh0OiAnWmHEjWlhdG9rJyxcbiAgdG9UZXh0OiAnS29uaWVjJyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICdDZWzDvScsXG4gIGZyYWN0aW9uVGV4dDogJ8SMYXPFpScsXG4gIHVuaXRUZXh0OiAnSmVkbm90a2EnLFxuICAvLyBUaW1lIC8gVGltZXNwYW4gY29tcG9uZW50XG4gIGxhYmVsczogWydSb2t5JywgJ01lc2lhY2UnLCAnRG5pJywgJ0hvZGlueScsICdNaW7DunR5JywgJ1Nla3VuZHknLCAnJ10sXG4gIGxhYmVsc1Nob3J0OiBbJ1JvaycsICdNZXMnLCAnRG5pJywgJ0hvZCcsICdNaW4nLCAnU2VjJywgJyddLFxuICAvLyBUaW1lciBjb21wb25lbnRcbiAgc3RhcnRUZXh0OiAnU3RhcnQnLFxuICBzdG9wVGV4dDogJ1N0b3AnLFxuICByZXNldFRleHQ6ICdSZXNldG92YcWlJyxcbiAgbGFwVGV4dDogJ0V0YXBhJyxcbiAgaGlkZVRleHQ6ICdTY2hvdmHFpScsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAnU3DDpMWlJyxcbiAgdW5kb1RleHQ6ICdTcMOkxaUnLFxuICAvLyBGb3JtXG4gIG9mZlRleHQ6ICdPJyxcbiAgb25UZXh0OiAnSScsXG4gIC8vIE51bXBhZFxuICBkZWNpbWFsU2VwYXJhdG9yOiAnLCcsXG4gIHRob3VzYW5kc1NlcGFyYXRvcjogJyAnXG59O1xuXG4vLyBTZXJiaWFuXG5tb2Jpc2Nyb2xsLmkxOG4uc3IgPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ9Cf0L7RgdGC0LDQstC4JyxcbiAgY2FuY2VsVGV4dDogJ9Ce0YLQutCw0LbQuCcsXG4gIGNsZWFyVGV4dDogJ9Ce0LHRgNC40YjQuCcsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0g0LjQt9Cw0LHRgNCw0L3QsCcsXG4gIC8vIERhdGV0aW1lIGNvbXBvbmVudFxuICBkYXRlRm9ybWF0OiAnZGQubW0ueXknLFxuICBkYXlOYW1lczogWyfQndC10LTQtdGZ0LAnLCAn0J/QvtC90LXQtNC10ZnQsNC6JywgJ9Cj0YLQvtGA0LDQuicsICfQodGA0LXQtNCwJywgJ9Cn0LXRgtCy0YDRgtCw0LonLCAn0J/QtdGC0LDQuicsICfQodGD0LHQvtGC0LAnXSxcbiAgZGF5TmFtZXNTaG9ydDogWyfQndC10LQnLCAn0J/QvtC9JywgJ9Cj0YLQvicsICfQodGA0LUnLCAn0KfQtdGCJywgJ9Cf0LXRgicsICfQodGD0LEnXSxcbiAgZGF5TmFtZXNNaW46IFsn0J3QtScsICfQn9C+JywgJ9Cj0YInLCAn0KHRgCcsICfQp9C1JywgJ9Cf0LUnLCAn0KHRgyddLFxuICBkYXlUZXh0OiAn0JTQsNC9JyxcbiAgZGVsaW1pdGVyOiAnLicsXG4gIGhvdXJUZXh0OiAn0KfQsNGBJyxcbiAgbWludXRlVGV4dDogJ9Cc0LjQvdGD0YInLFxuICBtb250aE5hbWVzOiBbJ9CI0LDQvdGD0LDRgCcsICfQpNC10LHRgNGD0LDRgCcsICfQnNCw0YDRgicsICfQkNC/0YDQuNC7JywgJ9Cc0LDRmCcsICfQiNGD0L0nLCAn0IjRg9C7JywgJ9CQ0LLQs9GD0YHRgicsICfQodC10L/RgtC10LzQsdCw0YAnLCAn0J7QutGC0L7QsdCw0YAnLCAn0J3QvtCy0LXQvNCx0LDRgCcsICfQlNC10YbQtdC80LHQsNGAJ10sXG4gIG1vbnRoTmFtZXNTaG9ydDogWyfQiNCw0L0nLCAn0KTQtdCxJywgJ9Cc0LDRgCcsICfQkNC/0YAnLCAn0JzQsNGYJywgJ9CI0YPQvScsICfQiNGD0LsnLCAn0JDQstCzJywgJ9Ch0LXQvycsICfQntC60YInLCAn0J3QvtCyJywgJ9CU0LXRhiddLFxuICBtb250aFRleHQ6ICfQvNC10YHQtdGGJyxcbiAgc2VjVGV4dDogJ9Ch0LXQutGD0L3QtCcsXG4gIHRpbWVGb3JtYXQ6ICdIOmlpJyxcbiAgeWVhclRleHQ6ICfQs9C+0LTQuNC90LAnLFxuICBub3dUZXh0OiAn0YHQsNC00LAnLFxuICBwbVRleHQ6ICdwbScsXG4gIGFtVGV4dDogJ2FtJyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGZpcnN0RGF5OiAxLFxuICBkYXRlVGV4dDogJ9CU0LDRgtGD0LwnLFxuICB0aW1lVGV4dDogJ9Cy0YDQtdC80LUnLFxuICB0b2RheVRleHQ6ICfQlNCw0L3QsNGBJyxcbiAgcHJldk1vbnRoVGV4dDogJ9Cf0YDQtdGC0YXQvtC00L3QuCDQvNGY0LXRgdC10YYnLFxuICBuZXh0TW9udGhUZXh0OiAn0KHQu9C10LTQtdGb0LXQsyDQvNC10YHQtdGG0LAnLFxuICBwcmV2WWVhclRleHQ6ICfQn9GA0LXRgtGF0L7QtNC90LAg0LPQvtC00LjQvdC1JyxcbiAgbmV4dFllYXJUZXh0OiAn0KHQu9C10LTQtdGb0LUg0LPQvtC00LjQvdC1JyxcbiAgY2xvc2VUZXh0OiAn0JfQsNGC0LLQvtGA0LgnLFxuICBldmVudFRleHQ6ICfQlNC+0LPQsNGS0LDRmCcsXG4gIGV2ZW50c1RleHQ6ICfQlNC+0LPQsNGS0LDRmNC4JyxcbiAgYWxsRGF5VGV4dDogJ9Cm0LXQviDQtNCw0L0nLFxuICBub0V2ZW50c1RleHQ6ICfQndC10LzQsCDQtNC+0LPQsNGS0LDRmNCwJyxcbiAgbW9yZUV2ZW50c1RleHQ6ICfQiNC+0Ygge2NvdW50fScsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICfQntC0JyxcbiAgdG9UZXh0OiAn0JTQvicsXG4gIC8vIE1lYXN1cmVtZW50IGNvbXBvbmVudHNcbiAgd2hvbGVUZXh0OiAn0YbQtdC+JyxcbiAgZnJhY3Rpb25UZXh0OiAn0KTRgNCw0LrRhtC40ZjQsCcsXG4gIHVuaXRUZXh0OiAn0LXQtNC40L3QuNGG0LAnLFxuICAvLyBUaW1lIC8gVGltZXNwYW4gY29tcG9uZW50XG4gIGxhYmVsczogWyfQk9C+0LTQuNC90LUnLCAn0JzQtdGB0LXRhtC4JywgJ9CU0LDQvdCwJywgJ9Ch0LDRgtC4JywgJ9Cc0LjQvdGD0YLQsCcsICfQodC10LrRg9C90LTQuCcsICcnXSxcbiAgbGFiZWxzU2hvcnQ6IFsn0JPQvtC0JywgJ9Cc0LXRgScsICfQlNCw0L3QsCcsICfQodCw0YLQuCcsICfQnNC40L3RgycsICfQodC10LrRgycsICcnXSxcbiAgLy8gVGltZXIgY29tcG9uZW50XG4gIHN0YXJ0VGV4dDogJ9CX0LDQv9C+0YfQvdC4JyxcbiAgc3RvcFRleHQ6ICfQodGC0L7QvycsXG4gIHJlc2V0VGV4dDogJ9Cg0LXRgdC10YLRg9GYJyxcbiAgbGFwVGV4dDogJ9Ca0YDRg9CzJyxcbiAgaGlkZVRleHQ6ICfQodCw0LrRgNC40YLQuCcsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAn0J/QvtCy0YDQsNGC0LDQuicsXG4gIHVuZG9UZXh0OiAn0J7Qv9C+0LfQvtCy0LgnLFxuICAvLyBGb3JtXG4gIG9mZlRleHQ6ICfQvWUnLFxuICBvblRleHQ6ICfQtNCwJyxcbiAgLy8gTnVtcGFkXG4gIGRlY2ltYWxTZXBhcmF0b3I6ICcsJyxcbiAgdGhvdXNhbmRzU2VwYXJhdG9yOiAnICdcbn07XG5cbi8vIFN2ZW5za2Fcbm1vYmlzY3JvbGwuaTE4bi5zdiA9IHtcbiAgLy8gQ29yZVxuICBzZXRUZXh0OiAnT0snLFxuICBjYW5jZWxUZXh0OiAnQXZicnl0JyxcbiAgY2xlYXJUZXh0OiAnS2xhcmEnLFxuICBzZWxlY3RlZFRleHQ6ICd7Y291bnR9IHZhbGQnLFxuICAvLyBEYXRldGltZSBjb21wb25lbnRcbiAgZGF0ZUZvcm1hdDogJ3l5LW1tLWRkJyxcbiAgZGF5TmFtZXM6IFsnU8O2bmRhZycsICdNw6VuZGFnJywgJ1Rpc2RhZycsICdPbnNkYWcnLCAnVG9yc2RhZycsICdGcmVkYWcnLCAnTMO2cmRhZyddLFxuICBkYXlOYW1lc1Nob3J0OiBbJ1PDticsICdNw6UnLCAnVGknLCAnT24nLCAnVG8nLCAnRnInLCAnTMO2J10sXG4gIGRheU5hbWVzTWluOiBbJ1MnLCAnTScsICdUJywgJ08nLCAnVCcsICdGJywgJ0wnXSxcbiAgZGF5VGV4dDogJ0RhZycsXG4gIGhvdXJUZXh0OiAnVGltbWUnLFxuICBtaW51dGVUZXh0OiAnTWludXQnLFxuICBtb250aE5hbWVzOiBbJ0phbnVhcmknLCAnRmVicnVhcmknLCAnTWFycycsICdBcHJpbCcsICdNYWonLCAnSnVuaScsICdKdWxpJywgJ0F1Z3VzdGknLCAnU2VwdGVtYmVyJywgJ09rdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXSxcbiAgbW9udGhOYW1lc1Nob3J0OiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYWonLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09rdCcsICdOb3YnLCAnRGVjJ10sXG4gIG1vbnRoVGV4dDogJ03DpW5hZCcsXG4gIHNlY1RleHQ6ICdTZWt1bmQnLFxuICB0aW1lRm9ybWF0OiAnSEg6aWknLFxuICB5ZWFyVGV4dDogJ8OFcicsXG4gIG5vd1RleHQ6ICdOdScsXG4gIHBtVGV4dDogJ3BtJyxcbiAgYW1UZXh0OiAnYW0nLFxuICB0b2RheVRleHQ6ICdJIGRhZycsXG4gIC8vIENhbGVuZGFyIGNvbXBvbmVudFxuICBmaXJzdERheTogMSxcbiAgZGF0ZVRleHQ6ICdEYXR1bScsXG4gIHRpbWVUZXh0OiAnVGlkJyxcbiAgY2xvc2VUZXh0OiAnU3TDpG5nJyxcbiAgYWxsRGF5VGV4dDogJ0hlbGRhZycsXG4gIG5vRXZlbnRzVGV4dDogJ0luZ2EgYWt0aXZpdGV0ZXInLFxuICBldmVudFRleHQ6ICdIw6RuZGVsc2UnLFxuICBldmVudHNUZXh0OiAnSMOkbmRlbHNlcicsXG4gIG1vcmVFdmVudHNUZXh0OiAne2NvdW50fSB0aWxsJyxcbiAgLy8gRGF0ZXJhbmdlIGNvbXBvbmVudFxuICBmcm9tVGV4dDogJ1N0YXJ0JyxcbiAgdG9UZXh0OiAnU2x1dCcsXG4gIC8vIE1lYXN1cmVtZW50IGNvbXBvbmVudHNcbiAgd2hvbGVUZXh0OiAnSGVsYScsXG4gIGZyYWN0aW9uVGV4dDogJ0Jyw6VrJyxcbiAgdW5pdFRleHQ6ICdFbmhldCcsXG4gIC8vIFRpbWUgLyBUaW1lc3BhbiBjb21wb25lbnRcbiAgbGFiZWxzOiBbJ8OFcicsICdNw6VuYWRlcicsICdEYWdhcicsICdUaW1tYXInLCAnTWludXRlcicsICdTZWt1bmRlcicsICcnXSxcbiAgbGFiZWxzU2hvcnQ6IFsnw4VyJywgJ03DpW4nLCAnRGFnJywgJ1RpbScsICdNaW4nLCAnU2VrJywgJyddLFxuICAvLyBUaW1lciBjb21wb25lbnRcbiAgc3RhcnRUZXh0OiAnU3RhcnQnLFxuICBzdG9wVGV4dDogJ1N0b3BwJyxcbiAgcmVzZXRUZXh0OiAnw4V0ZXJzdMOkbGwnLFxuICBsYXBUZXh0OiAnVmFydicsXG4gIGhpZGVUZXh0OiAnRMO2bGonLFxuICAvLyBMaXN0dmlld1xuICBiYWNrVGV4dDogJ1RpbGxiYWthJyxcbiAgdW5kb1RleHQ6ICfDhW5ncmEnLFxuICAvLyBGb3JtXG4gIG9mZlRleHQ6ICdBdicsXG4gIG9uVGV4dDogJ1DDpSdcbn07XG5cbi8vIFTDvHJrw6dlXG5tb2Jpc2Nyb2xsLmkxOG4udHIgPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ1Nlw6cnLFxuICBjYW5jZWxUZXh0OiAnxLBwdGFsJyxcbiAgY2xlYXJUZXh0OiAnVGVtaXpsZXlpbicsXG4gIHNlbGVjdGVkVGV4dDogJ3tjb3VudH0gc2XDp2lsbWnFnycsXG4gIC8vIERhdGV0aW1lIGNvbXBvbmVudFxuICBkYXRlRm9ybWF0OiAnZGQubW0ueXknLFxuICBkYXlOYW1lczogWydQYXphcicsICdQYXphcnRlc2knLCAnU2FsxLEnLCAnw4dhcsWfYW1iYScsICdQZXLFn2VtYmUnLCAnQ3VtYScsICdDdW1hcnRlc2knXSxcbiAgZGF5TmFtZXNTaG9ydDogWydQYXonLCAnUHp0JywgJ1NhbCcsICfDh2FyJywgJ1BlcicsICdDdW0nLCAnQ210J10sXG4gIGRheU5hbWVzTWluOiBbJ1AnLCAnUCcsICdTJywgJ8OHJywgJ1AnLCAnQycsICdDJ10sXG4gIGRheVRleHQ6ICdHw7xuJyxcbiAgZGVsaW1pdGVyOiAnLicsXG4gIGhvdXJUZXh0OiAnU2FhdCcsXG4gIG1pbnV0ZVRleHQ6ICdEYWtpa2EnLFxuICBtb250aE5hbWVzOiBbJ09jYWsnLCAnxZ51YmF0JywgJ01hcnQnLCAnTmlzYW4nLCAnTWF5xLFzJywgJ0hhemlyYW4nLCAnVGVtbXV6JywgJ0HEn3VzdG9zJywgJ0V5bMO8bCcsICdFa2ltJywgJ0thc8SxbScsICdBcmFsxLFrJ10sXG4gIG1vbnRoTmFtZXNTaG9ydDogWydPY2EnLCAnxZ51YicsICdNYXInLCAnTmlzJywgJ01heScsICdIYXonLCAnVGVtJywgJ0HEn3UnLCAnRXlsJywgJ0VraScsICdLYXMnLCAnQXJhJ10sXG4gIG1vbnRoVGV4dDogJ0F5JyxcbiAgc2VjVGV4dDogJ1Nhbml5ZScsXG4gIHRpbWVGb3JtYXQ6ICdISDppaScsXG4gIHllYXJUZXh0OiAnWcSxbCcsXG4gIG5vd1RleHQ6ICfFnmltZGknLFxuICBwbVRleHQ6ICdwbScsXG4gIGFtVGV4dDogJ2FtJyxcbiAgdG9kYXlUZXh0OiAnQnVnw7xuJyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGZpcnN0RGF5OiAxLFxuICBkYXRlVGV4dDogJ1RhcmloJyxcbiAgdGltZVRleHQ6ICdaYW1hbicsXG4gIGNsb3NlVGV4dDogJ0thcGF0bWFrJyxcbiAgYWxsRGF5VGV4dDogJ1TDvG0gZ8O8bicsXG4gIG5vRXZlbnRzVGV4dDogJ0V0a2lubGlrIFlvaycsXG4gIGV2ZW50VGV4dDogJ0V0a2lubGlrJyxcbiAgZXZlbnRzVGV4dDogJ0V0a2lubGlrbGVyJyxcbiAgbW9yZUV2ZW50c1RleHQ6ICd7Y291bnR9IHRhbmUgZGFoYScsXG4gIC8vIERhdGVyYW5nZSBjb21wb25lbnRcbiAgZnJvbVRleHQ6ICdCYcWfbGEnLFxuICB0b1RleHQ6ICdTb24nLFxuICAvLyBNZWFzdXJlbWVudCBjb21wb25lbnRzXG4gIHdob2xlVGV4dDogJ1RhbScsXG4gIGZyYWN0aW9uVGV4dDogJ0tlc2lyJyxcbiAgdW5pdFRleHQ6ICdCaXJpbScsXG4gIC8vIFRpbWUgLyBUaW1lc3BhbiBjb21wb25lbnRcbiAgbGFiZWxzOiBbJ1nEsWwnLCAnQXknLCAnR8O8bicsICdTYWF0JywgJ0Rha2lrYScsICdTYW5peWUnLCAnJ10sXG4gIGxhYmVsc1Nob3J0OiBbJ1nEsWwnLCAnQXknLCAnR8O8bicsICdTYScsICdEYWsnLCAnU24nLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICdCYcWfbGEnLFxuICBzdG9wVGV4dDogJ0R1cmR1cicsXG4gIHJlc2V0VGV4dDogJ1PEsWbEsXJsYScsXG4gIGxhcFRleHQ6ICdUdXInLFxuICBoaWRlVGV4dDogJ0dpemxlJyxcbiAgLy8gTGlzdHZpZXdcbiAgYmFja1RleHQ6ICdHZXJpJyxcbiAgdW5kb1RleHQ6ICdHZXJpIEFsJyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAnTycsXG4gIG9uVGV4dDogJ0knLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcuJ1xufTtcblxuLy8gVmlldG5hbWVzZSBcbm1vYmlzY3JvbGwuaTE4bi52aSA9IHtcbiAgLy8gQ29yZVxuICBzZXRUZXh0OiAnxJDhurd0JyxcbiAgY2FuY2VsVGV4dDogJ0jhu6d5IGLDsicsXG4gIGNsZWFyVGV4dDogJ1jDs2EnLFxuICBzZWxlY3RlZFRleHQ6ICd7Y291bnR9IGNo4buNbicsXG4gIC8vIERhdGV0aW1lIGNvbXBvbmVudFxuICBkYXRlRm9ybWF0OiAnZGQvbW0veXknLFxuICBkYXlOYW1lczogWydDaOG7pyBOaOG6rXQnLCAnVGjhu6kgSGFpJywgJ1Ro4bupIEJhJywgJ1Ro4bupIFTGsCcsICdUaOG7qSBOxINtJywgJ1Ro4bupIFPDoXUnLCAnVGjhu6kgQuG6o3knXSxcbiAgZGF5TmFtZXNTaG9ydDogWydDTicsICdUMicsICdUMycsICdUNCcsICdUNScsICdUNicsICdUNyddLFxuICBkYXlOYW1lc01pbjogWydDTicsICdUMicsICdUMycsICdUNCcsICdUNScsICdUNicsICdUNyddLFxuICBkYXlUZXh0OiAnJyxcbiAgZGVsaW1pdGVyOiAnLycsXG4gIGhvdXJUZXh0OiAnR2nhu50nLFxuICBtaW51dGVUZXh0OiAnUGjDunQnLFxuICBtb250aE5hbWVzOiBbJ1Row6FuZyBN4buZdCcsICdUaMOhbmcgSGFpJywgJ1Row6FuZyBCYScsICdUaMOhbmcgVMawJywgJ1Row6FuZyBOxINtJywgJ1Row6FuZyBTw6F1JywgJ1Row6FuZyBC4bqjeScsICdUaMOhbmcgVMOhbScsICdUaMOhbmcgQ2jDrW4nLCAnVGjDoW5nIE3GsOG7nWknLCAnVGjDoW5nIE3GsOG7nWkgTeG7mXQnLCAnVGjDoW5nIE3GsOG7nWkgSGFpJ10sXG4gIG1vbnRoTmFtZXNTaG9ydDogWydUaMOhbmcgMScsICdUaMOhbmcgMicsICdUaMOhbmcgMycsICdUaMOhbmcgNCcsICdUaMOhbmcgNScsICdUaMOhbmcgNicsICdUaMOhbmcgNycsICdUaMOhbmcgOCcsICdUaMOhbmcgOScsICdUaMOhbmcgMTAnLCAnVGjDoW5nIDExJywgJ1Row6FuZyAxMiddLFxuICBtb250aFRleHQ6ICdUaMOhbmcnLFxuICBzZWNUZXh0OiAnR2nDonknLFxuICB0aW1lRm9ybWF0OiAnSDppaScsXG4gIHllYXJUZXh0OiAnTsSDbScsXG4gIG5vd1RleHQ6ICdCw6J5IGdp4budJyxcbiAgcG1UZXh0OiAncG0nLFxuICBhbVRleHQ6ICdhbScsXG4gIC8vIENhbGVuZGFyIGNvbXBvbmVudFxuICBmaXJzdERheTogMCxcbiAgZGF0ZVRleHQ6ICdOZ8OgeScsXG4gIHRpbWVUZXh0OiAnSMO0zYBpJyxcbiAgdG9kYXlUZXh0OiAnSMO0bSBuYXknLFxuICBwcmV2TW9udGhUZXh0OiAnVGjDoW5nIHRyxrDhu5tjJyxcbiAgbmV4dE1vbnRoVGV4dDogJ1Row6FuZyB04bubaScsXG4gIHByZXZZZWFyVGV4dDogJ03Eg20gdHLGsOG7m2MnLFxuICBuZXh0WWVhclRleHQ6ICdOxINtIHThu5tpJyxcbiAgY2xvc2VUZXh0OiAnxJDDs25nJyxcbiAgZXZlbnRUZXh0OiAnU+G7sSBraeG7h24nLFxuICBldmVudHNUZXh0OiAnU+G7sSBraeG7h24nLFxuICBhbGxEYXlUZXh0OiAnQ+G6oyBuZ8OgeScsXG4gIG5vRXZlbnRzVGV4dDogJ0tow7RuZyBjw7Mgc+G7sSBraeG7h24nLFxuICBtb3JlRXZlbnRzVGV4dDogJ3tjb3VudH0gdGjhursga2jDoWMnLFxuICAvLyBEYXRlcmFuZ2UgY29tcG9uZW50XG4gIGZyb21UZXh0OiAnVOG7qycsXG4gIHRvVGV4dDogJ1Thu5tpJyxcbiAgLy8gTWVhc3VyZW1lbnQgY29tcG9uZW50c1xuICB3aG9sZVRleHQ6ICdUb8OgbiB0aOG7gycsXG4gIGZyYWN0aW9uVGV4dDogJ1Bow6JuIHPhu5EnLFxuICB1bml0VGV4dDogJ8SRxqFuIHbhu4snLFxuICAvLyBUaW1lIC8gVGltZXNwYW4gY29tcG9uZW50XG4gIGxhYmVsczogWydOxINtJywgJ1Row6FuZycsICdOZ8OgeScsICdHaeG7nScsICdQaMO6dCcsICdHacOieScsICcnXSxcbiAgbGFiZWxzU2hvcnQ6IFsnTsSDbScsICdUaMOhbmcnLCAnTmfDoHknLCAnR2nhu50nLCAnUGjDunQnLCAnR2nDonknLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICdC4bqvdCDEkeG6p3UnLFxuICBzdG9wVGV4dDogJ0Thu6tuZycsXG4gIHJlc2V0VGV4dDogJ8SQ4bq3dCBs4bqhaScsXG4gIGxhcFRleHQ6ICdWw7JuZycsXG4gIGhpZGVUZXh0OiAnR2nhuqV1JyxcbiAgLy8gTGlzdHZpZXdcbiAgYmFja1RleHQ6ICdRdWF5IGzhuqFpJyxcbiAgdW5kb1RleHQ6ICdIb8OgbiB0w6FjJyxcbiAgLy8gRm9ybVxuICBvZmZUZXh0OiAnVOG6pXQnLFxuICBvblRleHQ6ICdC4bqtdCcsXG4gIC8vIE51bXBhZFxuICBkZWNpbWFsU2VwYXJhdG9yOiAnLCcsXG4gIHRob3VzYW5kc1NlcGFyYXRvcjogJyAnXG59O1xuXG4vLyBDaGluZXNlXG5tb2Jpc2Nyb2xsLmkxOG4uemggPSB7XG4gIC8vIENvcmVcbiAgc2V0VGV4dDogJ+ehruWumicsXG4gIGNhbmNlbFRleHQ6ICflj5bmtognLFxuICBjbGVhclRleHQ6ICfmmI7noa4nLFxuICBzZWxlY3RlZFRleHQ6ICd7Y291bnR9IOmAiScsXG4gIC8vIERhdGV0aW1lIGNvbXBvbmVudFxuICBkYXRlRm9ybWF0OiAneXnlubRtbeaciGTml6UnLFxuICBkYXlOYW1lczogWyflkajml6UnLCAn5ZGo5LiAJywgJ+WRqOS6jCcsICflkajkuIknLCAn5ZGo5ZubJywgJ+WRqOS6lCcsICflkajlha0nXSxcbiAgZGF5TmFtZXNTaG9ydDogWyfml6UnLCAn5LiAJywgJ+S6jCcsICfkuIknLCAn5ZubJywgJ+S6lCcsICflha0nXSxcbiAgZGF5TmFtZXNNaW46IFsn5pelJywgJ+S4gCcsICfkuownLCAn5LiJJywgJ+WbmycsICfkupQnLCAn5YWtJ10sXG4gIGRheVRleHQ6ICfml6UnLFxuICBob3VyVGV4dDogJ+aXticsXG4gIG1pbnV0ZVRleHQ6ICfliIYnLFxuICBtb250aE5hbWVzOiBbJzHmnIgnLCAnMuaciCcsICcz5pyIJywgJzTmnIgnLCAnNeaciCcsICc25pyIJywgJzfmnIgnLCAnOOaciCcsICc55pyIJywgJzEw5pyIJywgJzEx5pyIJywgJzEy5pyIJ10sXG4gIG1vbnRoTmFtZXNTaG9ydDogWyfkuIAnLCAn5LqMJywgJ+S4iScsICflm5snLCAn5LqUJywgJ+WFrScsICfkuIMnLCAn5YWrJywgJ+S5nScsICfljYEnLCAn5Y2B5LiAJywgJ+WNgeS6jCddLFxuICBtb250aFRleHQ6ICfmnIgnLFxuICBzZWNUZXh0OiAn56eSJyxcbiAgdGltZUZvcm1hdDogJ0hIOmlpJyxcbiAgeWVhclRleHQ6ICflubQnLFxuICBub3dUZXh0OiAn5b2T5YmNJyxcbiAgcG1UZXh0OiAn5LiL5Y2IJyxcbiAgYW1UZXh0OiAn5LiK5Y2IJyxcbiAgeWVhclN1ZmZpeDogJ+W5tCcsXG4gIG1vbnRoU3VmZml4OiAn5pyIJyxcbiAgZGF5U3VmZml4OiAn5pelJyxcbiAgdG9kYXlUZXh0OiAn5LuK5aSpJyxcbiAgLy8gQ2FsZW5kYXIgY29tcG9uZW50XG4gIGRhdGVUZXh0OiAn5pelJyxcbiAgdGltZVRleHQ6ICfml7bpl7QnLFxuICBjbG9zZVRleHQ6ICflhbPpl60nLFxuICBhbGxEYXlUZXh0OiAn5YWo5aSpJyxcbiAgbm9FdmVudHNUZXh0OiAn5peg5LqL5Lu2JyxcbiAgZXZlbnRUZXh0OiAn5rS75YqoJyxcbiAgZXZlbnRzVGV4dDogJ+a0u+WKqCcsXG4gIG1vcmVFdmVudHNUZXh0OiAn5LuWIHtjb3VudH0g5Lu2JyxcbiAgLy8gRGF0ZXJhbmdlIGNvbXBvbmVudFxuICBmcm9tVGV4dDogJ+W8gOWni+aXtumXtCcsXG4gIHRvVGV4dDogJ+e7k+adn+aXtumXtCcsXG4gIC8vIE1lYXN1cmVtZW50IGNvbXBvbmVudHNcbiAgd2hvbGVUZXh0OiAn5ZCI6K6hJyxcbiAgZnJhY3Rpb25UZXh0OiAn5YiG5pWwJyxcbiAgdW5pdFRleHQ6ICfljZXkvY0nLFxuICAvLyBUaW1lIC8gVGltZXNwYW4gY29tcG9uZW50XG4gIGxhYmVsczogWyflubQnLCAn5pyIJywgJ+aXpScsICflsI/ml7YnLCAn5YiG6ZKfJywgJ+enkicsICcnXSxcbiAgbGFiZWxzU2hvcnQ6IFsn5bm0JywgJ+aciCcsICfml6UnLCAn54K5JywgJ+WIhicsICfnp5InLCAnJ10sXG4gIC8vIFRpbWVyIGNvbXBvbmVudFxuICBzdGFydFRleHQ6ICflvIDlp4snLFxuICBzdG9wVGV4dDogJ+WBnOatoicsXG4gIHJlc2V0VGV4dDogJ+mHjee9ricsXG4gIGxhcFRleHQ6ICflnIgnLFxuICBoaWRlVGV4dDogJ+makOiXjycsXG4gIC8vIExpc3R2aWV3XG4gIGJhY2tUZXh0OiAn6L+U5ZueJyxcbiAgdW5kb1RleHQ6ICflpI3ljp8nLFxuICAvLyBGb3JtXG4gIG9mZlRleHQ6ICflhbPpl60nLFxuICBvblRleHQ6ICflvIDlkK8nLFxuICAvLyBOdW1wYWRcbiAgZGVjaW1hbFNlcGFyYXRvcjogJywnLFxuICB0aG91c2FuZHNTZXBhcmF0b3I6ICcgJ1xufTtcblxudmFyIHRoZW1lcyQxID0gbW9iaXNjcm9sbC50aGVtZXM7XG50aGVtZXMkMS5mcmFtZS5pb3MgPSB7XG4gIGRpc3BsYXk6ICdib3R0b20nLFxuICAvLyBmcmFtZVxuICBoZWFkZXJUZXh0OiBmYWxzZSxcbiAgLy8gZnJhbWVcbiAgYnRuV2lkdGg6IGZhbHNlLFxuICAvLyBmcmFtZVxuICBkZWxldGVJY29uOiAnaW9zLWJhY2tzcGFjZScsXG4gIC8vIG51bXBhZFxuICBzY3JvbGwzZDogb3MgIT0gJ3dwJyAmJiAob3MgIT0gJ2FuZHJvaWQnIHx8IG1ham9yVmVyc2lvbiA+IDcpXG59O1xudGhlbWVzJDEuc2Nyb2xsZXIuaW9zID0gZXh0ZW5kJDEoe30sIHRoZW1lcyQxLmZyYW1lLmlvcywge1xuICByb3dzOiA1LFxuICAvLyBzY3JvbGxlclxuICBoZWlnaHQ6IDM0LFxuICAvLyBzY3JvbGxlclxuICBtaW5XaWR0aDogNTUsXG4gIC8vIHNjcm9sbGVyXG4gIHNlbGVjdGVkTGluZUhlaWdodDogdHJ1ZSxcbiAgLy8gc2Nyb2xsZXJcbiAgc2VsZWN0ZWRMaW5lQm9yZGVyOiAxLFxuICAvLyBzY3JvbGxlclxuICBzaG93TGFiZWw6IGZhbHNlLFxuICAvLyBzY3JvbGxlclxuICB1c2VTaG9ydExhYmVsczogdHJ1ZSxcbiAgLy8gdGltZXNwYW4vdGltZXJcbiAgYnRuUGx1c0NsYXNzOiAnbWJzYy1pYyBtYnNjLWljLWFycm93LWRvd241JyxcbiAgLy8gc2Nyb2xsZXJcbiAgYnRuTWludXNDbGFzczogJ21ic2MtaWMgbWJzYy1pYy1hcnJvdy11cDUnLFxuICAvLyBzY3JvbGxlclxuICBjaGVja0ljb246ICdpb24taW9zNy1jaGVja21hcmstZW1wdHknLFxuICAvLyBzZWxlY3RcbiAgZmlsdGVyQ2xlYXJJY29uOiAnaW9uLWNsb3NlLWNpcmNsZWQnLFxuICAvLyBzZWxlY3RcbiAgZGF0ZURpc3BsYXk6ICdNTWR5eScsXG4gIC8vIGRhdGVcbiAgYnRuQ2FsUHJldkNsYXNzOiAnbWJzYy1pYyBtYnNjLWljLWFycm93LWxlZnQ1JyxcbiAgLy8gY2FsZW5kYXJcbiAgYnRuQ2FsTmV4dENsYXNzOiAnbWJzYy1pYyBtYnNjLWljLWFycm93LXJpZ2h0NScgLy8gY2FsZW5kYXJcblxufSk7XG50aGVtZXMkMS5saXN0dmlldy5pb3MgPSB7XG4gIGxlZnRBcnJvd0NsYXNzOiAnbWJzYy1pYy1pb24taW9zNy1hcnJvdy1iYWNrJyxcbiAgcmlnaHRBcnJvd0NsYXNzOiAnbWJzYy1pYy1pb24taW9zNy1hcnJvdy1mb3J3YXJkJ1xufTtcbnRoZW1lcyQxLmZvcm0uaW9zID0ge307XG5cbmZ1bmN0aW9uIF9hZGRSaXBwbGUoJGNvbnRyb2wsIGV2KSB7XG4gIHZhciB4ID0gZ2V0Q29vcmQoZXYsICdYJywgdHJ1ZSksXG4gICAgICB5ID0gZ2V0Q29vcmQoZXYsICdZJywgdHJ1ZSksXG4gICAgICBjb250cm9sID0gJGNvbnRyb2xbMF0sXG4gICAgICByZWN0ID0gJGNvbnRyb2wub2Zmc2V0KCksXG4gICAgICBsZWZ0ID0geCAtIHJlY3QubGVmdCxcbiAgICAgIHRvcCA9IHkgLSByZWN0LnRvcCxcbiAgICAgIHdpZHRoID0gTWF0aC5tYXgobGVmdCwgY29udHJvbC5vZmZzZXRXaWR0aCAtIGxlZnQpLFxuICAgICAgaGVpZ2h0ID0gTWF0aC5tYXgodG9wLCBjb250cm9sLm9mZnNldEhlaWdodCAtIHRvcCksXG4gICAgICBzaXplID0gMiAqIE1hdGguc3FydChNYXRoLnBvdyh3aWR0aCwgMikgKyBNYXRoLnBvdyhoZWlnaHQsIDIpKTtcblxuICBfcmVtb3ZlUmlwcGxlKCRyaXBwbGUpO1xuXG4gICRyaXBwbGUgPSAkJDEoJzxzcGFuIGNsYXNzPVwibWJzYy1yaXBwbGVcIj48L3NwYW4+JykuY3NzKHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IGdldENvbXB1dGVkU3R5bGUoY29udHJvbCkuY29sb3IsXG4gICAgd2lkdGg6IHNpemUsXG4gICAgaGVpZ2h0OiBzaXplLFxuICAgIHRvcDogeSAtIHJlY3QudG9wIC0gc2l6ZSAvIDIsXG4gICAgbGVmdDogeCAtIHJlY3QubGVmdCAtIHNpemUgLyAyXG4gIH0pLmFwcGVuZFRvKCRjb250cm9sKTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgJHJpcHBsZS5hZGRDbGFzcygnbWJzYy1yaXBwbGUtc2NhbGVkIG1ic2MtcmlwcGxlLXZpc2libGUnKTtcbiAgfSwgMTApO1xufVxuXG5mdW5jdGlvbiBfcmVtb3ZlUmlwcGxlKCRyKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmICgkcikge1xuICAgICAgJHIucmVtb3ZlQ2xhc3MoJ21ic2MtcmlwcGxlLXZpc2libGUnKTtcbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAkci5yZW1vdmUoKTtcbiAgICAgIH0sIDIwMDApO1xuICAgIH1cbiAgfSwgMTAwKTtcbn1cblxuZnVuY3Rpb24gaW5pdFJpcHBsZSgkbWFya3VwLCBzZWxlY3RvciwgZGlzYWJsZWQsIG5vaGwpIHtcbiAgdmFyIHN0YXJ0WCxcbiAgICAgIHN0YXJ0WSxcbiAgICAgIG1hcmt1cCA9ICRtYXJrdXBbMF07XG5cbiAgZnVuY3Rpb24gb25TdGFydChldikge1xuICAgIHZhciB0YXJnZXQgPSBjbG9zZXN0KG1hcmt1cCwgZXYudGFyZ2V0LCBzZWxlY3Rvcik7XG5cbiAgICBpZiAodGFyZ2V0ICYmIHRlc3RUb3VjaChldiwgdGFyZ2V0KSkge1xuICAgICAgc3RhcnRYID0gZ2V0Q29vcmQoZXYsICdYJyk7XG4gICAgICBzdGFydFkgPSBnZXRDb29yZChldiwgJ1knKTtcbiAgICAgICRhY3RpdmUkMSA9ICQkMSh0YXJnZXQpO1xuXG4gICAgICBpZiAoISRhY3RpdmUkMS5oYXNDbGFzcyhkaXNhYmxlZCkgJiYgISRhY3RpdmUkMS5oYXNDbGFzcyhub2hsKSkge1xuICAgICAgICBfYWRkUmlwcGxlKCRhY3RpdmUkMSwgZXYpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGFjdGl2ZSQxID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbk1vdmUoZXYpIHtcbiAgICBpZiAoJGFjdGl2ZSQxICYmIE1hdGguYWJzKGdldENvb3JkKGV2LCAnWCcpIC0gc3RhcnRYKSA+IDkgfHwgTWF0aC5hYnMoZ2V0Q29vcmQoZXYsICdZJykgLSBzdGFydFkpID4gOSkge1xuICAgICAgX3JlbW92ZVJpcHBsZSgkcmlwcGxlKTtcblxuICAgICAgJGFjdGl2ZSQxID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkVuZCgpIHtcbiAgICBpZiAoJGFjdGl2ZSQxKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3JlbW92ZVJpcHBsZSgkcmlwcGxlKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgICAkYWN0aXZlJDEgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtYXJrdXApIHtcbiAgICBpZiAobWFya3VwLl9fbWJzY1JpcHBsZU9mZikge1xuICAgICAgbWFya3VwLl9fbWJzY1JpcHBsZU9mZigpO1xuICAgIH1cblxuICAgIGxpc3RlbihtYXJrdXAsICd0b3VjaHN0YXJ0Jywgb25TdGFydCwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGxpc3RlbihtYXJrdXAsICdtb3VzZWRvd24nLCBvblN0YXJ0KTtcbiAgICBsaXN0ZW4obWFya3VwLCAndG91Y2htb3ZlJywgb25Nb3ZlLCB7XG4gICAgICBwYXNzaXZlOiB0cnVlXG4gICAgfSk7XG4gICAgbGlzdGVuKG1hcmt1cCwgJ21vdXNlbW92ZScsIG9uTW92ZSk7XG4gICAgbGlzdGVuKG1hcmt1cCwgJ3RvdWNoZW5kJywgb25FbmQpO1xuICAgIGxpc3RlbihtYXJrdXAsICd0b3VjaGNhbmNlbCcsIG9uRW5kKTtcbiAgICBsaXN0ZW4obWFya3VwLCAnbW91c2VsZWF2ZScsIG9uRW5kKTtcbiAgICBsaXN0ZW4obWFya3VwLCAnbW91c2V1cCcsIG9uRW5kKTtcblxuICAgIG1hcmt1cC5fX21ic2NSaXBwbGVPZmYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB1bmxpc3RlbihtYXJrdXAsICd0b3VjaHN0YXJ0Jywgb25TdGFydCwge1xuICAgICAgICBwYXNzaXZlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHVubGlzdGVuKG1hcmt1cCwgJ21vdXNlZG93bicsIG9uU3RhcnQpO1xuICAgICAgdW5saXN0ZW4obWFya3VwLCAndG91Y2htb3ZlJywgb25Nb3ZlLCB7XG4gICAgICAgIHBhc3NpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgdW5saXN0ZW4obWFya3VwLCAnbW91c2Vtb3ZlJywgb25Nb3ZlKTtcbiAgICAgIHVubGlzdGVuKG1hcmt1cCwgJ3RvdWNoZW5kJywgb25FbmQpO1xuICAgICAgdW5saXN0ZW4obWFya3VwLCAndG91Y2hjYW5jZWwnLCBvbkVuZCk7XG4gICAgICB1bmxpc3RlbihtYXJrdXAsICdtb3VzZWxlYXZlJywgb25FbmQpO1xuICAgICAgdW5saXN0ZW4obWFya3VwLCAnbW91c2V1cCcsIG9uRW5kKTtcbiAgICAgIGRlbGV0ZSBtYXJrdXAuX19tYnNjUmlwcGxlT2ZmO1xuICAgIH07XG4gIH1cbn1cblxudmFyICRhY3RpdmUkMSxcbiAgICAkcmlwcGxlLFxuICAgIHRoZW1lcyQyID0gbW9iaXNjcm9sbC50aGVtZXM7XG50aGVtZXMkMi5mcmFtZS5tYXRlcmlhbCA9IHtcbiAgaGVhZGVyVGV4dDogZmFsc2UsXG4gIGJ0bldpZHRoOiBmYWxzZSxcbiAgZGVsZXRlSWNvbjogJ21hdGVyaWFsLWJhY2tzcGFjZScsXG4gIG9uTWFya3VwUmVhZHk6IGZ1bmN0aW9uIG9uTWFya3VwUmVhZHkoZXYpIHtcbiAgICBpbml0UmlwcGxlKCQkMShldi50YXJnZXQpLCAnLm1ic2MtZnItYnRuLWUnLCAnbWJzYy1kaXNhYmxlZCcsICdtYnNjLWZyLWJ0bi1uaGwnKTtcbiAgfVxufTtcbnRoZW1lcyQyLnNjcm9sbGVyLm1hdGVyaWFsID0gZXh0ZW5kJDEoe30sIHRoZW1lcyQyLmZyYW1lLm1hdGVyaWFsLCB7XG4gIHNob3dMYWJlbDogZmFsc2UsXG4gIHNlbGVjdGVkTGluZUJvcmRlcjogMixcbiAgd2Vla0RheXM6ICdtaW4nLFxuICBpY29uOiB7XG4gICAgZmlsbGVkOiAnbWF0ZXJpYWwtc3RhcicsXG4gICAgZW1wdHk6ICdtYXRlcmlhbC1zdGFyLW91dGxpbmUnXG4gIH0sXG4gIGNoZWNrSWNvbjogJ21hdGVyaWFsLWNoZWNrJyxcbiAgYnRuUGx1c0NsYXNzOiAnbWJzYy1pYyBtYnNjLWljLW1hdGVyaWFsLWtleWJvYXJkLWFycm93LWRvd24nLFxuICBidG5NaW51c0NsYXNzOiAnbWJzYy1pYyBtYnNjLWljLW1hdGVyaWFsLWtleWJvYXJkLWFycm93LXVwJyxcbiAgYnRuQ2FsUHJldkNsYXNzOiAnbWJzYy1pYyBtYnNjLWljLW1hdGVyaWFsLWtleWJvYXJkLWFycm93LWxlZnQnLFxuICBidG5DYWxOZXh0Q2xhc3M6ICdtYnNjLWljIG1ic2MtaWMtbWF0ZXJpYWwta2V5Ym9hcmQtYXJyb3ctcmlnaHQnXG59KTtcbnRoZW1lcyQyLmxpc3R2aWV3Lm1hdGVyaWFsID0ge1xuICBsZWZ0QXJyb3dDbGFzczogJ21ic2MtaWMtbWF0ZXJpYWwta2V5Ym9hcmQtYXJyb3ctbGVmdCcsXG4gIHJpZ2h0QXJyb3dDbGFzczogJ21ic2MtaWMtbWF0ZXJpYWwta2V5Ym9hcmQtYXJyb3ctcmlnaHQnLFxuICBvbkl0ZW1BY3RpdmF0ZTogZnVuY3Rpb24gb25JdGVtQWN0aXZhdGUoZXYpIHtcbiAgICBfYWRkUmlwcGxlKCQkMShldi50YXJnZXQpLCBldi5kb21FdmVudCk7XG4gIH0sXG4gIG9uSXRlbURlYWN0aXZhdGU6IGZ1bmN0aW9uIG9uSXRlbURlYWN0aXZhdGUoKSB7XG4gICAgX3JlbW92ZVJpcHBsZSgkcmlwcGxlKTtcbiAgfSxcbiAgb25TbGlkZVN0YXJ0OiBmdW5jdGlvbiBvblNsaWRlU3RhcnQoZXYpIHtcbiAgICAkJDEoJy5tYnNjLXJpcHBsZScsIGV2LnRhcmdldCkucmVtb3ZlKCk7XG4gIH0sXG4gIG9uU29ydFN0YXJ0OiBmdW5jdGlvbiBvblNvcnRTdGFydChldikge1xuICAgICQkMSgnLm1ic2MtcmlwcGxlJywgZXYudGFyZ2V0KS5yZW1vdmUoKTtcbiAgfVxufTtcbnRoZW1lcyQyLm5hdmlnYXRpb24ubWF0ZXJpYWwgPSB7XG4gIG9uSW5pdDogZnVuY3Rpb24gb25Jbml0KCkge1xuICAgIGluaXRSaXBwbGUoJCQxKHRoaXMpLCAnLm1ic2MtbXMtaXRlbS5tYnNjLWJ0bi1lJywgJ21ic2MtZGlzYWJsZWQnLCAnbWJzYy1idG4tbmhsJyk7XG4gIH0sXG4gIG9uTWFya3VwSW5pdDogZnVuY3Rpb24gb25NYXJrdXBJbml0KCkge1xuICAgICQkMSgnLm1ic2MtcmlwcGxlJywgdGhpcykucmVtb3ZlKCk7XG4gIH0sXG4gIG9uRGVzdHJveTogZnVuY3Rpb24gb25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLl9fbWJzY1JpcHBsZU9mZikge1xuICAgICAgdGhpcy5fX21ic2NSaXBwbGVPZmYoKTtcbiAgICB9XG4gIH1cbn07XG50aGVtZXMkMi5mb3JtLm1hdGVyaWFsID0ge1xuICBhZGRSaXBwbGU6IGZ1bmN0aW9uIGFkZFJpcHBsZShlbG0sIGV2KSB7XG4gICAgX2FkZFJpcHBsZShlbG0sIGV2KTtcbiAgfSxcbiAgcmVtb3ZlUmlwcGxlOiBmdW5jdGlvbiByZW1vdmVSaXBwbGUoKSB7XG4gICAgX3JlbW92ZVJpcHBsZSgkcmlwcGxlKTtcbiAgfVxufTtcblxudmFyIHRoZW1lcyQzID0gbW9iaXNjcm9sbC50aGVtZXM7XG50aGVtZXMkMy5mcmFtZS53aW5kb3dzID0ge1xuICBoZWFkZXJUZXh0OiBmYWxzZSxcbiAgZGVsZXRlSWNvbjogJ2JhY2tzcGFjZTQnLFxuICAvL3NldEljb246ICdtYXRlcmlhbC1jaGVjaycsXG4gIC8vY2FuY2VsSWNvbjogJ21hdGVyaWFsLWNsb3NlJyxcbiAgLy9jbG9zZUljb246ICdtYXRlcmlhbC1jbG9zZScsXG4gIC8vY2xlYXJJY29uOiAnbWF0ZXJpYWwtY2xvc2UnLFxuICAvL29rSWNvbjogJ21hdGVyaWFsLWNoZWNrJyxcbiAgLy9ub3dJY29uOiAnbG9vcDInLFxuICAvL3N0YXJ0SWNvbjogJ3BsYXkzJyxcbiAgLy9zdG9wSWNvbjogJ3BhdXNlMicsXG4gIC8vcmVzZXRJY29uOiAnc3RvcDInLFxuICAvL2xhcEljb246ICdsb29wMicsXG4gIC8vYnRuV2lkdGg6IGZhbHNlLFxuICBidG5SZXZlcnNlOiB0cnVlXG59O1xudGhlbWVzJDMuc2Nyb2xsZXIud2luZG93cyA9IGV4dGVuZCQxKHt9LCB0aGVtZXMkMy5mcmFtZS53aW5kb3dzLCB7XG4gIHJvd3M6IDYsXG4gIC8vIHNjcm9sbGVyXG4gIG1pbldpZHRoOiA4OCxcbiAgaGVpZ2h0OiA0NCxcbiAgYnRuUGx1c0NsYXNzOiAnbWJzYy1pYyBtYnNjLWljLWFycm93LWRvd241JyxcbiAgYnRuTWludXNDbGFzczogJ21ic2MtaWMgbWJzYy1pYy1hcnJvdy11cDUnLFxuICBjaGVja0ljb246ICdtYXRlcmlhbC1jaGVjaycsXG4gIGRhdGVEaXNwbGF5OiAnTU1keXknLFxuICAvLyBkYXRlXG4gIHNob3dMYWJlbDogZmFsc2UsXG4gIHNob3dTY3JvbGxBcnJvd3M6IHRydWUsXG4gIGJ0bkNhbFByZXZDbGFzczogJ21ic2MtaWMgbWJzYy1pYy1hcnJvdy1sZWZ0NScsXG4gIC8vIGNhbGVuZGFyXG4gIGJ0bkNhbE5leHRDbGFzczogJ21ic2MtaWMgbWJzYy1pYy1hcnJvdy1yaWdodDUnLFxuICAvLyBjYWxlbmRhclxuICBkYXlOYW1lc1Nob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIHVzZVNob3J0TGFiZWxzOiB0cnVlIC8vIHRpbWVzcGFuL3RpbWVyXG5cbn0pO1xudGhlbWVzJDMuZm9ybS53aW5kb3dzID0ge307XG5cbm1vYmlzY3JvbGwuY3VzdG9tVGhlbWUoJ2lvcy1kYXJrJywgJ2lvcycpO1xuXG5tb2Jpc2Nyb2xsLmN1c3RvbVRoZW1lKCdtYXRlcmlhbC1kYXJrJywgJ21hdGVyaWFsJyk7XG5cbm1vYmlzY3JvbGwuY3VzdG9tVGhlbWUoJ21vYmlzY3JvbGwtZGFyaycsICdtb2Jpc2Nyb2xsJyk7XG5cbm1vYmlzY3JvbGwuY3VzdG9tVGhlbWUoJ3dpbmRvd3MtZGFyaycsICd3aW5kb3dzJyk7XG5cbnZhciB0aGVtZXMkNCA9IG1vYmlzY3JvbGwudGhlbWVzO1xudmFyIHRoZW1lID0gJ21vYmlzY3JvbGwnO1xuXG5pZiAob3MgPT0gJ2FuZHJvaWQnKSB7XG4gIHRoZW1lID0gJ21hdGVyaWFsJztcbn0gZWxzZSBpZiAob3MgPT0gJ2lvcycpIHtcbiAgdGhlbWUgPSAnaW9zJztcbn0gZWxzZSBpZiAob3MgPT0gJ3dwJykge1xuICB0aGVtZSA9ICd3aW5kb3dzJztcbn1cblxuJCQxLmVhY2godGhlbWVzJDQuZnJhbWUsIGZ1bmN0aW9uIChrZXksIHNldHRpbmdzKSB7XG4gIC8vIFN0b3AgYXQgdGhlIGZpcnN0IGN1c3RvbSB0aGVtZSB3aXRoIHRoZSBPUyBiYXNlIHRoZW1lXG4gIGlmICh0aGVtZSAmJiBzZXR0aW5ncy5iYXNlVGhlbWUgPT0gdGhlbWUgJiYga2V5ICE9IHRoZW1lICsgJy1kYXJrJykge1xuICAgIG1vYmlzY3JvbGwuYXV0b1RoZW1lID0ga2V5O1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChrZXkgPT0gdGhlbWUpIHtcbiAgICBtb2Jpc2Nyb2xsLmF1dG9UaGVtZSA9IGtleTtcbiAgfVxufSk7XG5cbmV4cG9ydCB7IE1ic2NBdmF0YXIsIE1ic2NCdXR0b24sIE1ic2NDaGVja2JveCwgTWJzY0NvbW1lcmNpYWxDb21wb25lbnQsIE1ic2NEcm9wZG93biwgTWJzY0Zvcm0sIE1ic2NGb3Jtc01vZHVsZSwgTWJzY0lucHV0LCBNYnNjSW5wdXRNb2R1bGUsIE1ic2NNb2R1bGUsIE1ic2NOb3RlLCBNYnNjUGFnZSwgTWJzY1BhZ2VNb2R1bGUsIE1ic2NQcm9ncmVzcywgTWJzY1JhZGlvLCBNYnNjUmFkaW9Hcm91cCwgTWJzY1JhdGluZywgTWJzY1NlZ21lbnRlZCwgTWJzY1NlZ21lbnRlZEdyb3VwLCBNYnNjU2xpZGVyLCBNYnNjU3RlcHBlciwgTWJzY1N3aXRjaCwgTWJzY1RleHRhcmVhLCBtb2Jpc2Nyb2xsLCBNYnNjT3B0aW9uc1NlcnZpY2UgYXMgybVhLCBNYnNjSW5wdXRTZXJ2aWNlIGFzIMm1YiwgTWJzY0Jhc2UgYXMgybVjLCBNYnNjVmFsdWVCYXNlIGFzIMm1ZCwgTWJzY0Nsb25lQmFzZSBhcyDJtWUsIE1ic2NDb250cm9sQmFzZSBhcyDJtWYsIE1ic2NCYXNlTW9kdWxlIGFzIMm1ZywgTWJzY0Zvcm1CYXNlIGFzIMm1aCwgTWJzY0Zvcm1WYWx1ZUJhc2UgYXMgybVpLCBNYnNjSW5wdXRCYXNlIGFzIMm1aiwgTWJzY1JhZGlvU2VydmljZSBhcyDJtWssIE1ic2NSYWRpb0dyb3VwQmFzZSBhcyDJtWwsIE1ic2NGb3JtR3JvdXAgYXMgybVtLCBNYnNjRm9ybUdyb3VwVGl0bGUgYXMgybVuLCBNYnNjRm9ybUdyb3VwQ29udGVudCBhcyDJtW8sIE1ic2NBY2NvcmRpb24gYXMgybVwIH07XG4iXX0=