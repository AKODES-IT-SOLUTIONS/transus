'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var core$1 = require('@angular/core');
var core = require('@ionic-native/core');
require('rxjs');

var ɵngcc0 = require('@angular/core');
var Deeplinks = /** @class */ (function (_super) {
    tslib.__extends(Deeplinks, _super);
    function Deeplinks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Deeplinks.prototype.route = function (paths) { return core.cordova(this, "route", { "observable": true }, arguments); };
    Deeplinks.prototype.routeWithNavController = function (navController, paths, options) { return core.cordova(this, "routeWithNavController", { "observable": true }, arguments); };
    Deeplinks.pluginName = "Deeplinks";
    Deeplinks.plugin = "ionic-plugin-deeplinks";
    Deeplinks.pluginRef = "IonicDeeplink";
    Deeplinks.repo = "https://github.com/ionic-team/ionic-plugin-deeplinks";
    Deeplinks.install = "ionic cordova plugin add ionic-plugin-deeplinks --variable URL_SCHEME=myapp --variable DEEPLINK_SCHEME=https --variable DEEPLINK_HOST=example.com --variable ANDROID_PATH_PREFIX=/";
    Deeplinks.installVariables = ["URL_SCHEME", "DEEPLINK_SCHEME", "DEEPLINK_HOST", "ANDROID_PATH_PREFIX"];
    Deeplinks.platforms = ["Android", "Browser", "iOS"];
Deeplinks.ɵfac = function Deeplinks_Factory(t) { return ɵDeeplinks_BaseFactory(t || Deeplinks); };
Deeplinks.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Deeplinks, factory: function (t) { return Deeplinks.ɵfac(t); } });
var ɵDeeplinks_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(Deeplinks);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Deeplinks, [{
        type: core$1.Injectable
    }], null, null); })();
    return Deeplinks;
}(core.IonicNativePlugin));

exports.Deeplinks = Deeplinks;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlcyI6WyJidW5kbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OzswQkFHTTtBQUNOO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgdHNsaWIgPSByZXF1aXJlKCd0c2xpYicpO1xudmFyIGNvcmUkMSA9IHJlcXVpcmUoJ0Bhbmd1bGFyL2NvcmUnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnQGlvbmljLW5hdGl2ZS9jb3JlJyk7XG5yZXF1aXJlKCdyeGpzJyk7XG5cbnZhciBEZWVwbGlua3MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWIuX19leHRlbmRzKERlZXBsaW5rcywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBEZWVwbGlua3MoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgRGVlcGxpbmtzLnByb3RvdHlwZS5yb3V0ZSA9IGZ1bmN0aW9uIChwYXRocykgeyByZXR1cm4gY29yZS5jb3Jkb3ZhKHRoaXMsIFwicm91dGVcIiwgeyBcIm9ic2VydmFibGVcIjogdHJ1ZSB9LCBhcmd1bWVudHMpOyB9O1xuICAgIERlZXBsaW5rcy5wcm90b3R5cGUucm91dGVXaXRoTmF2Q29udHJvbGxlciA9IGZ1bmN0aW9uIChuYXZDb250cm9sbGVyLCBwYXRocywgb3B0aW9ucykgeyByZXR1cm4gY29yZS5jb3Jkb3ZhKHRoaXMsIFwicm91dGVXaXRoTmF2Q29udHJvbGxlclwiLCB7IFwib2JzZXJ2YWJsZVwiOiB0cnVlIH0sIGFyZ3VtZW50cyk7IH07XG4gICAgRGVlcGxpbmtzLnBsdWdpbk5hbWUgPSBcIkRlZXBsaW5rc1wiO1xuICAgIERlZXBsaW5rcy5wbHVnaW4gPSBcImlvbmljLXBsdWdpbi1kZWVwbGlua3NcIjtcbiAgICBEZWVwbGlua3MucGx1Z2luUmVmID0gXCJJb25pY0RlZXBsaW5rXCI7XG4gICAgRGVlcGxpbmtzLnJlcG8gPSBcImh0dHBzOi8vZ2l0aHViLmNvbS9pb25pYy10ZWFtL2lvbmljLXBsdWdpbi1kZWVwbGlua3NcIjtcbiAgICBEZWVwbGlua3MuaW5zdGFsbCA9IFwiaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGlvbmljLXBsdWdpbi1kZWVwbGlua3MgLS12YXJpYWJsZSBVUkxfU0NIRU1FPW15YXBwIC0tdmFyaWFibGUgREVFUExJTktfU0NIRU1FPWh0dHBzIC0tdmFyaWFibGUgREVFUExJTktfSE9TVD1leGFtcGxlLmNvbSAtLXZhcmlhYmxlIEFORFJPSURfUEFUSF9QUkVGSVg9L1wiO1xuICAgIERlZXBsaW5rcy5pbnN0YWxsVmFyaWFibGVzID0gW1wiVVJMX1NDSEVNRVwiLCBcIkRFRVBMSU5LX1NDSEVNRVwiLCBcIkRFRVBMSU5LX0hPU1RcIiwgXCJBTkRST0lEX1BBVEhfUFJFRklYXCJdO1xuICAgIERlZXBsaW5rcy5wbGF0Zm9ybXMgPSBbXCJBbmRyb2lkXCIsIFwiQnJvd3NlclwiLCBcImlPU1wiXTtcbiAgICBEZWVwbGlua3MuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgeyB0eXBlOiBjb3JlJDEuSW5qZWN0YWJsZSB9XG4gICAgXTtcbiAgICByZXR1cm4gRGVlcGxpbmtzO1xufShjb3JlLklvbmljTmF0aXZlUGx1Z2luKSk7XG5cbmV4cG9ydHMuRGVlcGxpbmtzID0gRGVlcGxpbmtzO1xuIl19