{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nexport interface DeeplinkMatch {\n    /**\n     * The route info for the matched route\n     */\n    $route: any;\n    /**\n     * Any arguments passed either through route parameters or GET parameters\n     */\n    $args: any;\n    /**\n     * The deeplink object processed from the plugin, along with any\n     * any internal native data available as \"extras\" at the time\n     * the route was matched (for example, Facebook sometimes adds extra data)\n     */\n    $link: any;\n}\nexport interface DeeplinkOptions {\n    /**\n     * Set the matched route as root page using `navCtrl.setRoot()` method.\n     */\n    root: boolean;\n}\n/**\n * @name Deeplinks\n * @premier deeplinks\n * @description This plugin handles deeplinks on iOS and Android for both custom URL scheme links\n * and Universal App Links.\n *\n * Please read the [ionic plugin deeplinks docs](https://github.com/ionic-team/ionic-plugin-deeplinks) for iOS and Android integration.\n * You must add `universal-links` to your `config.xml` and set up Apple App Site Association (AASA) for iOS and Asset Links for Android.\n *\n * @usage\n * ```typescript\n * import { Deeplinks } from '@ionic-native/deeplinks/ngx';\n *\n * constructor(private deeplinks: Deeplinks) { }\n *\n * this.deeplinks.route({\n *      '/about-us': AboutPage,\n *      '/universal-links-test': AboutPage,\n *      '/products/:productId': ProductPage\n *    }).subscribe(match => {\n *      // match.$route - the route we matched, which is the matched entry from the arguments to route()\n *      // match.$args - the args passed in the link\n *      // match.$link - the full link data\n *      console.log('Successfully matched route', match);\n *    }, nomatch => {\n *      // nomatch.$link - the full link data\n *      console.error('Got a deeplink that didn\\'t match', nomatch);\n *    });\n * ```\n *\n * Alternatively, if you're using Ionic, there's a convenience method that takes a reference to a `NavController` and handles\n * the actual navigation for you:\n *\n * ```typescript\n * this.deeplinks.routeWithNavController(this.navController, {\n *   '/about-us': AboutPage,\n *   '/products/:productId': ProductPage\n * }).subscribe(match => {\n *     // match.$route - the route we matched, which is the matched entry from the arguments to route()\n *     // match.$args - the args passed in the link\n *     // match.$link - the full link data\n *     console.log('Successfully matched route', match);\n *   }, nomatch => {\n *     // nomatch.$link - the full link data\n *     console.error('Got a deeplink that didn\\'t match', nomatch);\n *   });\n * ```\n *\n * See the [Ionic Deeplinks Demo](https://github.com/ionic-team/ionic2-deeplinks-demo/blob/master/app/app.ts) for an example of how to\n * retrieve the `NavController` reference at runtime.\n *\n * @interfaces\n * DeeplinkMatch\n */\nexport declare class Deeplinks extends IonicNativePlugin {\n    /**\n     * Define a set of paths to match against incoming deeplinks.\n     *\n     * @param {paths} paths Define a set of paths to match against incoming deeplinks.\n     * paths takes an object of the form { 'path': data }. If a deeplink\n     * matches the path, the resulting path-data pair will be returned in the\n     * promise result which you can then use to navigate in the app as you see fit.\n     * @returns {Observable<DeeplinkMatch>} Returns an Observable that is called each time a deeplink comes through, and\n     * errors if a deeplink comes through that does not match a given path.\n     */\n    route(paths: any): Observable<DeeplinkMatch>;\n    /**\n     *\n     * This is a convenience version of `route` that takes a reference to a NavController\n     * from Ionic, or a custom class that conforms to this protocol:\n     *\n     * NavController.push = function(View, Params){}\n     *\n     * This handler will automatically navigate when a route matches. If you need finer-grained\n     * control over the behavior of a matching deeplink, use the plain `route` method.\n     *\n     * @param {Nav} navController Define a set of paths to match against incoming deeplinks.\n     * paths takes an object of the form { 'path': data }. If a deeplink\n     * matches the path, the resulting path-data pair will be returned in the\n     * promise result which you can then use to navigate in the app as you see fit.\n     *\n     * @param {Object} paths\n     *\n     * @param {DeeplinkOptions} options\n     *\n     * @returns {Observable<DeeplinkMatch>} Returns an Observable that resolves each time a deeplink comes through, and\n     * errors if a deeplink comes through that does not match a given path.\n     */\n    routeWithNavController(navController: any, paths: any, options?: DeeplinkOptions): Observable<DeeplinkMatch>;\n}\n"]}