/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { PUBLIC_KEY_TOKEN } from './paystack-token';
import * as i0 from "@angular/core";
import * as i1 from "./paystack-token";
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.PaystackPop;
}
var Angular4PaystackService = /** @class */ (function () {
    function Angular4PaystackService(token) {
        this.token = token;
    }
    /**
     * @return {?}
     */
    Angular4PaystackService.prototype.loadScript = /**
     * @return {?}
     */
    function () {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            if (window.PaystackPop && typeof window.PaystackPop.setup === 'function') {
                resolve();
                return;
            }
            /** @type {?} */
            var script = window.document.createElement('script');
            window.document.head.appendChild(script);
            /** @type {?} */
            var onLoadFunc = (/**
             * @return {?}
             */
            function () {
                script.removeEventListener('load', onLoadFunc);
                resolve();
            });
            script.addEventListener('load', onLoadFunc);
            script.setAttribute('src', 'https://js.paystack.co/v1/inline.js');
        }));
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    Angular4PaystackService.prototype.checkInput = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (!obj.key && !this.token) {
            return 'ANGULAR-PAYSTACK: Please insert a your public key';
        }
        if (!obj.email) {
            return 'ANGULAR-PAYSTACK: Paystack email cannot be empty';
        }
        if (!obj.amount) {
            return 'ANGULAR-PAYSTACK: Paystack amount cannot be empty';
        }
        if (!obj.ref) {
            return 'ANGULAR-PAYSTACK: Paystack ref cannot be empty';
        }
        return '';
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    Angular4PaystackService.prototype.getPaystackOptions = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var paystackOptions = {
            key: obj.key || this.token,
            email: obj.email,
            amount: obj.amount,
            ref: obj.ref,
            metadata: obj.metadata || {},
            currency: obj.currency || 'NGN',
            plan: obj.plan || '',
            channels: obj.channels,
            quantity: obj.quantity || '',
            subaccount: obj.subaccount || '',
            transaction_charge: obj.transaction_charge || 0,
            // tslint:disable-line
            bearer: obj.bearer || '',
        };
        return paystackOptions;
    };
    /** @nocollapse */
    Angular4PaystackService.ctorParameters = function () { return [
        { type: String, decorators: [{ type: Inject, args: [PUBLIC_KEY_TOKEN,] }] }
    ]; };
    /** @nocollapse */ Angular4PaystackService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function Angular4PaystackService_Factory() { return new Angular4PaystackService(i0.ɵɵinject(i1.PUBLIC_KEY_TOKEN)); }, token: Angular4PaystackService, providedIn: "root" });
Angular4PaystackService.ɵfac = function Angular4PaystackService_Factory(t) { return new (t || Angular4PaystackService)(ɵngcc0.ɵɵinject(PUBLIC_KEY_TOKEN)); };
Angular4PaystackService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Angular4PaystackService, factory: function (t) { return Angular4PaystackService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Angular4PaystackService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [PUBLIC_KEY_TOKEN]
            }] }]; }, null); })();
    return Angular4PaystackService;
}());
export { Angular4PaystackService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackService.prototype.token;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,