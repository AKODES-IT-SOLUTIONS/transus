/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';
import { Angular4PaystackService } from './angular4-paystack.service';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.PaystackPop;
}
export class Angular4PaystackDirective {
    /**
     * @param {?} paystackService
     */
    constructor(paystackService) {
        this.paystackService = paystackService;
        this.paymentInit = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.onClose = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.callback = new EventEmitter();
        // tslint:disable-line
        this.isPaying = false;
    }
    /**
     * @return {?}
     */
    pay() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorText = '';
            if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
                errorText = this.valdateInput(this.paystackOptions);
                this.generateOptions(this.paystackOptions);
            }
            else {
                errorText = this.valdateInput(this);
                this.generateOptions(this);
            }
            if (errorText) {
                console.error(errorText);
                return errorText;
            }
            yield this.paystackService.loadScript();
            if (this.isPaying) {
                return;
            }
            if (this.paymentInit.observers.length) {
                this.paymentInit.emit();
            }
            /** @type {?} */
            const payment = window.PaystackPop.setup(this._paystackOptions);
            payment.openIframe();
            this.isPaying = true;
        });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    valdateInput(obj) {
        if (!this.callback.observers.length) {
            return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
        }
        return this.paystackService.checkInput(obj);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    generateOptions(obj) {
        this._paystackOptions = this.paystackService.getPaystackOptions(obj);
        this._paystackOptions.onClose = (/**
         * @return {?}
         */
        () => {
            if (this.onClose.observers.length) {
                this.isPaying = false;
                this.onClose.emit();
            }
        });
        this._paystackOptions.callback = (/**
         * @param {...?} response
         * @return {?}
         */
        (...response) => {
            this.isPaying = false;
            this.callback.emit(...response);
        });
    }
    /**
     * @return {?}
     */
    buttonClick() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.pay();
        });
    }
}
Angular4PaystackDirective.ɵfac = function Angular4PaystackDirective_Factory(t) { return new (t || Angular4PaystackDirective)(ɵngcc0.ɵɵdirectiveInject(Angular4PaystackService)); };
Angular4PaystackDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: Angular4PaystackDirective, selectors: [["", "angular4-paystack", ""]], hostBindings: function Angular4PaystackDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function Angular4PaystackDirective_click_HostBindingHandler() { return ctx.buttonClick(); });
    } }, inputs: { key: "key", email: "email", amount: "amount", metadata: "metadata", ref: "ref", currency: "currency", plan: "plan", quantity: "quantity", subaccount: "subaccount", channels: "channels", transaction_charge: "transaction_charge", bearer: "bearer", class: "class", style: "style", paystackOptions: "paystackOptions" }, outputs: { paymentInit: "paymentInit", onClose: "onClose", callback: "callback" } });
/** @nocollapse */
Angular4PaystackDirective.ctorParameters = () => [
    { type: Angular4PaystackService }
];
Angular4PaystackDirective.propDecorators = {
    key: [{ type: Input }],
    email: [{ type: Input }],
    amount: [{ type: Input }],
    metadata: [{ type: Input }],
    ref: [{ type: Input }],
    currency: [{ type: Input }],
    plan: [{ type: Input }],
    quantity: [{ type: Input }],
    subaccount: [{ type: Input }],
    channels: [{ type: Input }],
    transaction_charge: [{ type: Input }],
    bearer: [{ type: Input }],
    class: [{ type: Input }],
    style: [{ type: Input }],
    paystackOptions: [{ type: Input }],
    paymentInit: [{ type: Output }],
    onClose: [{ type: Output }],
    callback: [{ type: Output }],
    buttonClick: [{ type: HostListener, args: ['click',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Angular4PaystackDirective, [{
        type: Directive,
        args: [{
                selector: '[angular4-paystack]'
            }]
    }], function () { return [{ type: Angular4PaystackService }]; }, { paymentInit: [{
            type: Output
        }], onClose: [{
            type: Output
        }], callback: [{
            type: Output
        }], 
    /**
     * @return {?}
     */
    buttonClick: [{
            type: HostListener,
            args: ['click']
        }], key: [{
            type: Input
        }], email: [{
            type: Input
        }], amount: [{
            type: Input
        }], metadata: [{
            type: Input
        }], ref: [{
            type: Input
        }], currency: [{
            type: Input
        }], plan: [{
            type: Input
        }], quantity: [{
            type: Input
        }], subaccount: [{
            type: Input
        }], channels: [{
            type: Input
        }], transaction_charge: [{
            type: Input
        }], bearer: [{
            type: Input
        }], class: [{
            type: Input
        }], style: [{
            type: Input
        }], paystackOptions: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    Angular4PaystackDirective.prototype.key;
    /** @type {?} */
    Angular4PaystackDirective.prototype.email;
    /** @type {?} */
    Angular4PaystackDirective.prototype.amount;
    /** @type {?} */
    Angular4PaystackDirective.prototype.metadata;
    /** @type {?} */
    Angular4PaystackDirective.prototype.ref;
    /** @type {?} */
    Angular4PaystackDirective.prototype.currency;
    /** @type {?} */
    Angular4PaystackDirective.prototype.plan;
    /** @type {?} */
    Angular4PaystackDirective.prototype.quantity;
    /** @type {?} */
    Angular4PaystackDirective.prototype.subaccount;
    /** @type {?} */
    Angular4PaystackDirective.prototype.channels;
    /** @type {?} */
    Angular4PaystackDirective.prototype.transaction_charge;
    /** @type {?} */
    Angular4PaystackDirective.prototype.bearer;
    /** @type {?} */
    Angular4PaystackDirective.prototype.class;
    /** @type {?} */
    Angular4PaystackDirective.prototype.style;
    /** @type {?} */
    Angular4PaystackDirective.prototype.paystackOptions;
    /** @type {?} */
    Angular4PaystackDirective.prototype.paymentInit;
    /** @type {?} */
    Angular4PaystackDirective.prototype.onClose;
    /** @type {?} */
    Angular4PaystackDirective.prototype.callback;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackDirective.prototype._paystackOptions;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackDirective.prototype.isPaying;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackDirective.prototype.paystackService;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjQtcGF5c3RhY2suZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJuZzovYW5ndWxhcjQtcGF5c3RhY2svbGliL2FuZ3VsYXI0LXBheXN0YWNrLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFO0FBQ0c7QUFBVzs7QUFBZCx1QkFJQztBQUNEO0FBQWE7QUFFVixJQU5ELCtCQUVFO0FBQ0o7QUFNQSxNQUFNLE9BQU8seUJBQXlCO0FBQ3RDO0FBQVE7QUFDVTtBQUNsQixJQW1CRSxZQUFvQixlQUF3QztBQUFJLFFBQTVDLG9CQUFlLEdBQWYsZUFBZSxDQUF5QjtBQUFDLFFBTm5ELGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUMsQ0FBQyxzQkFBc0I7QUFDNUY7QUFBK0IsUUFBbkIsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDLENBQUMsc0JBQXNCO0FBQ3hGO0FBQStCLFFBQW5CLGFBQVEsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUNsRTtBQUErQixRQUNyQixhQUFRLEdBQUcsS0FBSyxDQUFDO0FBQzNCLElBQ2lFLENBQUM7QUFDbEU7QUFDTztBQUNHO0FBQVEsSUFEVixHQUFHO0FBQ1g7QUFDOEM7QUFBNkIsZ0JBRG5FLFNBQVMsR0FBRyxFQUFFO0FBQ3RCLFlBQUksSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7QUFDL0UsZ0JBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzFELGdCQUFN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QUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFJQSxBQUhBLEFBRUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQXNCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUVBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBR0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQTFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBWEEsQUFBQSxBQWFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQWtEQSxBQUFBLEFBQUEsQUFBQSxBQW5FQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgSG9zdExpc3RlbmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBheXN0YWNrT3B0aW9ucywgUHJpdmF0ZVBheXN0YWNrT3B0aW9ucyB9IGZyb20gJy4vcGF5c3RhY2stb3B0aW9ucyc7XHJcbmltcG9ydCB7IEFuZ3VsYXI0UGF5c3RhY2tTZXJ2aWNlIH0gZnJvbSAnLi9hbmd1bGFyNC1wYXlzdGFjay5zZXJ2aWNlJztcclxuXHJcbmludGVyZmFjZSBNeVdpbmRvdyBleHRlbmRzIFdpbmRvdyB7XHJcbiAgUGF5c3RhY2tQb3A6IHtcclxuICAgIHNldHVwKG9wdGlvbnM6IFBhcnRpYWw8UGF5c3RhY2tPcHRpb25zPik6IHsgb3BlbklmcmFtZSgpOiBhbnkgfVxyXG4gIH07XHJcbn1cclxuZGVjbGFyZSB2YXIgd2luZG93OiBNeVdpbmRvdztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2FuZ3VsYXI0LXBheXN0YWNrXScsIC8vIHRzbGludDpkaXNhYmxlLWxpbmVcclxufSlcclxuZXhwb3J0IGNsYXNzIEFuZ3VsYXI0UGF5c3RhY2tEaXJlY3RpdmUge1xyXG4gIEBJbnB1dCgpIGtleTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGVtYWlsOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgYW1vdW50OiBudW1iZXI7XHJcbiAgQElucHV0KCkgbWV0YWRhdGE6IHt9O1xyXG4gIEBJbnB1dCgpIHJlZjogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGN1cnJlbmN5OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgcGxhbjogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHF1YW50aXR5OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgc3ViYWNjb3VudDogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGNoYW5uZWxzOiBzdHJpbmdbXTtcclxuICBASW5wdXQoKSB0cmFuc2FjdGlvbl9jaGFyZ2U6IG51bWJlcjsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxyXG4gIEBJbnB1dCgpIGJlYXJlcjogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgc3R5bGU6IG9iamVjdDtcclxuICBASW5wdXQoKSBwYXlzdGFja09wdGlvbnM6IFBheXN0YWNrT3B0aW9ucztcclxuICBAT3V0cHV0KCkgcGF5bWVudEluaXQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcclxuICBAT3V0cHV0KCkgb25DbG9zZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxyXG4gIEBPdXRwdXQoKSBjYWxsYmFjazogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBwcml2YXRlIF9wYXlzdGFja09wdGlvbnM6IFBhcnRpYWw8UHJpdmF0ZVBheXN0YWNrT3B0aW9ucz47IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcclxuICBwcml2YXRlIGlzUGF5aW5nID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcGF5c3RhY2tTZXJ2aWNlOiBBbmd1bGFyNFBheXN0YWNrU2VydmljZSkge31cclxuXHJcbiAgYXN5bmMgcGF5KCkge1xyXG4gICAgbGV0IGVycm9yVGV4dCA9ICcnO1xyXG4gICAgaWYgKHRoaXMucGF5c3RhY2tPcHRpb25zICYmIE9iamVjdC5rZXlzKHRoaXMucGF5c3RhY2tPcHRpb25zKS5sZW5ndGggPj0gMikge1xyXG4gICAgICBlcnJvclRleHQgPSB0aGlzLnZhbGRhdGVJbnB1dCh0aGlzLnBheXN0YWNrT3B0aW9ucyk7XHJcbiAgICAgIHRoaXMuZ2VuZXJhdGVPcHRpb25zKHRoaXMucGF5c3RhY2tPcHRpb25zKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGVycm9yVGV4dCA9IHRoaXMudmFsZGF0ZUlucHV0KHRoaXMpO1xyXG4gICAgICB0aGlzLmdlbmVyYXRlT3B0aW9ucyh0aGlzKTtcclxuICAgIH1cclxuICAgIGlmIChlcnJvclRleHQpIHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnJvclRleHQpO1xyXG4gICAgICByZXR1cm4gZXJyb3JUZXh0O1xyXG4gICAgfVxyXG4gICAgYXdhaXQgdGhpcy5wYXlzdGFja1NlcnZpY2UubG9hZFNjcmlwdCgpO1xyXG4gICAgaWYgKHRoaXMuaXNQYXlpbmcpIHsgcmV0dXJuOyB9XHJcbiAgICBpZiAodGhpcy5wYXltZW50SW5pdC5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMucGF5bWVudEluaXQuZW1pdCgpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcGF5bWVudCA9IHdpbmRvdy5QYXlzdGFja1BvcC5zZXR1cCh0aGlzLl9wYXlzdGFja09wdGlvbnMpO1xyXG4gICAgcGF5bWVudC5vcGVuSWZyYW1lKCk7XHJcbiAgICB0aGlzLmlzUGF5aW5nID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHZhbGRhdGVJbnB1dChvYmo6IFBheXN0YWNrT3B0aW9ucykge1xyXG4gICAgaWYgKCF0aGlzLmNhbGxiYWNrLm9ic2VydmVycy5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuICdBTkdVTEFSLVBBWVNUQUNLOiBJbnNlcnQgYSBjYWxsYmFjayBvdXRwdXQgbGlrZSBzbyAoY2FsbGJhY2spPVxcJ1BheW1lbnRDb21wbGV0ZSgkZXZlbnQpXFwnIHRvIGNoZWNrIHBheW1lbnQgc3RhdHVzJztcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLnBheXN0YWNrU2VydmljZS5jaGVja0lucHV0KG9iaik7XHJcbiAgfVxyXG5cclxuICBnZW5lcmF0ZU9wdGlvbnMob2JqOiBQYXlzdGFja09wdGlvbnMpIHtcclxuICAgIHRoaXMuX3BheXN0YWNrT3B0aW9ucyA9IHRoaXMucGF5c3RhY2tTZXJ2aWNlLmdldFBheXN0YWNrT3B0aW9ucyhvYmopO1xyXG4gICAgdGhpcy5fcGF5c3RhY2tPcHRpb25zLm9uQ2xvc2UgPSAoKSA9PiB7XHJcbiAgICAgIGlmICh0aGlzLm9uQ2xvc2Uub2JzZXJ2ZXJzLmxlbmd0aCkge1xyXG4gICAgICAgIHRoaXMuaXNQYXlpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9uQ2xvc2UuZW1pdCgpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy5fcGF5c3RhY2tPcHRpb25zLmNhbGxiYWNrID0gKC4uLnJlc3BvbnNlKSA9PiB7XHJcbiAgICAgIHRoaXMuaXNQYXlpbmcgPSBmYWxzZTtcclxuICAgICAgdGhpcy5jYWxsYmFjay5lbWl0KC4uLnJlc3BvbnNlKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXHJcbiAgYXN5bmMgYnV0dG9uQ2xpY2soKSB7XHJcbiAgICB0aGlzLnBheSgpO1xyXG4gIH1cclxufVxyXG4iXX0=