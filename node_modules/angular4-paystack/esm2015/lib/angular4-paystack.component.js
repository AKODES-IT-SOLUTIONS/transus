/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Angular4PaystackService } from './angular4-paystack.service';
/**
 * @record
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = ["*"];
function MyWindow() { }
if (false) {
    /** @type {?} */
    MyWindow.prototype.PaystackPop;
}
export class Angular4PaystackComponent {
    /**
     * @param {?} paystackService
     */
    constructor(paystackService) {
        this.paystackService = paystackService;
        this.paymentInit = new EventEmitter();
        this.onClose = new EventEmitter(); // tslint:disable-line
        // tslint:disable-line
        this.callback = new EventEmitter();
        // tslint:disable-line
        this.isPaying = false;
    }
    /**
     * @return {?}
     */
    pay() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            let errorText = '';
            if (this.paystackOptions && Object.keys(this.paystackOptions).length >= 2) {
                errorText = this.valdateInput(this.paystackOptions);
                this.generateOptions(this.paystackOptions);
            }
            else {
                errorText = this.valdateInput(this);
                this.generateOptions(this);
            }
            if (errorText) {
                console.error(errorText);
                return errorText;
            }
            yield this.paystackService.loadScript();
            if (this.isPaying) {
                return;
            }
            if (this.paymentInit.observers.length) {
                this.paymentInit.emit();
            }
            /** @type {?} */
            const payment = window.PaystackPop.setup(this._paystackOptions);
            payment.openIframe();
            this.isPaying = true;
        });
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    valdateInput(obj) {
        if (!this.callback.observers.length) {
            return 'ANGULAR-PAYSTACK: Insert a callback output like so (callback)=\'PaymentComplete($event)\' to check payment status';
        }
        return this.paystackService.checkInput(obj);
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    generateOptions(obj) {
        this._paystackOptions = this.paystackService.getPaystackOptions(obj);
        this._paystackOptions.onClose = (/**
         * @return {?}
         */
        () => {
            if (this.onClose.observers.length) {
                this.isPaying = false;
                this.onClose.emit();
            }
        });
        this._paystackOptions.callback = (/**
         * @param {...?} response
         * @return {?}
         */
        (...response) => {
            this.isPaying = false;
            this.callback.emit(...response);
        });
    }
}
Angular4PaystackComponent.ɵfac = function Angular4PaystackComponent_Factory(t) { return new (t || Angular4PaystackComponent)(ɵngcc0.ɵɵdirectiveInject(Angular4PaystackService)); };
Angular4PaystackComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: Angular4PaystackComponent, selectors: [["angular4-paystack"]], inputs: { key: "key", email: "email", amount: "amount", metadata: "metadata", ref: "ref", currency: "currency", plan: "plan", quantity: "quantity", channels: "channels", subaccount: "subaccount", transaction_charge: "transaction_charge", bearer: "bearer", class: "class", style: "style", paystackOptions: "paystackOptions" }, outputs: { paymentInit: "paymentInit", onClose: "onClose", callback: "callback" }, ngContentSelectors: _c0, decls: 2, vars: 2, consts: [[3, "ngClass", "ngStyle", "click"]], template: function Angular4PaystackComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function Angular4PaystackComponent_Template_button_click_0_listener() { return ctx.pay(); });
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ctx.class)("ngStyle", ctx.style);
    } }, directives: [ɵngcc1.NgClass, ɵngcc1.NgStyle], encapsulation: 2 });
/** @nocollapse */
Angular4PaystackComponent.ctorParameters = () => [
    { type: Angular4PaystackService }
];
Angular4PaystackComponent.propDecorators = {
    key: [{ type: Input }],
    email: [{ type: Input }],
    amount: [{ type: Input }],
    metadata: [{ type: Input }],
    ref: [{ type: Input }],
    currency: [{ type: Input }],
    plan: [{ type: Input }],
    quantity: [{ type: Input }],
    channels: [{ type: Input }],
    subaccount: [{ type: Input }],
    transaction_charge: [{ type: Input }],
    bearer: [{ type: Input }],
    class: [{ type: Input }],
    style: [{ type: Input }],
    paystackOptions: [{ type: Input }],
    paymentInit: [{ type: Output }],
    onClose: [{ type: Output }],
    callback: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Angular4PaystackComponent, [{
        type: Component,
        args: [{
                selector: 'angular4-paystack',
                template: `<button [ngClass]="class" [ngStyle]="style" (click)="pay()"><ng-content></ng-content></button>`
            }]
    }], function () { return [{ type: Angular4PaystackService }]; }, { paymentInit: [{
            type: Output
        }], onClose: [{
            type: Output
        }], callback: [{
            type: Output
        }], key: [{
            type: Input
        }], email: [{
            type: Input
        }], amount: [{
            type: Input
        }], metadata: [{
            type: Input
        }], ref: [{
            type: Input
        }], currency: [{
            type: Input
        }], plan: [{
            type: Input
        }], quantity: [{
            type: Input
        }], channels: [{
            type: Input
        }], subaccount: [{
            type: Input
        }], transaction_charge: [{
            type: Input
        }], bearer: [{
            type: Input
        }], class: [{
            type: Input
        }], style: [{
            type: Input
        }], paystackOptions: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    Angular4PaystackComponent.prototype.key;
    /** @type {?} */
    Angular4PaystackComponent.prototype.email;
    /** @type {?} */
    Angular4PaystackComponent.prototype.amount;
    /** @type {?} */
    Angular4PaystackComponent.prototype.metadata;
    /** @type {?} */
    Angular4PaystackComponent.prototype.ref;
    /** @type {?} */
    Angular4PaystackComponent.prototype.currency;
    /** @type {?} */
    Angular4PaystackComponent.prototype.plan;
    /** @type {?} */
    Angular4PaystackComponent.prototype.quantity;
    /** @type {?} */
    Angular4PaystackComponent.prototype.channels;
    /** @type {?} */
    Angular4PaystackComponent.prototype.subaccount;
    /** @type {?} */
    Angular4PaystackComponent.prototype.transaction_charge;
    /** @type {?} */
    Angular4PaystackComponent.prototype.bearer;
    /** @type {?} */
    Angular4PaystackComponent.prototype.class;
    /** @type {?} */
    Angular4PaystackComponent.prototype.style;
    /** @type {?} */
    Angular4PaystackComponent.prototype.paystackOptions;
    /** @type {?} */
    Angular4PaystackComponent.prototype.paymentInit;
    /** @type {?} */
    Angular4PaystackComponent.prototype.onClose;
    /** @type {?} */
    Angular4PaystackComponent.prototype.callback;
    /** @type {?} */
    Angular4PaystackComponent.prototype._paystackOptions;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackComponent.prototype.isPaying;
    /**
     * @type {?}
     * @private
     */
    Angular4PaystackComponent.prototype.paystackService;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhcjQtcGF5c3RhY2suY29tcG9uZW50LmpzIiwic291cmNlcyI6WyJuZzovYW5ndWxhcjQtcGF5c3RhY2svbGliL2FuZ3VsYXI0LXBheXN0YWNrLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdkUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEU7QUFDRztBQUFXOzs7OztBQUFkLHVCQUVDO0FBQ0Q7QUFBYTtBQUVWLElBSkQsK0JBQWlCO0FBQ25CO0FBT0EsTUFBTSxPQUFPLHlCQUF5QjtBQUN0QztBQUFRO0FBQ1U7QUFDbEIsSUFrQkUsWUFBb0IsZUFBd0M7QUFBSSxRQUE1QyxvQkFBZSxHQUFmLGVBQWUsQ0FBeUI7QUFBQyxRQUxuRCxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO0FBQ3JFLFFBQVksWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDLENBQUMsc0JBQXNCO0FBQ3hGO0FBQStCLFFBQW5CLGFBQVEsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztBQUNsRTtBQUErQixRQUNyQixhQUFRLEdBQUcsS0FBSyxDQUFDO0FBQzNCLElBQWlFLENBQUM7QUFDbEU7QUFDTztBQUNHO0FBQVEsSUFEVixHQUFHO0FBQ1g7QUFDOEM7QUFBNkIsZ0JBRG5FLFNBQVMsR0FBRyxFQUFFO0FBQ3RCLFlBQUksSUFBSSxJQUFJLENBQUMsZUFBZSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7QUFDL0UsZ0JBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQzFELGdCQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsSUFB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QUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFMQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXJFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFWQSxBQUFBLEFBWUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBakJBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBheXN0YWNrT3B0aW9ucywgUHJpdmF0ZVBheXN0YWNrT3B0aW9ucyB9IGZyb20gJy4vcGF5c3RhY2stb3B0aW9ucyc7XHJcbmltcG9ydCB7IEFuZ3VsYXI0UGF5c3RhY2tTZXJ2aWNlIH0gZnJvbSAnLi9hbmd1bGFyNC1wYXlzdGFjay5zZXJ2aWNlJztcclxuXHJcbmludGVyZmFjZSBNeVdpbmRvdyBleHRlbmRzIFdpbmRvdyB7XHJcbiAgUGF5c3RhY2tQb3A6IGFueTtcclxufVxyXG5kZWNsYXJlIHZhciB3aW5kb3c6IE15V2luZG93O1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhbmd1bGFyNC1wYXlzdGFjaycsXHJcbiAgdGVtcGxhdGU6IGA8YnV0dG9uIFtuZ0NsYXNzXT1cImNsYXNzXCIgW25nU3R5bGVdPVwic3R5bGVcIiAoY2xpY2spPVwicGF5KClcIj48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9idXR0b24+YCxcclxufSlcclxuZXhwb3J0IGNsYXNzIEFuZ3VsYXI0UGF5c3RhY2tDb21wb25lbnQge1xyXG4gIEBJbnB1dCgpIGtleTogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGVtYWlsOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgYW1vdW50OiBudW1iZXI7XHJcbiAgQElucHV0KCkgbWV0YWRhdGE6IHt9O1xyXG4gIEBJbnB1dCgpIHJlZjogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGN1cnJlbmN5OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgcGxhbjogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIHF1YW50aXR5OiBzdHJpbmc7XHJcbiAgQElucHV0KCkgY2hhbm5lbHM6IHN0cmluZ1tdO1xyXG4gIEBJbnB1dCgpIHN1YmFjY291bnQ6IHN0cmluZztcclxuICBASW5wdXQoKSB0cmFuc2FjdGlvbl9jaGFyZ2U6IG51bWJlcjsgLy8gdHNsaW50OmRpc2FibGUtbGluZVxyXG4gIEBJbnB1dCgpIGJlYXJlcjogc3RyaW5nO1xyXG4gIEBJbnB1dCgpIGNsYXNzOiBzdHJpbmc7XHJcbiAgQElucHV0KCkgc3R5bGU6IG9iamVjdDtcclxuICBASW5wdXQoKSBwYXlzdGFja09wdGlvbnM6IFBheXN0YWNrT3B0aW9ucztcclxuICBAT3V0cHV0KCkgcGF5bWVudEluaXQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgQE91dHB1dCgpIG9uQ2xvc2U6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcclxuICBAT3V0cHV0KCkgY2FsbGJhY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgcHVibGljIF9wYXlzdGFja09wdGlvbnM6IFBhcnRpYWw8UHJpdmF0ZVBheXN0YWNrT3B0aW9ucz47IC8vIHRzbGludDpkaXNhYmxlLWxpbmVcclxuICBwcml2YXRlIGlzUGF5aW5nID0gZmFsc2U7XHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwYXlzdGFja1NlcnZpY2U6IEFuZ3VsYXI0UGF5c3RhY2tTZXJ2aWNlKSB7fVxyXG5cclxuICBhc3luYyBwYXkoKSB7XHJcbiAgICBsZXQgZXJyb3JUZXh0ID0gJyc7XHJcbiAgICBpZiAodGhpcy5wYXlzdGFja09wdGlvbnMgJiYgT2JqZWN0LmtleXModGhpcy5wYXlzdGFja09wdGlvbnMpLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgIGVycm9yVGV4dCA9IHRoaXMudmFsZGF0ZUlucHV0KHRoaXMucGF5c3RhY2tPcHRpb25zKTtcclxuICAgICAgdGhpcy5nZW5lcmF0ZU9wdGlvbnModGhpcy5wYXlzdGFja09wdGlvbnMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZXJyb3JUZXh0ID0gdGhpcy52YWxkYXRlSW5wdXQodGhpcyk7XHJcbiAgICAgIHRoaXMuZ2VuZXJhdGVPcHRpb25zKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgaWYgKGVycm9yVGV4dCkge1xyXG4gICAgICBjb25zb2xlLmVycm9yKGVycm9yVGV4dCk7XHJcbiAgICAgIHJldHVybiBlcnJvclRleHQ7XHJcbiAgICB9XHJcbiAgICBhd2FpdCB0aGlzLnBheXN0YWNrU2VydmljZS5sb2FkU2NyaXB0KCk7XHJcbiAgICBpZiAodGhpcy5pc1BheWluZykgeyByZXR1cm47IH1cclxuICAgIGlmICh0aGlzLnBheW1lbnRJbml0Lm9ic2VydmVycy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5wYXltZW50SW5pdC5lbWl0KCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXltZW50ID0gd2luZG93LlBheXN0YWNrUG9wLnNldHVwKHRoaXMuX3BheXN0YWNrT3B0aW9ucyk7XHJcbiAgICBwYXltZW50Lm9wZW5JZnJhbWUoKTtcclxuICAgIHRoaXMuaXNQYXlpbmcgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgdmFsZGF0ZUlucHV0KG9iajogUGF5c3RhY2tPcHRpb25zKSB7XHJcbiAgICBpZiAoIXRoaXMuY2FsbGJhY2sub2JzZXJ2ZXJzLmxlbmd0aCkge1xyXG4gICAgICByZXR1cm4gJ0FOR1VMQVItUEFZU1RBQ0s6IEluc2VydCBhIGNhbGxiYWNrIG91dHB1dCBsaWtlIHNvIChjYWxsYmFjayk9XFwnUGF5bWVudENvbXBsZXRlKCRldmVudClcXCcgdG8gY2hlY2sgcGF5bWVudCBzdGF0dXMnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMucGF5c3RhY2tTZXJ2aWNlLmNoZWNrSW5wdXQob2JqKTtcclxuICB9XHJcblxyXG4gIGdlbmVyYXRlT3B0aW9ucyhvYmo6IFBheXN0YWNrT3B0aW9ucykge1xyXG4gICAgdGhpcy5fcGF5c3RhY2tPcHRpb25zID0gdGhpcy5wYXlzdGFja1NlcnZpY2UuZ2V0UGF5c3RhY2tPcHRpb25zKG9iaik7XHJcbiAgICB0aGlzLl9wYXlzdGFja09wdGlvbnMub25DbG9zZSA9ICgpID0+IHtcclxuICAgICAgaWYgKHRoaXMub25DbG9zZS5vYnNlcnZlcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy5pc1BheWluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMub25DbG9zZS5lbWl0KCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aGlzLl9wYXlzdGFja09wdGlvbnMuY2FsbGJhY2sgPSAoLi4ucmVzcG9uc2UpID0+IHtcclxuICAgICAgdGhpcy5pc1BheWluZyA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmNhbGxiYWNrLmVtaXQoLi4ucmVzcG9uc2UpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==